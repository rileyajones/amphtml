<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="5287.2500" tests="654" failures="199" skipped="93">
  <testsuite name="Root Suite" timestamp="2021-04-28T22:09:27" tests="0" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="ad choices" timestamp="2021-04-28T22:09:27" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-adchoices.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:09:27" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-adchoices.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" AMPHTML ads FIE environment " timestamp="2021-04-28T22:09:27" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-adchoices.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:09:27" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-adchoices.js" time="22.9290" failures="1">
    <testcase name="ad choices chrome  AMPHTML ads FIE environment  &quot;before each&quot; hook for &quot;interactions&quot;" time="22.9290" classname="&quot;before each&quot; hook for &quot;interactions&quot;">
      <failure message="Waiting for element to be located amp-ad &gt; iframe
Wait timed out after 5000ms
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;title&gt;A4A Envelope&lt;/title&gt;
  &lt;link rel=&quot;canonical&quot; href=&quot;http://nonblocking.io/&quot;&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,minimum-scale=1,initial-scale=1&quot;&gt;
  &lt;script async=&quot;&quot; src=&quot;/dist/v0.js&quot;&gt;&lt;/script&gt;
  &lt;script async=&quot;&quot; custom-element=&quot;amp-ad&quot; src=&quot;/dist/v0/amp-ad-0.1.js&quot;&gt;&lt;/script&gt;
  &lt;style amp-custom=&quot;&quot;&gt;
    #ad-url {
      height: 18px;
      overflow: hidden;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1 id=&quot;title&quot;&gt;A4A Envelope&lt;/h1&gt;
  &lt;div id=&quot;ad-url&quot;&gt;url: http://ads.localhost:8000/test/fixtures/e2e/amphtml-ads/text.html?inabox=1&lt;/div&gt;
  &lt;div&gt;size: 300x250&lt;/div&gt;

  &lt;div style=&quot;background: #eee; overflow: hidden; height: 0px;&quot;&gt;scroll down to see the ad&lt;/div&gt;

  &lt;amp-ad width=&quot;300&quot; height=&quot;250&quot; id=&quot;i-amphtml-demo-id&quot; type=&quot;fake&quot; a4a-conversion=&quot;true&quot; checksig=&quot;&quot; disable3pfallback=&quot;true&quot; data-experiment-id=&quot;&quot; src=&quot;http://ads.localhost:8000/test/fixtures/e2e/amphtml-ads/text.html?inabox=1&quot;&gt;
  &lt;/amp-ad&gt;

  &lt;div style=&quot;background: #eee; overflow: hidden;; height: 100vh;&quot;&gt;&lt;/div&gt;


&lt;/body&gt;" type="Error"><![CDATA[Error: Waiting for element to be located amp-ad > iframe
Wait timed out after 5000ms
<head>
  <meta charset="utf-8">
  <title>A4A Envelope</title>
  <link rel="canonical" href="http://nonblocking.io/">
  <meta name="viewport" content="width=device-width,minimum-scale=1,initial-scale=1">
  <script async="" src="/dist/v0.js"></script>
  <script async="" custom-element="amp-ad" src="/dist/v0/amp-ad-0.1.js"></script>
  <style amp-custom="">
    #ad-url {
      height: 18px;
      overflow: hidden;
    }
  </style>
</head>
<body>
  <h1 id="title">A4A Envelope</h1>
  <div id="ad-url">url: http://ads.localhost:8000/test/fixtures/e2e/amphtml-ads/text.html?inabox=1</div>
  <div>size: 300x250</div>

  <div style="background: #eee; overflow: hidden; height: 0px;">scroll down to see the ad</div>

  <amp-ad width="300" height="250" id="i-amphtml-demo-id" type="fake" a4a-conversion="true" checksig="" disable3pfallback="true" data-experiment-id="" src="http://ads.localhost:8000/test/fixtures/e2e/amphtml-ads/text.html?inabox=1">
  </amp-ad>

  <div style="background: #eee; overflow: hidden;; height: 100vh;"></div>


</body>
    at AmpDriver._callee7$ (build-system/tasks/e2e/amp-driver.js:321:23)
    at tryCatch (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:61:40)
    at GeneratorFunctionPrototype.invoke [as _invoke] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:329:22)
    at GeneratorFunctionPrototype.prototype.<computed> [as next] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:94:21)
    at asyncGeneratorStep (build-system/tasks/e2e/amp-driver.js:13:103)
    at _next (build-system/tasks/e2e/amp-driver.js:15:194)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox environment " timestamp="2021-04-28T22:09:50" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-adchoices.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:09:50" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-adchoices.js" time="0.0340" failures="1">
    <testcase name="ad choices chrome  AMPHTML ads inabox environment    interactions" time="0.0340" classname="interactions">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox friendly frame environment " timestamp="2021-04-28T22:09:51" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-adchoices.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:09:51" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-adchoices.js" time="0.0320" failures="1">
    <testcase name="ad choices chrome  AMPHTML ads inabox friendly frame environment    interactions" time="0.0320" classname="interactions">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox safeframe environment " timestamp="2021-04-28T22:09:51" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-adchoices.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:09:51" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-adchoices.js" time="0.0300" failures="1">
    <testcase name="ad choices chrome  AMPHTML ads inabox safeframe environment    interactions" time="0.0300" classname="interactions">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-bind" timestamp="2021-04-28T22:09:52" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-brightcove.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:09:52" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-brightcove.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:09:52" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-brightcove.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:09:52" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-brightcove.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with &lt;amp-brightcove&gt;" timestamp="2021-04-28T22:09:52" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-brightcove.js" time="5.2260" failures="1">
    <testcase name="amp-bind chrome  Standalone environment    with &lt;amp-brightcove&gt; should support binding to data-account" time="5.2260" classname="should support binding to data-account">
      <failure message="Waiting for element to be located #brightcove iframe
Wait timed out after 5212ms" type="TimeoutError"><![CDATA[TimeoutError: Waiting for element to be located #brightcove iframe
Wait timed out after 5212ms
    at /Users/rileyjones/amp/amphtml/build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:894:17
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T22:09:58" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-brightcove.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:09:58" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-brightcove.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with &lt;amp-brightcove&gt;" timestamp="2021-04-28T22:09:58" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-brightcove.js" time="22.4800" failures="1">
    <testcase name="amp-bind chrome  Viewer environment  &quot;before each&quot; hook for &quot;should support binding to data-account&quot;" time="22.4800" classname="&quot;before each&quot; hook for &quot;should support binding to data-account&quot;">
      <failure message="Waiting for element to be located #viewer[data-loaded]
Wait timed out after 5206ms
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;Viewer&lt;/title&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui&quot;&gt;
    &lt;script src=&quot;/dist/v0/examples/amp-viewer-host.js&quot;&gt;&lt;/script&gt;
    &lt;style&gt;
      body, #viewer {
        margin: 0;
        border: 0;
        padding: 0;
      }
      body,.fill {
        position: absolute;
        height: 100%;
        width: 100%;
      }
    &lt;/style&gt;
    &lt;script&gt;
      var viewer = null;
      function Viewer(url, opt_caps, simulateEmail = false) {
        this.id = &apos;viewer&apos;;
        this.url = url;
        this.stackIndex_ = 0;
        this.prerenderSize_ = 1;
        this.csi_ = 1;
        this.caps_ =
          opt_caps || &apos;a2a,focus-rect,foo,keyboard,swipe,iframeScroll&apos;;
        this.receivedMessages = [];
        this.simulateEmail = simulateEmail;

        this.container = document.body;
        this.iframe = document.createElement(&apos;iframe&apos;);
        this.iframe.setAttribute(&apos;id&apos;, this.id);
        this.iframe.setAttribute(
          &apos;sandbox&apos;,
          &apos;allow-popups allow-scripts allow-forms allow-pointer-lock&apos; +
            &apos; allow-popups-to-escape-sandbox allow-same-origin&apos;
        );
        this.iframe.setAttribute(&apos;scrolling&apos;, &apos;yes&apos;);

        if (simulateEmail) {
          this.iframe.setAttribute(&apos;height&apos;, &apos;0&apos;);
          this.iframe.setAttribute(&apos;width&apos;, &apos;0&apos;);
        } else {
          this.iframe.classList.add(&apos;fill&apos;);
        }

        window.addEventListener(&apos;resize&apos;, this.onResize_.bind(this));
        window.addEventListener(&apos;popstate&apos;, this.onPopState_.bind(this));

        this.start();
      }

      Viewer.prototype.start = function () {
        var params = {
          history: 1,
          width: this.container./*OK*/ offsetWidth,
          height: this.container./*OK*/ offsetHeight,
          prerenderSize: this.prerenderSize_,
          origin: parseUrlDeprecated(window.location.href).origin,
          csi: this.csi_,
          cap: this.caps_,
        };
        log(&apos;Params:&apos; + JSON.stringify(params));

        var inputUrl = this.url + &apos;#&apos; + paramsStr(params);
        if (window.location.hash &amp;&amp; window.location.hash.length &gt; 1) {
          inputUrl += &apos;&amp;&apos; + window.location.hash.substring(1);
        }
        var parsedUrl = parseUrlDeprecated(inputUrl);
        var url = parsedUrl.href;
        this.frameOrigin_ = parsedUrl.origin;
        log(&apos;AMP URL = &apos;, url);
        this.container.appendChild(this.iframe);

        this.ampViewerHost_ = new AmpViewerHost(
          window,
          this.iframe,
          this.frameOrigin_,
          this.processRequest_.bind(this),
          /* logs id */ this.id
        );

        setTimeout(
          function () {
            this.iframe.setAttribute(&apos;src&apos;, url);
          }.bind(this)
        );
      };

      Viewer.prototype.documentReady_ = function () {
        log(&apos;AMP document ready&apos;);
        this.iframe.dataset[&apos;loaded&apos;] = &apos;&apos;;
        return Promise.resolve();
      };

      Viewer.prototype.onScroll_ = function () {
        log(&apos;Viewer.prototype.onScroll_&apos;);
        this.ampViewerHost_.sendRequest(
          &apos;viewport&apos;,
          {
            scrollTop: this.container./*OK*/ scrollTop,
          },
          false
        );
      };

      Viewer.prototype.onResize_ = function () {
        log(
          &apos;Resized to &apos;,
          this.container./*OK*/ offsetWidth,
          this.container./*OK*/ offsetHeight,
          this.container./*OK*/ scrollTop
        );
        this.ampViewerHost_.sendRequest(
          &apos;viewport&apos;,
          {
            scrollTop: this.container./*OK*/ scrollTop,
            width: this.container./*OK*/ offsetWidth,
            height: this.container./*OK*/ offsetHeight,
          },
          false
        );
      };

      Viewer.prototype.pushHistory_ = function (stackIndex) {
        log(&apos;push history to &apos;, stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_ + 1) {
          throw new Error(&apos;Only one step push allowed&apos;);
        }
        this.stackIndex_ = stackIndex;
        window.history.pushState({}, &apos;&apos;);
        return Promise.resolve();
      };

      Viewer.prototype.popHistory_ = function (stackIndex) {
        log(&apos;pop history at &apos;, stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_) {
          throw new Error(&apos;Only one step pop allowed&apos;);
        }
        this.stackIndex_ = stackIndex;
        window.history.go(-1);
        return Promise.resolve();
      };

      Viewer.prototype.onPopState_ = function () {
        // Even more trivial. Always assumes that only one step was popped in
        // history.
        this.stackIndex_--;
        this.ampViewerHost_.sendRequest(
          &apos;historyPopped&apos;,
          {
            newStackIndex: this.stackIndex_,
          },
          false
        );
        log(&apos;history popped to &apos;, this.stackIndex_);
      };

      Viewer.prototype.scrollAmpDoc = function (scrollTop) {
        log(&apos;viewer scroll amp doc: &apos;, scrollTop);
        this.ampViewerHost_.sendRequest(&apos;scroll&apos;, {scrollTop: scrollTop}, true);
      };

      Viewer.prototype.processRequest_ = function (name, data, awaitResponse) {
        log(&apos;Viewer.prototype.processRequest_&apos;, name);
        this.receivedMessages.push({name, data});
        switch (name) {
          case &apos;documentLoaded&apos;:
            return this.documentReady_();
          case &apos;pushHistory&apos;:
            return this.pushHistory_(data.stackIndex);
          case &apos;popHistory&apos;:
            return this.popHistory_(data.stackIndex);
          case &apos;documentHeight&apos;:
            if (this.simulateEmail) {
              const {height} = data;
              this.iframe.style.height = height + &apos;px&apos;;
              this.iframe.removeAttribute(&apos;width&apos;);
            }
            return Promise.resolve();
          case &apos;broadcast&apos;:
          case &apos;bindReady&apos;:
          case &apos;focusin&apos;:
          case &apos;requestFullOverlay&apos;:
          case &apos;cancelFullOverlay&apos;:
          case &apos;unloaded&apos;:
          case &apos;tick&apos;:
          case &apos;a2aNavigate&apos;:
          case &apos;sendCsi&apos;:
          case &apos;touchstart&apos;:
          case &apos;touchmove&apos;:
          case &apos;touchend&apos;:
          case &apos;setFlushParams&apos;:
          case &apos;prerenderComplete&apos;:
          case &apos;scroll&apos;:
          case &apos;replaceHistory&apos;:
          case &apos;visibilitychange&apos;:
            return Promise.resolve();
          case &apos;xhr&apos;:
          case &apos;viewerRenderTemplate&apos;:
          default:
            return Promise.reject(&apos;Request not supported: &apos;, name);
        }
      };

      function log() {
        var var_args = Array.prototype.slice.call(arguments, 0);
        var_args.unshift(&apos;[VIEWER]&apos;);
        console /*OK*/.log
          .apply(console, var_args);
      }

      function parseUrlDeprecated(urlString) {
        var a = document.createElement(&apos;a&apos;);
        a.href = urlString;
        return {
          href: a.href,
          protocol: a.protocol,
          host: a.host,
          hostname: a.hostname,
          port: a.port == &apos;0&apos; ? &apos;&apos; : a.port,
          pathname: a.pathname,
          search: a.search,
          hash: a.hash,
          origin: a.protocol + &apos;//&apos; + a.host,
        };
      }

      function paramsStr(params) {
        var s = &apos;&apos;;
        for (var k in params) {
          var v = params[k];
          if (v === null || v === undefined) {
            continue;
          }
          if (s.length &gt; 0) {
            s += &apos;&amp;&apos;;
          }
          s += encodeURIComponent(k) + &apos;=&apos; + encodeURIComponent(v);
        }
        return s;
      }

      /**
       * Parses the query string of an URL. This method returns a simple key/value
       * map. If there are duplicate keys the latest value is returned.
       * @param {string} queryString
       * @return {!Object&lt;string&gt;}
       */
      function parseQueryString(queryString) {
        const params = Object.create(null);
        if (!queryString) {
          return params;
        }
        if (startsWith(queryString, &apos;?&apos;) || startsWith(queryString, &apos;#&apos;)) {
          queryString = queryString.substr(1);
        }
        const pairs = queryString.split(&apos;&amp;&apos;);
        for (let i = 0; i &lt; pairs.length; i++) {
          const pair = pairs[i];
          const eqIndex = pair.indexOf(&apos;=&apos;);
          let name;
          let value;
          if (eqIndex != -1) {
            name = decodeURIComponent(pair.substring(0, eqIndex)).trim();
            value = decodeURIComponent(pair.substring(eqIndex + 1)).trim();
          } else {
            name = decodeURIComponent(pair).trim();
            value = &apos;&apos;;
          }
          if (name) {
            params[name] = value;
          }
        }
        return params;
      }

      function startsWith(string, prefix) {
        return string.lastIndexOf(prefix, 0) == 0;
      }

      /**
       * @param {string} url
       * @param {string} param
       * @param {*} value
       * @return {string}
       */
      function addQueryParam(url, param, value) {
        const paramValue =
          encodeURIComponent(param) + &apos;=&apos; + encodeURIComponent(value);
        if (!url.includes(&apos;?&apos;)) {
          url += &apos;?&apos; + paramValue;
        } else {
          url += &apos;&amp;&apos; + paramValue;
        }
        return url;
      }

      function loadAmpDoc() {
        const hash = window.location.hash;
        const hashParams = parseQueryString(hash);
        const href = hashParams[&apos;href&apos;];
        const caps = hashParams[&apos;caps&apos;];
        const isEmail = &apos;true&apos; === hashParams[&apos;isEmail&apos;];

        viewer = new Viewer(
          addQueryParam(href, &apos;amp_js_v&apos;, &apos;0.1&apos;),
          caps,
          isEmail
        );
      }
      window.onload = loadAmpDoc;
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;

&lt;iframe id=&quot;viewer&quot; sandbox=&quot;allow-popups allow-scripts allow-forms allow-pointer-lock allow-popups-to-escape-sandbox allow-same-origin&quot; scrolling=&quot;yes&quot; class=&quot;fill&quot;&gt;&lt;/iframe&gt;&lt;/body&gt;" type="Error"><![CDATA[Error: Waiting for element to be located #viewer[data-loaded]
Wait timed out after 5206ms
<head>
    <meta charset="utf-8">
    <title>Viewer</title>
    <meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui">
    <script src="/dist/v0/examples/amp-viewer-host.js"></script>
    <style>
      body, #viewer {
        margin: 0;
        border: 0;
        padding: 0;
      }
      body,.fill {
        position: absolute;
        height: 100%;
        width: 100%;
      }
    </style>
    <script>
      var viewer = null;
      function Viewer(url, opt_caps, simulateEmail = false) {
        this.id = 'viewer';
        this.url = url;
        this.stackIndex_ = 0;
        this.prerenderSize_ = 1;
        this.csi_ = 1;
        this.caps_ =
          opt_caps || 'a2a,focus-rect,foo,keyboard,swipe,iframeScroll';
        this.receivedMessages = [];
        this.simulateEmail = simulateEmail;

        this.container = document.body;
        this.iframe = document.createElement('iframe');
        this.iframe.setAttribute('id', this.id);
        this.iframe.setAttribute(
          'sandbox',
          'allow-popups allow-scripts allow-forms allow-pointer-lock' +
            ' allow-popups-to-escape-sandbox allow-same-origin'
        );
        this.iframe.setAttribute('scrolling', 'yes');

        if (simulateEmail) {
          this.iframe.setAttribute('height', '0');
          this.iframe.setAttribute('width', '0');
        } else {
          this.iframe.classList.add('fill');
        }

        window.addEventListener('resize', this.onResize_.bind(this));
        window.addEventListener('popstate', this.onPopState_.bind(this));

        this.start();
      }

      Viewer.prototype.start = function () {
        var params = {
          history: 1,
          width: this.container./*OK*/ offsetWidth,
          height: this.container./*OK*/ offsetHeight,
          prerenderSize: this.prerenderSize_,
          origin: parseUrlDeprecated(window.location.href).origin,
          csi: this.csi_,
          cap: this.caps_,
        };
        log('Params:' + JSON.stringify(params));

        var inputUrl = this.url + '#' + paramsStr(params);
        if (window.location.hash && window.location.hash.length > 1) {
          inputUrl += '&' + window.location.hash.substring(1);
        }
        var parsedUrl = parseUrlDeprecated(inputUrl);
        var url = parsedUrl.href;
        this.frameOrigin_ = parsedUrl.origin;
        log('AMP URL = ', url);
        this.container.appendChild(this.iframe);

        this.ampViewerHost_ = new AmpViewerHost(
          window,
          this.iframe,
          this.frameOrigin_,
          this.processRequest_.bind(this),
          /* logs id */ this.id
        );

        setTimeout(
          function () {
            this.iframe.setAttribute('src', url);
          }.bind(this)
        );
      };

      Viewer.prototype.documentReady_ = function () {
        log('AMP document ready');
        this.iframe.dataset['loaded'] = '';
        return Promise.resolve();
      };

      Viewer.prototype.onScroll_ = function () {
        log('Viewer.prototype.onScroll_');
        this.ampViewerHost_.sendRequest(
          'viewport',
          {
            scrollTop: this.container./*OK*/ scrollTop,
          },
          false
        );
      };

      Viewer.prototype.onResize_ = function () {
        log(
          'Resized to ',
          this.container./*OK*/ offsetWidth,
          this.container./*OK*/ offsetHeight,
          this.container./*OK*/ scrollTop
        );
        this.ampViewerHost_.sendRequest(
          'viewport',
          {
            scrollTop: this.container./*OK*/ scrollTop,
            width: this.container./*OK*/ offsetWidth,
            height: this.container./*OK*/ offsetHeight,
          },
          false
        );
      };

      Viewer.prototype.pushHistory_ = function (stackIndex) {
        log('push history to ', stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_ + 1) {
          throw new Error('Only one step push allowed');
        }
        this.stackIndex_ = stackIndex;
        window.history.pushState({}, '');
        return Promise.resolve();
      };

      Viewer.prototype.popHistory_ = function (stackIndex) {
        log('pop history at ', stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_) {
          throw new Error('Only one step pop allowed');
        }
        this.stackIndex_ = stackIndex;
        window.history.go(-1);
        return Promise.resolve();
      };

      Viewer.prototype.onPopState_ = function () {
        // Even more trivial. Always assumes that only one step was popped in
        // history.
        this.stackIndex_--;
        this.ampViewerHost_.sendRequest(
          'historyPopped',
          {
            newStackIndex: this.stackIndex_,
          },
          false
        );
        log('history popped to ', this.stackIndex_);
      };

      Viewer.prototype.scrollAmpDoc = function (scrollTop) {
        log('viewer scroll amp doc: ', scrollTop);
        this.ampViewerHost_.sendRequest('scroll', {scrollTop: scrollTop}, true);
      };

      Viewer.prototype.processRequest_ = function (name, data, awaitResponse) {
        log('Viewer.prototype.processRequest_', name);
        this.receivedMessages.push({name, data});
        switch (name) {
          case 'documentLoaded':
            return this.documentReady_();
          case 'pushHistory':
            return this.pushHistory_(data.stackIndex);
          case 'popHistory':
            return this.popHistory_(data.stackIndex);
          case 'documentHeight':
            if (this.simulateEmail) {
              const {height} = data;
              this.iframe.style.height = height + 'px';
              this.iframe.removeAttribute('width');
            }
            return Promise.resolve();
          case 'broadcast':
          case 'bindReady':
          case 'focusin':
          case 'requestFullOverlay':
          case 'cancelFullOverlay':
          case 'unloaded':
          case 'tick':
          case 'a2aNavigate':
          case 'sendCsi':
          case 'touchstart':
          case 'touchmove':
          case 'touchend':
          case 'setFlushParams':
          case 'prerenderComplete':
          case 'scroll':
          case 'replaceHistory':
          case 'visibilitychange':
            return Promise.resolve();
          case 'xhr':
          case 'viewerRenderTemplate':
          default:
            return Promise.reject('Request not supported: ', name);
        }
      };

      function log() {
        var var_args = Array.prototype.slice.call(arguments, 0);
        var_args.unshift('[VIEWER]');
        console /*OK*/.log
          .apply(console, var_args);
      }

      function parseUrlDeprecated(urlString) {
        var a = document.createElement('a');
        a.href = urlString;
        return {
          href: a.href,
          protocol: a.protocol,
          host: a.host,
          hostname: a.hostname,
          port: a.port == '0' ? '' : a.port,
          pathname: a.pathname,
          search: a.search,
          hash: a.hash,
          origin: a.protocol + '//' + a.host,
        };
      }

      function paramsStr(params) {
        var s = '';
        for (var k in params) {
          var v = params[k];
          if (v === null || v === undefined) {
            continue;
          }
          if (s.length > 0) {
            s += '&';
          }
          s += encodeURIComponent(k) + '=' + encodeURIComponent(v);
        }
        return s;
      }

      /**
       * Parses the query string of an URL. This method returns a simple key/value
       * map. If there are duplicate keys the latest value is returned.
       * @param {string} queryString
       * @return {!Object<string>}
       */
      function parseQueryString(queryString) {
        const params = Object.create(null);
        if (!queryString) {
          return params;
        }
        if (startsWith(queryString, '?') || startsWith(queryString, '#')) {
          queryString = queryString.substr(1);
        }
        const pairs = queryString.split('&');
        for (let i = 0; i < pairs.length; i++) {
          const pair = pairs[i];
          const eqIndex = pair.indexOf('=');
          let name;
          let value;
          if (eqIndex != -1) {
            name = decodeURIComponent(pair.substring(0, eqIndex)).trim();
            value = decodeURIComponent(pair.substring(eqIndex + 1)).trim();
          } else {
            name = decodeURIComponent(pair).trim();
            value = '';
          }
          if (name) {
            params[name] = value;
          }
        }
        return params;
      }

      function startsWith(string, prefix) {
        return string.lastIndexOf(prefix, 0) == 0;
      }

      /**
       * @param {string} url
       * @param {string} param
       * @param {*} value
       * @return {string}
       */
      function addQueryParam(url, param, value) {
        const paramValue =
          encodeURIComponent(param) + '=' + encodeURIComponent(value);
        if (!url.includes('?')) {
          url += '?' + paramValue;
        } else {
          url += '&' + paramValue;
        }
        return url;
      }

      function loadAmpDoc() {
        const hash = window.location.hash;
        const hashParams = parseQueryString(hash);
        const href = hashParams['href'];
        const caps = hashParams['caps'];
        const isEmail = 'true' === hashParams['isEmail'];

        viewer = new Viewer(
          addQueryParam(href, 'amp_js_v', '0.1'),
          caps,
          isEmail
        );
      }
      window.onload = loadAmpDoc;
    </script>
  </head>
  <body>

<iframe id="viewer" sandbox="allow-popups allow-scripts allow-forms allow-pointer-lock allow-popups-to-escape-sandbox allow-same-origin" scrolling="yes" class="fill"></iframe></body>
    at AmpDriver._callee7$ (build-system/tasks/e2e/amp-driver.js:321:23)
    at tryCatch (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:61:40)
    at GeneratorFunctionPrototype.invoke [as _invoke] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:329:22)
    at GeneratorFunctionPrototype.prototype.<computed> [as next] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:94:21)
    at asyncGeneratorStep (build-system/tasks/e2e/amp-driver.js:13:103)
    at _next (build-system/tasks/e2e/amp-driver.js:15:194)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Shadow environment " timestamp="2021-04-28T22:10:20" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-brightcove.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:10:20" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-brightcove.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with &lt;amp-brightcove&gt;" timestamp="2021-04-28T22:10:20" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-brightcove.js" time="5.1060" failures="1">
    <testcase name="amp-bind chrome  Shadow environment    with &lt;amp-brightcove&gt; should support binding to data-account" time="5.1060" classname="should support binding to data-account">
      <failure message="Waiting for element to be located #brightcove iframe
Wait timed out after 5099ms" type="TimeoutError"><![CDATA[TimeoutError: Waiting for element to be located #brightcove iframe
Wait timed out after 5099ms
    at /Users/rileyjones/amp/amphtml/build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:894:17
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-bind" timestamp="2021-04-28T22:10:26" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-email.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:10:26" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-email.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:10:26" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-email.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:10:26" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-email.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="amp4email" timestamp="2021-04-28T22:10:26" tests="2" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-email.js" time="0.0700" failures="2">
    <testcase name="amp-bind chrome  Standalone environment    amp4email should NOT allow mutation of a[href]" time="0.0320" classname="should NOT allow mutation of a[href]">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
    <testcase name="amp-bind chrome  Standalone environment    amp4email should NOT allow mutation of img[src]" time="0.0380" classname="should NOT allow mutation of img[src]">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T22:10:27" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-email.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:10:27" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-email.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="amp4email" timestamp="2021-04-28T22:10:27" tests="2" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-email.js" time="23.1500" failures="1">
    <testcase name="amp-bind chrome  Viewer environment  &quot;before each&quot; hook for &quot;should NOT allow mutation of a[href]&quot;" time="23.1500" classname="&quot;before each&quot; hook for &quot;should NOT allow mutation of a[href]&quot;">
      <failure message="Waiting for element to be located #viewer[data-loaded]
Wait timed out after 5182ms
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;Viewer&lt;/title&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui&quot;&gt;
    &lt;script src=&quot;/dist/v0/examples/amp-viewer-host.js&quot;&gt;&lt;/script&gt;
    &lt;style&gt;
      body, #viewer {
        margin: 0;
        border: 0;
        padding: 0;
      }
      body,.fill {
        position: absolute;
        height: 100%;
        width: 100%;
      }
    &lt;/style&gt;
    &lt;script&gt;
      var viewer = null;
      function Viewer(url, opt_caps, simulateEmail = false) {
        this.id = &apos;viewer&apos;;
        this.url = url;
        this.stackIndex_ = 0;
        this.prerenderSize_ = 1;
        this.csi_ = 1;
        this.caps_ =
          opt_caps || &apos;a2a,focus-rect,foo,keyboard,swipe,iframeScroll&apos;;
        this.receivedMessages = [];
        this.simulateEmail = simulateEmail;

        this.container = document.body;
        this.iframe = document.createElement(&apos;iframe&apos;);
        this.iframe.setAttribute(&apos;id&apos;, this.id);
        this.iframe.setAttribute(
          &apos;sandbox&apos;,
          &apos;allow-popups allow-scripts allow-forms allow-pointer-lock&apos; +
            &apos; allow-popups-to-escape-sandbox allow-same-origin&apos;
        );
        this.iframe.setAttribute(&apos;scrolling&apos;, &apos;yes&apos;);

        if (simulateEmail) {
          this.iframe.setAttribute(&apos;height&apos;, &apos;0&apos;);
          this.iframe.setAttribute(&apos;width&apos;, &apos;0&apos;);
        } else {
          this.iframe.classList.add(&apos;fill&apos;);
        }

        window.addEventListener(&apos;resize&apos;, this.onResize_.bind(this));
        window.addEventListener(&apos;popstate&apos;, this.onPopState_.bind(this));

        this.start();
      }

      Viewer.prototype.start = function () {
        var params = {
          history: 1,
          width: this.container./*OK*/ offsetWidth,
          height: this.container./*OK*/ offsetHeight,
          prerenderSize: this.prerenderSize_,
          origin: parseUrlDeprecated(window.location.href).origin,
          csi: this.csi_,
          cap: this.caps_,
        };
        log(&apos;Params:&apos; + JSON.stringify(params));

        var inputUrl = this.url + &apos;#&apos; + paramsStr(params);
        if (window.location.hash &amp;&amp; window.location.hash.length &gt; 1) {
          inputUrl += &apos;&amp;&apos; + window.location.hash.substring(1);
        }
        var parsedUrl = parseUrlDeprecated(inputUrl);
        var url = parsedUrl.href;
        this.frameOrigin_ = parsedUrl.origin;
        log(&apos;AMP URL = &apos;, url);
        this.container.appendChild(this.iframe);

        this.ampViewerHost_ = new AmpViewerHost(
          window,
          this.iframe,
          this.frameOrigin_,
          this.processRequest_.bind(this),
          /* logs id */ this.id
        );

        setTimeout(
          function () {
            this.iframe.setAttribute(&apos;src&apos;, url);
          }.bind(this)
        );
      };

      Viewer.prototype.documentReady_ = function () {
        log(&apos;AMP document ready&apos;);
        this.iframe.dataset[&apos;loaded&apos;] = &apos;&apos;;
        return Promise.resolve();
      };

      Viewer.prototype.onScroll_ = function () {
        log(&apos;Viewer.prototype.onScroll_&apos;);
        this.ampViewerHost_.sendRequest(
          &apos;viewport&apos;,
          {
            scrollTop: this.container./*OK*/ scrollTop,
          },
          false
        );
      };

      Viewer.prototype.onResize_ = function () {
        log(
          &apos;Resized to &apos;,
          this.container./*OK*/ offsetWidth,
          this.container./*OK*/ offsetHeight,
          this.container./*OK*/ scrollTop
        );
        this.ampViewerHost_.sendRequest(
          &apos;viewport&apos;,
          {
            scrollTop: this.container./*OK*/ scrollTop,
            width: this.container./*OK*/ offsetWidth,
            height: this.container./*OK*/ offsetHeight,
          },
          false
        );
      };

      Viewer.prototype.pushHistory_ = function (stackIndex) {
        log(&apos;push history to &apos;, stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_ + 1) {
          throw new Error(&apos;Only one step push allowed&apos;);
        }
        this.stackIndex_ = stackIndex;
        window.history.pushState({}, &apos;&apos;);
        return Promise.resolve();
      };

      Viewer.prototype.popHistory_ = function (stackIndex) {
        log(&apos;pop history at &apos;, stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_) {
          throw new Error(&apos;Only one step pop allowed&apos;);
        }
        this.stackIndex_ = stackIndex;
        window.history.go(-1);
        return Promise.resolve();
      };

      Viewer.prototype.onPopState_ = function () {
        // Even more trivial. Always assumes that only one step was popped in
        // history.
        this.stackIndex_--;
        this.ampViewerHost_.sendRequest(
          &apos;historyPopped&apos;,
          {
            newStackIndex: this.stackIndex_,
          },
          false
        );
        log(&apos;history popped to &apos;, this.stackIndex_);
      };

      Viewer.prototype.scrollAmpDoc = function (scrollTop) {
        log(&apos;viewer scroll amp doc: &apos;, scrollTop);
        this.ampViewerHost_.sendRequest(&apos;scroll&apos;, {scrollTop: scrollTop}, true);
      };

      Viewer.prototype.processRequest_ = function (name, data, awaitResponse) {
        log(&apos;Viewer.prototype.processRequest_&apos;, name);
        this.receivedMessages.push({name, data});
        switch (name) {
          case &apos;documentLoaded&apos;:
            return this.documentReady_();
          case &apos;pushHistory&apos;:
            return this.pushHistory_(data.stackIndex);
          case &apos;popHistory&apos;:
            return this.popHistory_(data.stackIndex);
          case &apos;documentHeight&apos;:
            if (this.simulateEmail) {
              const {height} = data;
              this.iframe.style.height = height + &apos;px&apos;;
              this.iframe.removeAttribute(&apos;width&apos;);
            }
            return Promise.resolve();
          case &apos;broadcast&apos;:
          case &apos;bindReady&apos;:
          case &apos;focusin&apos;:
          case &apos;requestFullOverlay&apos;:
          case &apos;cancelFullOverlay&apos;:
          case &apos;unloaded&apos;:
          case &apos;tick&apos;:
          case &apos;a2aNavigate&apos;:
          case &apos;sendCsi&apos;:
          case &apos;touchstart&apos;:
          case &apos;touchmove&apos;:
          case &apos;touchend&apos;:
          case &apos;setFlushParams&apos;:
          case &apos;prerenderComplete&apos;:
          case &apos;scroll&apos;:
          case &apos;replaceHistory&apos;:
          case &apos;visibilitychange&apos;:
            return Promise.resolve();
          case &apos;xhr&apos;:
          case &apos;viewerRenderTemplate&apos;:
          default:
            return Promise.reject(&apos;Request not supported: &apos;, name);
        }
      };

      function log() {
        var var_args = Array.prototype.slice.call(arguments, 0);
        var_args.unshift(&apos;[VIEWER]&apos;);
        console /*OK*/.log
          .apply(console, var_args);
      }

      function parseUrlDeprecated(urlString) {
        var a = document.createElement(&apos;a&apos;);
        a.href = urlString;
        return {
          href: a.href,
          protocol: a.protocol,
          host: a.host,
          hostname: a.hostname,
          port: a.port == &apos;0&apos; ? &apos;&apos; : a.port,
          pathname: a.pathname,
          search: a.search,
          hash: a.hash,
          origin: a.protocol + &apos;//&apos; + a.host,
        };
      }

      function paramsStr(params) {
        var s = &apos;&apos;;
        for (var k in params) {
          var v = params[k];
          if (v === null || v === undefined) {
            continue;
          }
          if (s.length &gt; 0) {
            s += &apos;&amp;&apos;;
          }
          s += encodeURIComponent(k) + &apos;=&apos; + encodeURIComponent(v);
        }
        return s;
      }

      /**
       * Parses the query string of an URL. This method returns a simple key/value
       * map. If there are duplicate keys the latest value is returned.
       * @param {string} queryString
       * @return {!Object&lt;string&gt;}
       */
      function parseQueryString(queryString) {
        const params = Object.create(null);
        if (!queryString) {
          return params;
        }
        if (startsWith(queryString, &apos;?&apos;) || startsWith(queryString, &apos;#&apos;)) {
          queryString = queryString.substr(1);
        }
        const pairs = queryString.split(&apos;&amp;&apos;);
        for (let i = 0; i &lt; pairs.length; i++) {
          const pair = pairs[i];
          const eqIndex = pair.indexOf(&apos;=&apos;);
          let name;
          let value;
          if (eqIndex != -1) {
            name = decodeURIComponent(pair.substring(0, eqIndex)).trim();
            value = decodeURIComponent(pair.substring(eqIndex + 1)).trim();
          } else {
            name = decodeURIComponent(pair).trim();
            value = &apos;&apos;;
          }
          if (name) {
            params[name] = value;
          }
        }
        return params;
      }

      function startsWith(string, prefix) {
        return string.lastIndexOf(prefix, 0) == 0;
      }

      /**
       * @param {string} url
       * @param {string} param
       * @param {*} value
       * @return {string}
       */
      function addQueryParam(url, param, value) {
        const paramValue =
          encodeURIComponent(param) + &apos;=&apos; + encodeURIComponent(value);
        if (!url.includes(&apos;?&apos;)) {
          url += &apos;?&apos; + paramValue;
        } else {
          url += &apos;&amp;&apos; + paramValue;
        }
        return url;
      }

      function loadAmpDoc() {
        const hash = window.location.hash;
        const hashParams = parseQueryString(hash);
        const href = hashParams[&apos;href&apos;];
        const caps = hashParams[&apos;caps&apos;];
        const isEmail = &apos;true&apos; === hashParams[&apos;isEmail&apos;];

        viewer = new Viewer(
          addQueryParam(href, &apos;amp_js_v&apos;, &apos;0.1&apos;),
          caps,
          isEmail
        );
      }
      window.onload = loadAmpDoc;
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;

&lt;iframe id=&quot;viewer&quot; sandbox=&quot;allow-popups allow-scripts allow-forms allow-pointer-lock allow-popups-to-escape-sandbox allow-same-origin&quot; scrolling=&quot;yes&quot; class=&quot;fill&quot;&gt;&lt;/iframe&gt;&lt;/body&gt;" type="Error"><![CDATA[Error: Waiting for element to be located #viewer[data-loaded]
Wait timed out after 5182ms
<head>
    <meta charset="utf-8">
    <title>Viewer</title>
    <meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui">
    <script src="/dist/v0/examples/amp-viewer-host.js"></script>
    <style>
      body, #viewer {
        margin: 0;
        border: 0;
        padding: 0;
      }
      body,.fill {
        position: absolute;
        height: 100%;
        width: 100%;
      }
    </style>
    <script>
      var viewer = null;
      function Viewer(url, opt_caps, simulateEmail = false) {
        this.id = 'viewer';
        this.url = url;
        this.stackIndex_ = 0;
        this.prerenderSize_ = 1;
        this.csi_ = 1;
        this.caps_ =
          opt_caps || 'a2a,focus-rect,foo,keyboard,swipe,iframeScroll';
        this.receivedMessages = [];
        this.simulateEmail = simulateEmail;

        this.container = document.body;
        this.iframe = document.createElement('iframe');
        this.iframe.setAttribute('id', this.id);
        this.iframe.setAttribute(
          'sandbox',
          'allow-popups allow-scripts allow-forms allow-pointer-lock' +
            ' allow-popups-to-escape-sandbox allow-same-origin'
        );
        this.iframe.setAttribute('scrolling', 'yes');

        if (simulateEmail) {
          this.iframe.setAttribute('height', '0');
          this.iframe.setAttribute('width', '0');
        } else {
          this.iframe.classList.add('fill');
        }

        window.addEventListener('resize', this.onResize_.bind(this));
        window.addEventListener('popstate', this.onPopState_.bind(this));

        this.start();
      }

      Viewer.prototype.start = function () {
        var params = {
          history: 1,
          width: this.container./*OK*/ offsetWidth,
          height: this.container./*OK*/ offsetHeight,
          prerenderSize: this.prerenderSize_,
          origin: parseUrlDeprecated(window.location.href).origin,
          csi: this.csi_,
          cap: this.caps_,
        };
        log('Params:' + JSON.stringify(params));

        var inputUrl = this.url + '#' + paramsStr(params);
        if (window.location.hash && window.location.hash.length > 1) {
          inputUrl += '&' + window.location.hash.substring(1);
        }
        var parsedUrl = parseUrlDeprecated(inputUrl);
        var url = parsedUrl.href;
        this.frameOrigin_ = parsedUrl.origin;
        log('AMP URL = ', url);
        this.container.appendChild(this.iframe);

        this.ampViewerHost_ = new AmpViewerHost(
          window,
          this.iframe,
          this.frameOrigin_,
          this.processRequest_.bind(this),
          /* logs id */ this.id
        );

        setTimeout(
          function () {
            this.iframe.setAttribute('src', url);
          }.bind(this)
        );
      };

      Viewer.prototype.documentReady_ = function () {
        log('AMP document ready');
        this.iframe.dataset['loaded'] = '';
        return Promise.resolve();
      };

      Viewer.prototype.onScroll_ = function () {
        log('Viewer.prototype.onScroll_');
        this.ampViewerHost_.sendRequest(
          'viewport',
          {
            scrollTop: this.container./*OK*/ scrollTop,
          },
          false
        );
      };

      Viewer.prototype.onResize_ = function () {
        log(
          'Resized to ',
          this.container./*OK*/ offsetWidth,
          this.container./*OK*/ offsetHeight,
          this.container./*OK*/ scrollTop
        );
        this.ampViewerHost_.sendRequest(
          'viewport',
          {
            scrollTop: this.container./*OK*/ scrollTop,
            width: this.container./*OK*/ offsetWidth,
            height: this.container./*OK*/ offsetHeight,
          },
          false
        );
      };

      Viewer.prototype.pushHistory_ = function (stackIndex) {
        log('push history to ', stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_ + 1) {
          throw new Error('Only one step push allowed');
        }
        this.stackIndex_ = stackIndex;
        window.history.pushState({}, '');
        return Promise.resolve();
      };

      Viewer.prototype.popHistory_ = function (stackIndex) {
        log('pop history at ', stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_) {
          throw new Error('Only one step pop allowed');
        }
        this.stackIndex_ = stackIndex;
        window.history.go(-1);
        return Promise.resolve();
      };

      Viewer.prototype.onPopState_ = function () {
        // Even more trivial. Always assumes that only one step was popped in
        // history.
        this.stackIndex_--;
        this.ampViewerHost_.sendRequest(
          'historyPopped',
          {
            newStackIndex: this.stackIndex_,
          },
          false
        );
        log('history popped to ', this.stackIndex_);
      };

      Viewer.prototype.scrollAmpDoc = function (scrollTop) {
        log('viewer scroll amp doc: ', scrollTop);
        this.ampViewerHost_.sendRequest('scroll', {scrollTop: scrollTop}, true);
      };

      Viewer.prototype.processRequest_ = function (name, data, awaitResponse) {
        log('Viewer.prototype.processRequest_', name);
        this.receivedMessages.push({name, data});
        switch (name) {
          case 'documentLoaded':
            return this.documentReady_();
          case 'pushHistory':
            return this.pushHistory_(data.stackIndex);
          case 'popHistory':
            return this.popHistory_(data.stackIndex);
          case 'documentHeight':
            if (this.simulateEmail) {
              const {height} = data;
              this.iframe.style.height = height + 'px';
              this.iframe.removeAttribute('width');
            }
            return Promise.resolve();
          case 'broadcast':
          case 'bindReady':
          case 'focusin':
          case 'requestFullOverlay':
          case 'cancelFullOverlay':
          case 'unloaded':
          case 'tick':
          case 'a2aNavigate':
          case 'sendCsi':
          case 'touchstart':
          case 'touchmove':
          case 'touchend':
          case 'setFlushParams':
          case 'prerenderComplete':
          case 'scroll':
          case 'replaceHistory':
          case 'visibilitychange':
            return Promise.resolve();
          case 'xhr':
          case 'viewerRenderTemplate':
          default:
            return Promise.reject('Request not supported: ', name);
        }
      };

      function log() {
        var var_args = Array.prototype.slice.call(arguments, 0);
        var_args.unshift('[VIEWER]');
        console /*OK*/.log
          .apply(console, var_args);
      }

      function parseUrlDeprecated(urlString) {
        var a = document.createElement('a');
        a.href = urlString;
        return {
          href: a.href,
          protocol: a.protocol,
          host: a.host,
          hostname: a.hostname,
          port: a.port == '0' ? '' : a.port,
          pathname: a.pathname,
          search: a.search,
          hash: a.hash,
          origin: a.protocol + '//' + a.host,
        };
      }

      function paramsStr(params) {
        var s = '';
        for (var k in params) {
          var v = params[k];
          if (v === null || v === undefined) {
            continue;
          }
          if (s.length > 0) {
            s += '&';
          }
          s += encodeURIComponent(k) + '=' + encodeURIComponent(v);
        }
        return s;
      }

      /**
       * Parses the query string of an URL. This method returns a simple key/value
       * map. If there are duplicate keys the latest value is returned.
       * @param {string} queryString
       * @return {!Object<string>}
       */
      function parseQueryString(queryString) {
        const params = Object.create(null);
        if (!queryString) {
          return params;
        }
        if (startsWith(queryString, '?') || startsWith(queryString, '#')) {
          queryString = queryString.substr(1);
        }
        const pairs = queryString.split('&');
        for (let i = 0; i < pairs.length; i++) {
          const pair = pairs[i];
          const eqIndex = pair.indexOf('=');
          let name;
          let value;
          if (eqIndex != -1) {
            name = decodeURIComponent(pair.substring(0, eqIndex)).trim();
            value = decodeURIComponent(pair.substring(eqIndex + 1)).trim();
          } else {
            name = decodeURIComponent(pair).trim();
            value = '';
          }
          if (name) {
            params[name] = value;
          }
        }
        return params;
      }

      function startsWith(string, prefix) {
        return string.lastIndexOf(prefix, 0) == 0;
      }

      /**
       * @param {string} url
       * @param {string} param
       * @param {*} value
       * @return {string}
       */
      function addQueryParam(url, param, value) {
        const paramValue =
          encodeURIComponent(param) + '=' + encodeURIComponent(value);
        if (!url.includes('?')) {
          url += '?' + paramValue;
        } else {
          url += '&' + paramValue;
        }
        return url;
      }

      function loadAmpDoc() {
        const hash = window.location.hash;
        const hashParams = parseQueryString(hash);
        const href = hashParams['href'];
        const caps = hashParams['caps'];
        const isEmail = 'true' === hashParams['isEmail'];

        viewer = new Viewer(
          addQueryParam(href, 'amp_js_v', '0.1'),
          caps,
          isEmail
        );
      }
      window.onload = loadAmpDoc;
    </script>
  </head>
  <body>

<iframe id="viewer" sandbox="allow-popups allow-scripts allow-forms allow-pointer-lock allow-popups-to-escape-sandbox allow-same-origin" scrolling="yes" class="fill"></iframe></body>
    at AmpDriver._callee7$ (build-system/tasks/e2e/amp-driver.js:321:23)
    at tryCatch (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:61:40)
    at GeneratorFunctionPrototype.invoke [as _invoke] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:329:22)
    at GeneratorFunctionPrototype.prototype.<computed> [as next] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:94:21)
    at asyncGeneratorStep (build-system/tasks/e2e/amp-driver.js:13:103)
    at _next (build-system/tasks/e2e/amp-driver.js:15:194)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Shadow environment " timestamp="2021-04-28T22:10:50" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-email.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:10:50" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-email.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="amp4email" timestamp="2021-04-28T22:10:50" tests="2" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-email.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="amp-bind" timestamp="2021-04-28T22:10:50" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-form.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:10:50" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-form.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:10:50" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-form.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:10:50" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-form.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with &lt;amp-form&gt;" timestamp="2021-04-28T22:10:50" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-form.js" time="0.0790" failures="1">
    <testcase name="amp-bind chrome  Standalone environment    with &lt;amp-form&gt; should NOT allow invalid bindings or values" time="0.0790" classname="should NOT allow invalid bindings or values">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T22:10:51" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-form.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:10:51" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-form.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with &lt;amp-form&gt;" timestamp="2021-04-28T22:10:51" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-form.js" time="22.7030" failures="1">
    <testcase name="amp-bind chrome  Viewer environment  &quot;before each&quot; hook for &quot;should NOT allow invalid bindings or values&quot;" time="22.7030" classname="&quot;before each&quot; hook for &quot;should NOT allow invalid bindings or values&quot;">
      <failure message="Waiting for element to be located #viewer[data-loaded]
Wait timed out after 5174ms
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;Viewer&lt;/title&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui&quot;&gt;
    &lt;script src=&quot;/dist/v0/examples/amp-viewer-host.js&quot;&gt;&lt;/script&gt;
    &lt;style&gt;
      body, #viewer {
        margin: 0;
        border: 0;
        padding: 0;
      }
      body,.fill {
        position: absolute;
        height: 100%;
        width: 100%;
      }
    &lt;/style&gt;
    &lt;script&gt;
      var viewer = null;
      function Viewer(url, opt_caps, simulateEmail = false) {
        this.id = &apos;viewer&apos;;
        this.url = url;
        this.stackIndex_ = 0;
        this.prerenderSize_ = 1;
        this.csi_ = 1;
        this.caps_ =
          opt_caps || &apos;a2a,focus-rect,foo,keyboard,swipe,iframeScroll&apos;;
        this.receivedMessages = [];
        this.simulateEmail = simulateEmail;

        this.container = document.body;
        this.iframe = document.createElement(&apos;iframe&apos;);
        this.iframe.setAttribute(&apos;id&apos;, this.id);
        this.iframe.setAttribute(
          &apos;sandbox&apos;,
          &apos;allow-popups allow-scripts allow-forms allow-pointer-lock&apos; +
            &apos; allow-popups-to-escape-sandbox allow-same-origin&apos;
        );
        this.iframe.setAttribute(&apos;scrolling&apos;, &apos;yes&apos;);

        if (simulateEmail) {
          this.iframe.setAttribute(&apos;height&apos;, &apos;0&apos;);
          this.iframe.setAttribute(&apos;width&apos;, &apos;0&apos;);
        } else {
          this.iframe.classList.add(&apos;fill&apos;);
        }

        window.addEventListener(&apos;resize&apos;, this.onResize_.bind(this));
        window.addEventListener(&apos;popstate&apos;, this.onPopState_.bind(this));

        this.start();
      }

      Viewer.prototype.start = function () {
        var params = {
          history: 1,
          width: this.container./*OK*/ offsetWidth,
          height: this.container./*OK*/ offsetHeight,
          prerenderSize: this.prerenderSize_,
          origin: parseUrlDeprecated(window.location.href).origin,
          csi: this.csi_,
          cap: this.caps_,
        };
        log(&apos;Params:&apos; + JSON.stringify(params));

        var inputUrl = this.url + &apos;#&apos; + paramsStr(params);
        if (window.location.hash &amp;&amp; window.location.hash.length &gt; 1) {
          inputUrl += &apos;&amp;&apos; + window.location.hash.substring(1);
        }
        var parsedUrl = parseUrlDeprecated(inputUrl);
        var url = parsedUrl.href;
        this.frameOrigin_ = parsedUrl.origin;
        log(&apos;AMP URL = &apos;, url);
        this.container.appendChild(this.iframe);

        this.ampViewerHost_ = new AmpViewerHost(
          window,
          this.iframe,
          this.frameOrigin_,
          this.processRequest_.bind(this),
          /* logs id */ this.id
        );

        setTimeout(
          function () {
            this.iframe.setAttribute(&apos;src&apos;, url);
          }.bind(this)
        );
      };

      Viewer.prototype.documentReady_ = function () {
        log(&apos;AMP document ready&apos;);
        this.iframe.dataset[&apos;loaded&apos;] = &apos;&apos;;
        return Promise.resolve();
      };

      Viewer.prototype.onScroll_ = function () {
        log(&apos;Viewer.prototype.onScroll_&apos;);
        this.ampViewerHost_.sendRequest(
          &apos;viewport&apos;,
          {
            scrollTop: this.container./*OK*/ scrollTop,
          },
          false
        );
      };

      Viewer.prototype.onResize_ = function () {
        log(
          &apos;Resized to &apos;,
          this.container./*OK*/ offsetWidth,
          this.container./*OK*/ offsetHeight,
          this.container./*OK*/ scrollTop
        );
        this.ampViewerHost_.sendRequest(
          &apos;viewport&apos;,
          {
            scrollTop: this.container./*OK*/ scrollTop,
            width: this.container./*OK*/ offsetWidth,
            height: this.container./*OK*/ offsetHeight,
          },
          false
        );
      };

      Viewer.prototype.pushHistory_ = function (stackIndex) {
        log(&apos;push history to &apos;, stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_ + 1) {
          throw new Error(&apos;Only one step push allowed&apos;);
        }
        this.stackIndex_ = stackIndex;
        window.history.pushState({}, &apos;&apos;);
        return Promise.resolve();
      };

      Viewer.prototype.popHistory_ = function (stackIndex) {
        log(&apos;pop history at &apos;, stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_) {
          throw new Error(&apos;Only one step pop allowed&apos;);
        }
        this.stackIndex_ = stackIndex;
        window.history.go(-1);
        return Promise.resolve();
      };

      Viewer.prototype.onPopState_ = function () {
        // Even more trivial. Always assumes that only one step was popped in
        // history.
        this.stackIndex_--;
        this.ampViewerHost_.sendRequest(
          &apos;historyPopped&apos;,
          {
            newStackIndex: this.stackIndex_,
          },
          false
        );
        log(&apos;history popped to &apos;, this.stackIndex_);
      };

      Viewer.prototype.scrollAmpDoc = function (scrollTop) {
        log(&apos;viewer scroll amp doc: &apos;, scrollTop);
        this.ampViewerHost_.sendRequest(&apos;scroll&apos;, {scrollTop: scrollTop}, true);
      };

      Viewer.prototype.processRequest_ = function (name, data, awaitResponse) {
        log(&apos;Viewer.prototype.processRequest_&apos;, name);
        this.receivedMessages.push({name, data});
        switch (name) {
          case &apos;documentLoaded&apos;:
            return this.documentReady_();
          case &apos;pushHistory&apos;:
            return this.pushHistory_(data.stackIndex);
          case &apos;popHistory&apos;:
            return this.popHistory_(data.stackIndex);
          case &apos;documentHeight&apos;:
            if (this.simulateEmail) {
              const {height} = data;
              this.iframe.style.height = height + &apos;px&apos;;
              this.iframe.removeAttribute(&apos;width&apos;);
            }
            return Promise.resolve();
          case &apos;broadcast&apos;:
          case &apos;bindReady&apos;:
          case &apos;focusin&apos;:
          case &apos;requestFullOverlay&apos;:
          case &apos;cancelFullOverlay&apos;:
          case &apos;unloaded&apos;:
          case &apos;tick&apos;:
          case &apos;a2aNavigate&apos;:
          case &apos;sendCsi&apos;:
          case &apos;touchstart&apos;:
          case &apos;touchmove&apos;:
          case &apos;touchend&apos;:
          case &apos;setFlushParams&apos;:
          case &apos;prerenderComplete&apos;:
          case &apos;scroll&apos;:
          case &apos;replaceHistory&apos;:
          case &apos;visibilitychange&apos;:
            return Promise.resolve();
          case &apos;xhr&apos;:
          case &apos;viewerRenderTemplate&apos;:
          default:
            return Promise.reject(&apos;Request not supported: &apos;, name);
        }
      };

      function log() {
        var var_args = Array.prototype.slice.call(arguments, 0);
        var_args.unshift(&apos;[VIEWER]&apos;);
        console /*OK*/.log
          .apply(console, var_args);
      }

      function parseUrlDeprecated(urlString) {
        var a = document.createElement(&apos;a&apos;);
        a.href = urlString;
        return {
          href: a.href,
          protocol: a.protocol,
          host: a.host,
          hostname: a.hostname,
          port: a.port == &apos;0&apos; ? &apos;&apos; : a.port,
          pathname: a.pathname,
          search: a.search,
          hash: a.hash,
          origin: a.protocol + &apos;//&apos; + a.host,
        };
      }

      function paramsStr(params) {
        var s = &apos;&apos;;
        for (var k in params) {
          var v = params[k];
          if (v === null || v === undefined) {
            continue;
          }
          if (s.length &gt; 0) {
            s += &apos;&amp;&apos;;
          }
          s += encodeURIComponent(k) + &apos;=&apos; + encodeURIComponent(v);
        }
        return s;
      }

      /**
       * Parses the query string of an URL. This method returns a simple key/value
       * map. If there are duplicate keys the latest value is returned.
       * @param {string} queryString
       * @return {!Object&lt;string&gt;}
       */
      function parseQueryString(queryString) {
        const params = Object.create(null);
        if (!queryString) {
          return params;
        }
        if (startsWith(queryString, &apos;?&apos;) || startsWith(queryString, &apos;#&apos;)) {
          queryString = queryString.substr(1);
        }
        const pairs = queryString.split(&apos;&amp;&apos;);
        for (let i = 0; i &lt; pairs.length; i++) {
          const pair = pairs[i];
          const eqIndex = pair.indexOf(&apos;=&apos;);
          let name;
          let value;
          if (eqIndex != -1) {
            name = decodeURIComponent(pair.substring(0, eqIndex)).trim();
            value = decodeURIComponent(pair.substring(eqIndex + 1)).trim();
          } else {
            name = decodeURIComponent(pair).trim();
            value = &apos;&apos;;
          }
          if (name) {
            params[name] = value;
          }
        }
        return params;
      }

      function startsWith(string, prefix) {
        return string.lastIndexOf(prefix, 0) == 0;
      }

      /**
       * @param {string} url
       * @param {string} param
       * @param {*} value
       * @return {string}
       */
      function addQueryParam(url, param, value) {
        const paramValue =
          encodeURIComponent(param) + &apos;=&apos; + encodeURIComponent(value);
        if (!url.includes(&apos;?&apos;)) {
          url += &apos;?&apos; + paramValue;
        } else {
          url += &apos;&amp;&apos; + paramValue;
        }
        return url;
      }

      function loadAmpDoc() {
        const hash = window.location.hash;
        const hashParams = parseQueryString(hash);
        const href = hashParams[&apos;href&apos;];
        const caps = hashParams[&apos;caps&apos;];
        const isEmail = &apos;true&apos; === hashParams[&apos;isEmail&apos;];

        viewer = new Viewer(
          addQueryParam(href, &apos;amp_js_v&apos;, &apos;0.1&apos;),
          caps,
          isEmail
        );
      }
      window.onload = loadAmpDoc;
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;

&lt;iframe id=&quot;viewer&quot; sandbox=&quot;allow-popups allow-scripts allow-forms allow-pointer-lock allow-popups-to-escape-sandbox allow-same-origin&quot; scrolling=&quot;yes&quot; class=&quot;fill&quot;&gt;&lt;/iframe&gt;&lt;/body&gt;" type="Error"><![CDATA[Error: Waiting for element to be located #viewer[data-loaded]
Wait timed out after 5174ms
<head>
    <meta charset="utf-8">
    <title>Viewer</title>
    <meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui">
    <script src="/dist/v0/examples/amp-viewer-host.js"></script>
    <style>
      body, #viewer {
        margin: 0;
        border: 0;
        padding: 0;
      }
      body,.fill {
        position: absolute;
        height: 100%;
        width: 100%;
      }
    </style>
    <script>
      var viewer = null;
      function Viewer(url, opt_caps, simulateEmail = false) {
        this.id = 'viewer';
        this.url = url;
        this.stackIndex_ = 0;
        this.prerenderSize_ = 1;
        this.csi_ = 1;
        this.caps_ =
          opt_caps || 'a2a,focus-rect,foo,keyboard,swipe,iframeScroll';
        this.receivedMessages = [];
        this.simulateEmail = simulateEmail;

        this.container = document.body;
        this.iframe = document.createElement('iframe');
        this.iframe.setAttribute('id', this.id);
        this.iframe.setAttribute(
          'sandbox',
          'allow-popups allow-scripts allow-forms allow-pointer-lock' +
            ' allow-popups-to-escape-sandbox allow-same-origin'
        );
        this.iframe.setAttribute('scrolling', 'yes');

        if (simulateEmail) {
          this.iframe.setAttribute('height', '0');
          this.iframe.setAttribute('width', '0');
        } else {
          this.iframe.classList.add('fill');
        }

        window.addEventListener('resize', this.onResize_.bind(this));
        window.addEventListener('popstate', this.onPopState_.bind(this));

        this.start();
      }

      Viewer.prototype.start = function () {
        var params = {
          history: 1,
          width: this.container./*OK*/ offsetWidth,
          height: this.container./*OK*/ offsetHeight,
          prerenderSize: this.prerenderSize_,
          origin: parseUrlDeprecated(window.location.href).origin,
          csi: this.csi_,
          cap: this.caps_,
        };
        log('Params:' + JSON.stringify(params));

        var inputUrl = this.url + '#' + paramsStr(params);
        if (window.location.hash && window.location.hash.length > 1) {
          inputUrl += '&' + window.location.hash.substring(1);
        }
        var parsedUrl = parseUrlDeprecated(inputUrl);
        var url = parsedUrl.href;
        this.frameOrigin_ = parsedUrl.origin;
        log('AMP URL = ', url);
        this.container.appendChild(this.iframe);

        this.ampViewerHost_ = new AmpViewerHost(
          window,
          this.iframe,
          this.frameOrigin_,
          this.processRequest_.bind(this),
          /* logs id */ this.id
        );

        setTimeout(
          function () {
            this.iframe.setAttribute('src', url);
          }.bind(this)
        );
      };

      Viewer.prototype.documentReady_ = function () {
        log('AMP document ready');
        this.iframe.dataset['loaded'] = '';
        return Promise.resolve();
      };

      Viewer.prototype.onScroll_ = function () {
        log('Viewer.prototype.onScroll_');
        this.ampViewerHost_.sendRequest(
          'viewport',
          {
            scrollTop: this.container./*OK*/ scrollTop,
          },
          false
        );
      };

      Viewer.prototype.onResize_ = function () {
        log(
          'Resized to ',
          this.container./*OK*/ offsetWidth,
          this.container./*OK*/ offsetHeight,
          this.container./*OK*/ scrollTop
        );
        this.ampViewerHost_.sendRequest(
          'viewport',
          {
            scrollTop: this.container./*OK*/ scrollTop,
            width: this.container./*OK*/ offsetWidth,
            height: this.container./*OK*/ offsetHeight,
          },
          false
        );
      };

      Viewer.prototype.pushHistory_ = function (stackIndex) {
        log('push history to ', stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_ + 1) {
          throw new Error('Only one step push allowed');
        }
        this.stackIndex_ = stackIndex;
        window.history.pushState({}, '');
        return Promise.resolve();
      };

      Viewer.prototype.popHistory_ = function (stackIndex) {
        log('pop history at ', stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_) {
          throw new Error('Only one step pop allowed');
        }
        this.stackIndex_ = stackIndex;
        window.history.go(-1);
        return Promise.resolve();
      };

      Viewer.prototype.onPopState_ = function () {
        // Even more trivial. Always assumes that only one step was popped in
        // history.
        this.stackIndex_--;
        this.ampViewerHost_.sendRequest(
          'historyPopped',
          {
            newStackIndex: this.stackIndex_,
          },
          false
        );
        log('history popped to ', this.stackIndex_);
      };

      Viewer.prototype.scrollAmpDoc = function (scrollTop) {
        log('viewer scroll amp doc: ', scrollTop);
        this.ampViewerHost_.sendRequest('scroll', {scrollTop: scrollTop}, true);
      };

      Viewer.prototype.processRequest_ = function (name, data, awaitResponse) {
        log('Viewer.prototype.processRequest_', name);
        this.receivedMessages.push({name, data});
        switch (name) {
          case 'documentLoaded':
            return this.documentReady_();
          case 'pushHistory':
            return this.pushHistory_(data.stackIndex);
          case 'popHistory':
            return this.popHistory_(data.stackIndex);
          case 'documentHeight':
            if (this.simulateEmail) {
              const {height} = data;
              this.iframe.style.height = height + 'px';
              this.iframe.removeAttribute('width');
            }
            return Promise.resolve();
          case 'broadcast':
          case 'bindReady':
          case 'focusin':
          case 'requestFullOverlay':
          case 'cancelFullOverlay':
          case 'unloaded':
          case 'tick':
          case 'a2aNavigate':
          case 'sendCsi':
          case 'touchstart':
          case 'touchmove':
          case 'touchend':
          case 'setFlushParams':
          case 'prerenderComplete':
          case 'scroll':
          case 'replaceHistory':
          case 'visibilitychange':
            return Promise.resolve();
          case 'xhr':
          case 'viewerRenderTemplate':
          default:
            return Promise.reject('Request not supported: ', name);
        }
      };

      function log() {
        var var_args = Array.prototype.slice.call(arguments, 0);
        var_args.unshift('[VIEWER]');
        console /*OK*/.log
          .apply(console, var_args);
      }

      function parseUrlDeprecated(urlString) {
        var a = document.createElement('a');
        a.href = urlString;
        return {
          href: a.href,
          protocol: a.protocol,
          host: a.host,
          hostname: a.hostname,
          port: a.port == '0' ? '' : a.port,
          pathname: a.pathname,
          search: a.search,
          hash: a.hash,
          origin: a.protocol + '//' + a.host,
        };
      }

      function paramsStr(params) {
        var s = '';
        for (var k in params) {
          var v = params[k];
          if (v === null || v === undefined) {
            continue;
          }
          if (s.length > 0) {
            s += '&';
          }
          s += encodeURIComponent(k) + '=' + encodeURIComponent(v);
        }
        return s;
      }

      /**
       * Parses the query string of an URL. This method returns a simple key/value
       * map. If there are duplicate keys the latest value is returned.
       * @param {string} queryString
       * @return {!Object<string>}
       */
      function parseQueryString(queryString) {
        const params = Object.create(null);
        if (!queryString) {
          return params;
        }
        if (startsWith(queryString, '?') || startsWith(queryString, '#')) {
          queryString = queryString.substr(1);
        }
        const pairs = queryString.split('&');
        for (let i = 0; i < pairs.length; i++) {
          const pair = pairs[i];
          const eqIndex = pair.indexOf('=');
          let name;
          let value;
          if (eqIndex != -1) {
            name = decodeURIComponent(pair.substring(0, eqIndex)).trim();
            value = decodeURIComponent(pair.substring(eqIndex + 1)).trim();
          } else {
            name = decodeURIComponent(pair).trim();
            value = '';
          }
          if (name) {
            params[name] = value;
          }
        }
        return params;
      }

      function startsWith(string, prefix) {
        return string.lastIndexOf(prefix, 0) == 0;
      }

      /**
       * @param {string} url
       * @param {string} param
       * @param {*} value
       * @return {string}
       */
      function addQueryParam(url, param, value) {
        const paramValue =
          encodeURIComponent(param) + '=' + encodeURIComponent(value);
        if (!url.includes('?')) {
          url += '?' + paramValue;
        } else {
          url += '&' + paramValue;
        }
        return url;
      }

      function loadAmpDoc() {
        const hash = window.location.hash;
        const hashParams = parseQueryString(hash);
        const href = hashParams['href'];
        const caps = hashParams['caps'];
        const isEmail = 'true' === hashParams['isEmail'];

        viewer = new Viewer(
          addQueryParam(href, 'amp_js_v', '0.1'),
          caps,
          isEmail
        );
      }
      window.onload = loadAmpDoc;
    </script>
  </head>
  <body>

<iframe id="viewer" sandbox="allow-popups allow-scripts allow-forms allow-pointer-lock allow-popups-to-escape-sandbox allow-same-origin" scrolling="yes" class="fill"></iframe></body>
    at AmpDriver._callee7$ (build-system/tasks/e2e/amp-driver.js:321:23)
    at tryCatch (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:61:40)
    at GeneratorFunctionPrototype.invoke [as _invoke] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:329:22)
    at GeneratorFunctionPrototype.prototype.<computed> [as next] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:94:21)
    at asyncGeneratorStep (build-system/tasks/e2e/amp-driver.js:13:103)
    at _next (build-system/tasks/e2e/amp-driver.js:15:194)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Shadow environment " timestamp="2021-04-28T22:11:14" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-form.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:11:14" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-form.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with &lt;amp-form&gt;" timestamp="2021-04-28T22:11:14" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-form.js" time="80.0100" failures="2">
    <testcase name="amp-bind chrome  Shadow environment    with &lt;amp-form&gt; should NOT allow invalid bindings or values" time="40.0050" classname="should NOT allow invalid bindings or values">
      <failure message="Timeout of 40000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-form.js)" type="Error"><![CDATA[Error: Timeout of 40000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-form.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
    <testcase name="amp-bind chrome  Shadow environment    with &lt;amp-form&gt; should NOT allow invalid bindings or values" time="40.0050" classname="should NOT allow invalid bindings or values">
      <failure message="expected &apos;&apos; to equal &apos;John Miller&apos;" type="AssertionError"><![CDATA[AssertionError: expected '' to equal 'John Miller'
    at valueSatisfiesExpectation (build-system/tasks/e2e/expect.js:376:18)
    at conditionValue (build-system/tasks/e2e/selenium-webdriver-controller.js:123:30)
    at _callee$ (build-system/tasks/e2e/selenium-webdriver-controller.js:87:46)
    at tryCatch (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:61:40)
    at GeneratorFunctionPrototype.invoke [as _invoke] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:329:22)
    at GeneratorFunctionPrototype.prototype.<computed> [as next] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:94:21)
    at asyncGeneratorStep (build-system/tasks/e2e/selenium-webdriver-controller.js:11:103)
    at _next (build-system/tasks/e2e/selenium-webdriver-controller.js:13:194)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-bind" timestamp="2021-04-28T22:11:54" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-iframe.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:11:54" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-iframe.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:11:54" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-iframe.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:11:54" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-iframe.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with &lt;amp-iframe&gt;" timestamp="2021-04-28T22:11:54" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-iframe.js" time="5.2070" failures="1">
    <testcase name="amp-bind chrome  Standalone environment    with &lt;amp-iframe&gt; should support binding to src" time="5.2070" classname="should support binding to src">
      <failure message="Waiting for element to be located #ampIframe iframe
Wait timed out after 5188ms" type="TimeoutError"><![CDATA[TimeoutError: Waiting for element to be located #ampIframe iframe
Wait timed out after 5188ms
    at /Users/rileyjones/amp/amphtml/build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:894:17
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T22:12:00" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-iframe.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:12:00" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-iframe.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with &lt;amp-iframe&gt;" timestamp="2021-04-28T22:12:00" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-iframe.js" time="23.0110" failures="1">
    <testcase name="amp-bind chrome  Viewer environment  &quot;before each&quot; hook for &quot;should support binding to src&quot;" time="23.0110" classname="&quot;before each&quot; hook for &quot;should support binding to src&quot;">
      <failure message="Waiting for element to be located #viewer[data-loaded]
Wait timed out after 5134ms
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;Viewer&lt;/title&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui&quot;&gt;
    &lt;script src=&quot;/dist/v0/examples/amp-viewer-host.js&quot;&gt;&lt;/script&gt;
    &lt;style&gt;
      body, #viewer {
        margin: 0;
        border: 0;
        padding: 0;
      }
      body,.fill {
        position: absolute;
        height: 100%;
        width: 100%;
      }
    &lt;/style&gt;
    &lt;script&gt;
      var viewer = null;
      function Viewer(url, opt_caps, simulateEmail = false) {
        this.id = &apos;viewer&apos;;
        this.url = url;
        this.stackIndex_ = 0;
        this.prerenderSize_ = 1;
        this.csi_ = 1;
        this.caps_ =
          opt_caps || &apos;a2a,focus-rect,foo,keyboard,swipe,iframeScroll&apos;;
        this.receivedMessages = [];
        this.simulateEmail = simulateEmail;

        this.container = document.body;
        this.iframe = document.createElement(&apos;iframe&apos;);
        this.iframe.setAttribute(&apos;id&apos;, this.id);
        this.iframe.setAttribute(
          &apos;sandbox&apos;,
          &apos;allow-popups allow-scripts allow-forms allow-pointer-lock&apos; +
            &apos; allow-popups-to-escape-sandbox allow-same-origin&apos;
        );
        this.iframe.setAttribute(&apos;scrolling&apos;, &apos;yes&apos;);

        if (simulateEmail) {
          this.iframe.setAttribute(&apos;height&apos;, &apos;0&apos;);
          this.iframe.setAttribute(&apos;width&apos;, &apos;0&apos;);
        } else {
          this.iframe.classList.add(&apos;fill&apos;);
        }

        window.addEventListener(&apos;resize&apos;, this.onResize_.bind(this));
        window.addEventListener(&apos;popstate&apos;, this.onPopState_.bind(this));

        this.start();
      }

      Viewer.prototype.start = function () {
        var params = {
          history: 1,
          width: this.container./*OK*/ offsetWidth,
          height: this.container./*OK*/ offsetHeight,
          prerenderSize: this.prerenderSize_,
          origin: parseUrlDeprecated(window.location.href).origin,
          csi: this.csi_,
          cap: this.caps_,
        };
        log(&apos;Params:&apos; + JSON.stringify(params));

        var inputUrl = this.url + &apos;#&apos; + paramsStr(params);
        if (window.location.hash &amp;&amp; window.location.hash.length &gt; 1) {
          inputUrl += &apos;&amp;&apos; + window.location.hash.substring(1);
        }
        var parsedUrl = parseUrlDeprecated(inputUrl);
        var url = parsedUrl.href;
        this.frameOrigin_ = parsedUrl.origin;
        log(&apos;AMP URL = &apos;, url);
        this.container.appendChild(this.iframe);

        this.ampViewerHost_ = new AmpViewerHost(
          window,
          this.iframe,
          this.frameOrigin_,
          this.processRequest_.bind(this),
          /* logs id */ this.id
        );

        setTimeout(
          function () {
            this.iframe.setAttribute(&apos;src&apos;, url);
          }.bind(this)
        );
      };

      Viewer.prototype.documentReady_ = function () {
        log(&apos;AMP document ready&apos;);
        this.iframe.dataset[&apos;loaded&apos;] = &apos;&apos;;
        return Promise.resolve();
      };

      Viewer.prototype.onScroll_ = function () {
        log(&apos;Viewer.prototype.onScroll_&apos;);
        this.ampViewerHost_.sendRequest(
          &apos;viewport&apos;,
          {
            scrollTop: this.container./*OK*/ scrollTop,
          },
          false
        );
      };

      Viewer.prototype.onResize_ = function () {
        log(
          &apos;Resized to &apos;,
          this.container./*OK*/ offsetWidth,
          this.container./*OK*/ offsetHeight,
          this.container./*OK*/ scrollTop
        );
        this.ampViewerHost_.sendRequest(
          &apos;viewport&apos;,
          {
            scrollTop: this.container./*OK*/ scrollTop,
            width: this.container./*OK*/ offsetWidth,
            height: this.container./*OK*/ offsetHeight,
          },
          false
        );
      };

      Viewer.prototype.pushHistory_ = function (stackIndex) {
        log(&apos;push history to &apos;, stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_ + 1) {
          throw new Error(&apos;Only one step push allowed&apos;);
        }
        this.stackIndex_ = stackIndex;
        window.history.pushState({}, &apos;&apos;);
        return Promise.resolve();
      };

      Viewer.prototype.popHistory_ = function (stackIndex) {
        log(&apos;pop history at &apos;, stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_) {
          throw new Error(&apos;Only one step pop allowed&apos;);
        }
        this.stackIndex_ = stackIndex;
        window.history.go(-1);
        return Promise.resolve();
      };

      Viewer.prototype.onPopState_ = function () {
        // Even more trivial. Always assumes that only one step was popped in
        // history.
        this.stackIndex_--;
        this.ampViewerHost_.sendRequest(
          &apos;historyPopped&apos;,
          {
            newStackIndex: this.stackIndex_,
          },
          false
        );
        log(&apos;history popped to &apos;, this.stackIndex_);
      };

      Viewer.prototype.scrollAmpDoc = function (scrollTop) {
        log(&apos;viewer scroll amp doc: &apos;, scrollTop);
        this.ampViewerHost_.sendRequest(&apos;scroll&apos;, {scrollTop: scrollTop}, true);
      };

      Viewer.prototype.processRequest_ = function (name, data, awaitResponse) {
        log(&apos;Viewer.prototype.processRequest_&apos;, name);
        this.receivedMessages.push({name, data});
        switch (name) {
          case &apos;documentLoaded&apos;:
            return this.documentReady_();
          case &apos;pushHistory&apos;:
            return this.pushHistory_(data.stackIndex);
          case &apos;popHistory&apos;:
            return this.popHistory_(data.stackIndex);
          case &apos;documentHeight&apos;:
            if (this.simulateEmail) {
              const {height} = data;
              this.iframe.style.height = height + &apos;px&apos;;
              this.iframe.removeAttribute(&apos;width&apos;);
            }
            return Promise.resolve();
          case &apos;broadcast&apos;:
          case &apos;bindReady&apos;:
          case &apos;focusin&apos;:
          case &apos;requestFullOverlay&apos;:
          case &apos;cancelFullOverlay&apos;:
          case &apos;unloaded&apos;:
          case &apos;tick&apos;:
          case &apos;a2aNavigate&apos;:
          case &apos;sendCsi&apos;:
          case &apos;touchstart&apos;:
          case &apos;touchmove&apos;:
          case &apos;touchend&apos;:
          case &apos;setFlushParams&apos;:
          case &apos;prerenderComplete&apos;:
          case &apos;scroll&apos;:
          case &apos;replaceHistory&apos;:
          case &apos;visibilitychange&apos;:
            return Promise.resolve();
          case &apos;xhr&apos;:
          case &apos;viewerRenderTemplate&apos;:
          default:
            return Promise.reject(&apos;Request not supported: &apos;, name);
        }
      };

      function log() {
        var var_args = Array.prototype.slice.call(arguments, 0);
        var_args.unshift(&apos;[VIEWER]&apos;);
        console /*OK*/.log
          .apply(console, var_args);
      }

      function parseUrlDeprecated(urlString) {
        var a = document.createElement(&apos;a&apos;);
        a.href = urlString;
        return {
          href: a.href,
          protocol: a.protocol,
          host: a.host,
          hostname: a.hostname,
          port: a.port == &apos;0&apos; ? &apos;&apos; : a.port,
          pathname: a.pathname,
          search: a.search,
          hash: a.hash,
          origin: a.protocol + &apos;//&apos; + a.host,
        };
      }

      function paramsStr(params) {
        var s = &apos;&apos;;
        for (var k in params) {
          var v = params[k];
          if (v === null || v === undefined) {
            continue;
          }
          if (s.length &gt; 0) {
            s += &apos;&amp;&apos;;
          }
          s += encodeURIComponent(k) + &apos;=&apos; + encodeURIComponent(v);
        }
        return s;
      }

      /**
       * Parses the query string of an URL. This method returns a simple key/value
       * map. If there are duplicate keys the latest value is returned.
       * @param {string} queryString
       * @return {!Object&lt;string&gt;}
       */
      function parseQueryString(queryString) {
        const params = Object.create(null);
        if (!queryString) {
          return params;
        }
        if (startsWith(queryString, &apos;?&apos;) || startsWith(queryString, &apos;#&apos;)) {
          queryString = queryString.substr(1);
        }
        const pairs = queryString.split(&apos;&amp;&apos;);
        for (let i = 0; i &lt; pairs.length; i++) {
          const pair = pairs[i];
          const eqIndex = pair.indexOf(&apos;=&apos;);
          let name;
          let value;
          if (eqIndex != -1) {
            name = decodeURIComponent(pair.substring(0, eqIndex)).trim();
            value = decodeURIComponent(pair.substring(eqIndex + 1)).trim();
          } else {
            name = decodeURIComponent(pair).trim();
            value = &apos;&apos;;
          }
          if (name) {
            params[name] = value;
          }
        }
        return params;
      }

      function startsWith(string, prefix) {
        return string.lastIndexOf(prefix, 0) == 0;
      }

      /**
       * @param {string} url
       * @param {string} param
       * @param {*} value
       * @return {string}
       */
      function addQueryParam(url, param, value) {
        const paramValue =
          encodeURIComponent(param) + &apos;=&apos; + encodeURIComponent(value);
        if (!url.includes(&apos;?&apos;)) {
          url += &apos;?&apos; + paramValue;
        } else {
          url += &apos;&amp;&apos; + paramValue;
        }
        return url;
      }

      function loadAmpDoc() {
        const hash = window.location.hash;
        const hashParams = parseQueryString(hash);
        const href = hashParams[&apos;href&apos;];
        const caps = hashParams[&apos;caps&apos;];
        const isEmail = &apos;true&apos; === hashParams[&apos;isEmail&apos;];

        viewer = new Viewer(
          addQueryParam(href, &apos;amp_js_v&apos;, &apos;0.1&apos;),
          caps,
          isEmail
        );
      }
      window.onload = loadAmpDoc;
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;

&lt;iframe id=&quot;viewer&quot; sandbox=&quot;allow-popups allow-scripts allow-forms allow-pointer-lock allow-popups-to-escape-sandbox allow-same-origin&quot; scrolling=&quot;yes&quot; class=&quot;fill&quot;&gt;&lt;/iframe&gt;&lt;/body&gt;" type="Error"><![CDATA[Error: Waiting for element to be located #viewer[data-loaded]
Wait timed out after 5134ms
<head>
    <meta charset="utf-8">
    <title>Viewer</title>
    <meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui">
    <script src="/dist/v0/examples/amp-viewer-host.js"></script>
    <style>
      body, #viewer {
        margin: 0;
        border: 0;
        padding: 0;
      }
      body,.fill {
        position: absolute;
        height: 100%;
        width: 100%;
      }
    </style>
    <script>
      var viewer = null;
      function Viewer(url, opt_caps, simulateEmail = false) {
        this.id = 'viewer';
        this.url = url;
        this.stackIndex_ = 0;
        this.prerenderSize_ = 1;
        this.csi_ = 1;
        this.caps_ =
          opt_caps || 'a2a,focus-rect,foo,keyboard,swipe,iframeScroll';
        this.receivedMessages = [];
        this.simulateEmail = simulateEmail;

        this.container = document.body;
        this.iframe = document.createElement('iframe');
        this.iframe.setAttribute('id', this.id);
        this.iframe.setAttribute(
          'sandbox',
          'allow-popups allow-scripts allow-forms allow-pointer-lock' +
            ' allow-popups-to-escape-sandbox allow-same-origin'
        );
        this.iframe.setAttribute('scrolling', 'yes');

        if (simulateEmail) {
          this.iframe.setAttribute('height', '0');
          this.iframe.setAttribute('width', '0');
        } else {
          this.iframe.classList.add('fill');
        }

        window.addEventListener('resize', this.onResize_.bind(this));
        window.addEventListener('popstate', this.onPopState_.bind(this));

        this.start();
      }

      Viewer.prototype.start = function () {
        var params = {
          history: 1,
          width: this.container./*OK*/ offsetWidth,
          height: this.container./*OK*/ offsetHeight,
          prerenderSize: this.prerenderSize_,
          origin: parseUrlDeprecated(window.location.href).origin,
          csi: this.csi_,
          cap: this.caps_,
        };
        log('Params:' + JSON.stringify(params));

        var inputUrl = this.url + '#' + paramsStr(params);
        if (window.location.hash && window.location.hash.length > 1) {
          inputUrl += '&' + window.location.hash.substring(1);
        }
        var parsedUrl = parseUrlDeprecated(inputUrl);
        var url = parsedUrl.href;
        this.frameOrigin_ = parsedUrl.origin;
        log('AMP URL = ', url);
        this.container.appendChild(this.iframe);

        this.ampViewerHost_ = new AmpViewerHost(
          window,
          this.iframe,
          this.frameOrigin_,
          this.processRequest_.bind(this),
          /* logs id */ this.id
        );

        setTimeout(
          function () {
            this.iframe.setAttribute('src', url);
          }.bind(this)
        );
      };

      Viewer.prototype.documentReady_ = function () {
        log('AMP document ready');
        this.iframe.dataset['loaded'] = '';
        return Promise.resolve();
      };

      Viewer.prototype.onScroll_ = function () {
        log('Viewer.prototype.onScroll_');
        this.ampViewerHost_.sendRequest(
          'viewport',
          {
            scrollTop: this.container./*OK*/ scrollTop,
          },
          false
        );
      };

      Viewer.prototype.onResize_ = function () {
        log(
          'Resized to ',
          this.container./*OK*/ offsetWidth,
          this.container./*OK*/ offsetHeight,
          this.container./*OK*/ scrollTop
        );
        this.ampViewerHost_.sendRequest(
          'viewport',
          {
            scrollTop: this.container./*OK*/ scrollTop,
            width: this.container./*OK*/ offsetWidth,
            height: this.container./*OK*/ offsetHeight,
          },
          false
        );
      };

      Viewer.prototype.pushHistory_ = function (stackIndex) {
        log('push history to ', stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_ + 1) {
          throw new Error('Only one step push allowed');
        }
        this.stackIndex_ = stackIndex;
        window.history.pushState({}, '');
        return Promise.resolve();
      };

      Viewer.prototype.popHistory_ = function (stackIndex) {
        log('pop history at ', stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_) {
          throw new Error('Only one step pop allowed');
        }
        this.stackIndex_ = stackIndex;
        window.history.go(-1);
        return Promise.resolve();
      };

      Viewer.prototype.onPopState_ = function () {
        // Even more trivial. Always assumes that only one step was popped in
        // history.
        this.stackIndex_--;
        this.ampViewerHost_.sendRequest(
          'historyPopped',
          {
            newStackIndex: this.stackIndex_,
          },
          false
        );
        log('history popped to ', this.stackIndex_);
      };

      Viewer.prototype.scrollAmpDoc = function (scrollTop) {
        log('viewer scroll amp doc: ', scrollTop);
        this.ampViewerHost_.sendRequest('scroll', {scrollTop: scrollTop}, true);
      };

      Viewer.prototype.processRequest_ = function (name, data, awaitResponse) {
        log('Viewer.prototype.processRequest_', name);
        this.receivedMessages.push({name, data});
        switch (name) {
          case 'documentLoaded':
            return this.documentReady_();
          case 'pushHistory':
            return this.pushHistory_(data.stackIndex);
          case 'popHistory':
            return this.popHistory_(data.stackIndex);
          case 'documentHeight':
            if (this.simulateEmail) {
              const {height} = data;
              this.iframe.style.height = height + 'px';
              this.iframe.removeAttribute('width');
            }
            return Promise.resolve();
          case 'broadcast':
          case 'bindReady':
          case 'focusin':
          case 'requestFullOverlay':
          case 'cancelFullOverlay':
          case 'unloaded':
          case 'tick':
          case 'a2aNavigate':
          case 'sendCsi':
          case 'touchstart':
          case 'touchmove':
          case 'touchend':
          case 'setFlushParams':
          case 'prerenderComplete':
          case 'scroll':
          case 'replaceHistory':
          case 'visibilitychange':
            return Promise.resolve();
          case 'xhr':
          case 'viewerRenderTemplate':
          default:
            return Promise.reject('Request not supported: ', name);
        }
      };

      function log() {
        var var_args = Array.prototype.slice.call(arguments, 0);
        var_args.unshift('[VIEWER]');
        console /*OK*/.log
          .apply(console, var_args);
      }

      function parseUrlDeprecated(urlString) {
        var a = document.createElement('a');
        a.href = urlString;
        return {
          href: a.href,
          protocol: a.protocol,
          host: a.host,
          hostname: a.hostname,
          port: a.port == '0' ? '' : a.port,
          pathname: a.pathname,
          search: a.search,
          hash: a.hash,
          origin: a.protocol + '//' + a.host,
        };
      }

      function paramsStr(params) {
        var s = '';
        for (var k in params) {
          var v = params[k];
          if (v === null || v === undefined) {
            continue;
          }
          if (s.length > 0) {
            s += '&';
          }
          s += encodeURIComponent(k) + '=' + encodeURIComponent(v);
        }
        return s;
      }

      /**
       * Parses the query string of an URL. This method returns a simple key/value
       * map. If there are duplicate keys the latest value is returned.
       * @param {string} queryString
       * @return {!Object<string>}
       */
      function parseQueryString(queryString) {
        const params = Object.create(null);
        if (!queryString) {
          return params;
        }
        if (startsWith(queryString, '?') || startsWith(queryString, '#')) {
          queryString = queryString.substr(1);
        }
        const pairs = queryString.split('&');
        for (let i = 0; i < pairs.length; i++) {
          const pair = pairs[i];
          const eqIndex = pair.indexOf('=');
          let name;
          let value;
          if (eqIndex != -1) {
            name = decodeURIComponent(pair.substring(0, eqIndex)).trim();
            value = decodeURIComponent(pair.substring(eqIndex + 1)).trim();
          } else {
            name = decodeURIComponent(pair).trim();
            value = '';
          }
          if (name) {
            params[name] = value;
          }
        }
        return params;
      }

      function startsWith(string, prefix) {
        return string.lastIndexOf(prefix, 0) == 0;
      }

      /**
       * @param {string} url
       * @param {string} param
       * @param {*} value
       * @return {string}
       */
      function addQueryParam(url, param, value) {
        const paramValue =
          encodeURIComponent(param) + '=' + encodeURIComponent(value);
        if (!url.includes('?')) {
          url += '?' + paramValue;
        } else {
          url += '&' + paramValue;
        }
        return url;
      }

      function loadAmpDoc() {
        const hash = window.location.hash;
        const hashParams = parseQueryString(hash);
        const href = hashParams['href'];
        const caps = hashParams['caps'];
        const isEmail = 'true' === hashParams['isEmail'];

        viewer = new Viewer(
          addQueryParam(href, 'amp_js_v', '0.1'),
          caps,
          isEmail
        );
      }
      window.onload = loadAmpDoc;
    </script>
  </head>
  <body>

<iframe id="viewer" sandbox="allow-popups allow-scripts allow-forms allow-pointer-lock allow-popups-to-escape-sandbox allow-same-origin" scrolling="yes" class="fill"></iframe></body>
    at AmpDriver._callee7$ (build-system/tasks/e2e/amp-driver.js:321:23)
    at tryCatch (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:61:40)
    at GeneratorFunctionPrototype.invoke [as _invoke] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:329:22)
    at GeneratorFunctionPrototype.prototype.<computed> [as next] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:94:21)
    at asyncGeneratorStep (build-system/tasks/e2e/amp-driver.js:13:103)
    at _next (build-system/tasks/e2e/amp-driver.js:15:194)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Shadow environment " timestamp="2021-04-28T22:12:23" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-iframe.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:12:23" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-iframe.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with &lt;amp-iframe&gt;" timestamp="2021-04-28T22:12:23" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-iframe.js" time="5.0930" failures="1">
    <testcase name="amp-bind chrome  Shadow environment    with &lt;amp-iframe&gt; should support binding to src" time="5.0930" classname="should support binding to src">
      <failure message="Waiting for element to be located #ampIframe iframe
Wait timed out after 5080ms" type="TimeoutError"><![CDATA[TimeoutError: Waiting for element to be located #ampIframe iframe
Wait timed out after 5080ms
    at /Users/rileyjones/amp/amphtml/build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:894:17
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-bind" timestamp="2021-04-28T22:12:29" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-live-list.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:12:29" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-live-list.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:12:29" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-live-list.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:12:29" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-live-list.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with &lt;amp-live-list&gt;" timestamp="2021-04-28T22:12:29" tests="2" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-live-list.js" time="80.0040" failures="2">
    <testcase name="amp-bind chrome  Standalone environment    with &lt;amp-live-list&gt; should detect bindings in initial live-list elements" time="40.0020" classname="should detect bindings in initial live-list elements">
      <failure message="Timeout of 40000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-live-list.js)" type="Error"><![CDATA[Error: Timeout of 40000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-live-list.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
    <testcase name="amp-bind chrome  Standalone environment    with &lt;amp-live-list&gt; should detect bindings in initial live-list elements" time="40.0020" classname="should detect bindings in initial live-list elements">
      <failure message="expected &apos;unbound&apos; to equal &apos;hello world&apos;" type="AssertionError"><![CDATA[AssertionError: expected 'unbound' to equal 'hello world'
    at valueSatisfiesExpectation (build-system/tasks/e2e/expect.js:376:18)
    at conditionValue (build-system/tasks/e2e/selenium-webdriver-controller.js:123:30)
    at _callee$ (build-system/tasks/e2e/selenium-webdriver-controller.js:87:46)
    at tryCatch (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:61:40)
    at GeneratorFunctionPrototype.invoke [as _invoke] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:329:22)
    at GeneratorFunctionPrototype.prototype.<computed> [as next] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:94:21)
    at asyncGeneratorStep (build-system/tasks/e2e/selenium-webdriver-controller.js:11:103)
    at _next (build-system/tasks/e2e/selenium-webdriver-controller.js:13:194)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T22:13:10" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-live-list.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:13:10" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-live-list.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with &lt;amp-live-list&gt;" timestamp="2021-04-28T22:13:10" tests="2" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-live-list.js" time="23.0530" failures="1">
    <testcase name="amp-bind chrome  Viewer environment  &quot;before each&quot; hook for &quot;should detect bindings in initial live-list elements&quot;" time="23.0530" classname="&quot;before each&quot; hook for &quot;should detect bindings in initial live-list elements&quot;">
      <failure message="Waiting for element to be located #viewer[data-loaded]
Wait timed out after 5212ms
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;Viewer&lt;/title&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui&quot;&gt;
    &lt;script src=&quot;/dist/v0/examples/amp-viewer-host.js&quot;&gt;&lt;/script&gt;
    &lt;style&gt;
      body, #viewer {
        margin: 0;
        border: 0;
        padding: 0;
      }
      body,.fill {
        position: absolute;
        height: 100%;
        width: 100%;
      }
    &lt;/style&gt;
    &lt;script&gt;
      var viewer = null;
      function Viewer(url, opt_caps, simulateEmail = false) {
        this.id = &apos;viewer&apos;;
        this.url = url;
        this.stackIndex_ = 0;
        this.prerenderSize_ = 1;
        this.csi_ = 1;
        this.caps_ =
          opt_caps || &apos;a2a,focus-rect,foo,keyboard,swipe,iframeScroll&apos;;
        this.receivedMessages = [];
        this.simulateEmail = simulateEmail;

        this.container = document.body;
        this.iframe = document.createElement(&apos;iframe&apos;);
        this.iframe.setAttribute(&apos;id&apos;, this.id);
        this.iframe.setAttribute(
          &apos;sandbox&apos;,
          &apos;allow-popups allow-scripts allow-forms allow-pointer-lock&apos; +
            &apos; allow-popups-to-escape-sandbox allow-same-origin&apos;
        );
        this.iframe.setAttribute(&apos;scrolling&apos;, &apos;yes&apos;);

        if (simulateEmail) {
          this.iframe.setAttribute(&apos;height&apos;, &apos;0&apos;);
          this.iframe.setAttribute(&apos;width&apos;, &apos;0&apos;);
        } else {
          this.iframe.classList.add(&apos;fill&apos;);
        }

        window.addEventListener(&apos;resize&apos;, this.onResize_.bind(this));
        window.addEventListener(&apos;popstate&apos;, this.onPopState_.bind(this));

        this.start();
      }

      Viewer.prototype.start = function () {
        var params = {
          history: 1,
          width: this.container./*OK*/ offsetWidth,
          height: this.container./*OK*/ offsetHeight,
          prerenderSize: this.prerenderSize_,
          origin: parseUrlDeprecated(window.location.href).origin,
          csi: this.csi_,
          cap: this.caps_,
        };
        log(&apos;Params:&apos; + JSON.stringify(params));

        var inputUrl = this.url + &apos;#&apos; + paramsStr(params);
        if (window.location.hash &amp;&amp; window.location.hash.length &gt; 1) {
          inputUrl += &apos;&amp;&apos; + window.location.hash.substring(1);
        }
        var parsedUrl = parseUrlDeprecated(inputUrl);
        var url = parsedUrl.href;
        this.frameOrigin_ = parsedUrl.origin;
        log(&apos;AMP URL = &apos;, url);
        this.container.appendChild(this.iframe);

        this.ampViewerHost_ = new AmpViewerHost(
          window,
          this.iframe,
          this.frameOrigin_,
          this.processRequest_.bind(this),
          /* logs id */ this.id
        );

        setTimeout(
          function () {
            this.iframe.setAttribute(&apos;src&apos;, url);
          }.bind(this)
        );
      };

      Viewer.prototype.documentReady_ = function () {
        log(&apos;AMP document ready&apos;);
        this.iframe.dataset[&apos;loaded&apos;] = &apos;&apos;;
        return Promise.resolve();
      };

      Viewer.prototype.onScroll_ = function () {
        log(&apos;Viewer.prototype.onScroll_&apos;);
        this.ampViewerHost_.sendRequest(
          &apos;viewport&apos;,
          {
            scrollTop: this.container./*OK*/ scrollTop,
          },
          false
        );
      };

      Viewer.prototype.onResize_ = function () {
        log(
          &apos;Resized to &apos;,
          this.container./*OK*/ offsetWidth,
          this.container./*OK*/ offsetHeight,
          this.container./*OK*/ scrollTop
        );
        this.ampViewerHost_.sendRequest(
          &apos;viewport&apos;,
          {
            scrollTop: this.container./*OK*/ scrollTop,
            width: this.container./*OK*/ offsetWidth,
            height: this.container./*OK*/ offsetHeight,
          },
          false
        );
      };

      Viewer.prototype.pushHistory_ = function (stackIndex) {
        log(&apos;push history to &apos;, stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_ + 1) {
          throw new Error(&apos;Only one step push allowed&apos;);
        }
        this.stackIndex_ = stackIndex;
        window.history.pushState({}, &apos;&apos;);
        return Promise.resolve();
      };

      Viewer.prototype.popHistory_ = function (stackIndex) {
        log(&apos;pop history at &apos;, stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_) {
          throw new Error(&apos;Only one step pop allowed&apos;);
        }
        this.stackIndex_ = stackIndex;
        window.history.go(-1);
        return Promise.resolve();
      };

      Viewer.prototype.onPopState_ = function () {
        // Even more trivial. Always assumes that only one step was popped in
        // history.
        this.stackIndex_--;
        this.ampViewerHost_.sendRequest(
          &apos;historyPopped&apos;,
          {
            newStackIndex: this.stackIndex_,
          },
          false
        );
        log(&apos;history popped to &apos;, this.stackIndex_);
      };

      Viewer.prototype.scrollAmpDoc = function (scrollTop) {
        log(&apos;viewer scroll amp doc: &apos;, scrollTop);
        this.ampViewerHost_.sendRequest(&apos;scroll&apos;, {scrollTop: scrollTop}, true);
      };

      Viewer.prototype.processRequest_ = function (name, data, awaitResponse) {
        log(&apos;Viewer.prototype.processRequest_&apos;, name);
        this.receivedMessages.push({name, data});
        switch (name) {
          case &apos;documentLoaded&apos;:
            return this.documentReady_();
          case &apos;pushHistory&apos;:
            return this.pushHistory_(data.stackIndex);
          case &apos;popHistory&apos;:
            return this.popHistory_(data.stackIndex);
          case &apos;documentHeight&apos;:
            if (this.simulateEmail) {
              const {height} = data;
              this.iframe.style.height = height + &apos;px&apos;;
              this.iframe.removeAttribute(&apos;width&apos;);
            }
            return Promise.resolve();
          case &apos;broadcast&apos;:
          case &apos;bindReady&apos;:
          case &apos;focusin&apos;:
          case &apos;requestFullOverlay&apos;:
          case &apos;cancelFullOverlay&apos;:
          case &apos;unloaded&apos;:
          case &apos;tick&apos;:
          case &apos;a2aNavigate&apos;:
          case &apos;sendCsi&apos;:
          case &apos;touchstart&apos;:
          case &apos;touchmove&apos;:
          case &apos;touchend&apos;:
          case &apos;setFlushParams&apos;:
          case &apos;prerenderComplete&apos;:
          case &apos;scroll&apos;:
          case &apos;replaceHistory&apos;:
          case &apos;visibilitychange&apos;:
            return Promise.resolve();
          case &apos;xhr&apos;:
          case &apos;viewerRenderTemplate&apos;:
          default:
            return Promise.reject(&apos;Request not supported: &apos;, name);
        }
      };

      function log() {
        var var_args = Array.prototype.slice.call(arguments, 0);
        var_args.unshift(&apos;[VIEWER]&apos;);
        console /*OK*/.log
          .apply(console, var_args);
      }

      function parseUrlDeprecated(urlString) {
        var a = document.createElement(&apos;a&apos;);
        a.href = urlString;
        return {
          href: a.href,
          protocol: a.protocol,
          host: a.host,
          hostname: a.hostname,
          port: a.port == &apos;0&apos; ? &apos;&apos; : a.port,
          pathname: a.pathname,
          search: a.search,
          hash: a.hash,
          origin: a.protocol + &apos;//&apos; + a.host,
        };
      }

      function paramsStr(params) {
        var s = &apos;&apos;;
        for (var k in params) {
          var v = params[k];
          if (v === null || v === undefined) {
            continue;
          }
          if (s.length &gt; 0) {
            s += &apos;&amp;&apos;;
          }
          s += encodeURIComponent(k) + &apos;=&apos; + encodeURIComponent(v);
        }
        return s;
      }

      /**
       * Parses the query string of an URL. This method returns a simple key/value
       * map. If there are duplicate keys the latest value is returned.
       * @param {string} queryString
       * @return {!Object&lt;string&gt;}
       */
      function parseQueryString(queryString) {
        const params = Object.create(null);
        if (!queryString) {
          return params;
        }
        if (startsWith(queryString, &apos;?&apos;) || startsWith(queryString, &apos;#&apos;)) {
          queryString = queryString.substr(1);
        }
        const pairs = queryString.split(&apos;&amp;&apos;);
        for (let i = 0; i &lt; pairs.length; i++) {
          const pair = pairs[i];
          const eqIndex = pair.indexOf(&apos;=&apos;);
          let name;
          let value;
          if (eqIndex != -1) {
            name = decodeURIComponent(pair.substring(0, eqIndex)).trim();
            value = decodeURIComponent(pair.substring(eqIndex + 1)).trim();
          } else {
            name = decodeURIComponent(pair).trim();
            value = &apos;&apos;;
          }
          if (name) {
            params[name] = value;
          }
        }
        return params;
      }

      function startsWith(string, prefix) {
        return string.lastIndexOf(prefix, 0) == 0;
      }

      /**
       * @param {string} url
       * @param {string} param
       * @param {*} value
       * @return {string}
       */
      function addQueryParam(url, param, value) {
        const paramValue =
          encodeURIComponent(param) + &apos;=&apos; + encodeURIComponent(value);
        if (!url.includes(&apos;?&apos;)) {
          url += &apos;?&apos; + paramValue;
        } else {
          url += &apos;&amp;&apos; + paramValue;
        }
        return url;
      }

      function loadAmpDoc() {
        const hash = window.location.hash;
        const hashParams = parseQueryString(hash);
        const href = hashParams[&apos;href&apos;];
        const caps = hashParams[&apos;caps&apos;];
        const isEmail = &apos;true&apos; === hashParams[&apos;isEmail&apos;];

        viewer = new Viewer(
          addQueryParam(href, &apos;amp_js_v&apos;, &apos;0.1&apos;),
          caps,
          isEmail
        );
      }
      window.onload = loadAmpDoc;
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;

&lt;iframe id=&quot;viewer&quot; sandbox=&quot;allow-popups allow-scripts allow-forms allow-pointer-lock allow-popups-to-escape-sandbox allow-same-origin&quot; scrolling=&quot;yes&quot; class=&quot;fill&quot;&gt;&lt;/iframe&gt;&lt;/body&gt;" type="Error"><![CDATA[Error: Waiting for element to be located #viewer[data-loaded]
Wait timed out after 5212ms
<head>
    <meta charset="utf-8">
    <title>Viewer</title>
    <meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui">
    <script src="/dist/v0/examples/amp-viewer-host.js"></script>
    <style>
      body, #viewer {
        margin: 0;
        border: 0;
        padding: 0;
      }
      body,.fill {
        position: absolute;
        height: 100%;
        width: 100%;
      }
    </style>
    <script>
      var viewer = null;
      function Viewer(url, opt_caps, simulateEmail = false) {
        this.id = 'viewer';
        this.url = url;
        this.stackIndex_ = 0;
        this.prerenderSize_ = 1;
        this.csi_ = 1;
        this.caps_ =
          opt_caps || 'a2a,focus-rect,foo,keyboard,swipe,iframeScroll';
        this.receivedMessages = [];
        this.simulateEmail = simulateEmail;

        this.container = document.body;
        this.iframe = document.createElement('iframe');
        this.iframe.setAttribute('id', this.id);
        this.iframe.setAttribute(
          'sandbox',
          'allow-popups allow-scripts allow-forms allow-pointer-lock' +
            ' allow-popups-to-escape-sandbox allow-same-origin'
        );
        this.iframe.setAttribute('scrolling', 'yes');

        if (simulateEmail) {
          this.iframe.setAttribute('height', '0');
          this.iframe.setAttribute('width', '0');
        } else {
          this.iframe.classList.add('fill');
        }

        window.addEventListener('resize', this.onResize_.bind(this));
        window.addEventListener('popstate', this.onPopState_.bind(this));

        this.start();
      }

      Viewer.prototype.start = function () {
        var params = {
          history: 1,
          width: this.container./*OK*/ offsetWidth,
          height: this.container./*OK*/ offsetHeight,
          prerenderSize: this.prerenderSize_,
          origin: parseUrlDeprecated(window.location.href).origin,
          csi: this.csi_,
          cap: this.caps_,
        };
        log('Params:' + JSON.stringify(params));

        var inputUrl = this.url + '#' + paramsStr(params);
        if (window.location.hash && window.location.hash.length > 1) {
          inputUrl += '&' + window.location.hash.substring(1);
        }
        var parsedUrl = parseUrlDeprecated(inputUrl);
        var url = parsedUrl.href;
        this.frameOrigin_ = parsedUrl.origin;
        log('AMP URL = ', url);
        this.container.appendChild(this.iframe);

        this.ampViewerHost_ = new AmpViewerHost(
          window,
          this.iframe,
          this.frameOrigin_,
          this.processRequest_.bind(this),
          /* logs id */ this.id
        );

        setTimeout(
          function () {
            this.iframe.setAttribute('src', url);
          }.bind(this)
        );
      };

      Viewer.prototype.documentReady_ = function () {
        log('AMP document ready');
        this.iframe.dataset['loaded'] = '';
        return Promise.resolve();
      };

      Viewer.prototype.onScroll_ = function () {
        log('Viewer.prototype.onScroll_');
        this.ampViewerHost_.sendRequest(
          'viewport',
          {
            scrollTop: this.container./*OK*/ scrollTop,
          },
          false
        );
      };

      Viewer.prototype.onResize_ = function () {
        log(
          'Resized to ',
          this.container./*OK*/ offsetWidth,
          this.container./*OK*/ offsetHeight,
          this.container./*OK*/ scrollTop
        );
        this.ampViewerHost_.sendRequest(
          'viewport',
          {
            scrollTop: this.container./*OK*/ scrollTop,
            width: this.container./*OK*/ offsetWidth,
            height: this.container./*OK*/ offsetHeight,
          },
          false
        );
      };

      Viewer.prototype.pushHistory_ = function (stackIndex) {
        log('push history to ', stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_ + 1) {
          throw new Error('Only one step push allowed');
        }
        this.stackIndex_ = stackIndex;
        window.history.pushState({}, '');
        return Promise.resolve();
      };

      Viewer.prototype.popHistory_ = function (stackIndex) {
        log('pop history at ', stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_) {
          throw new Error('Only one step pop allowed');
        }
        this.stackIndex_ = stackIndex;
        window.history.go(-1);
        return Promise.resolve();
      };

      Viewer.prototype.onPopState_ = function () {
        // Even more trivial. Always assumes that only one step was popped in
        // history.
        this.stackIndex_--;
        this.ampViewerHost_.sendRequest(
          'historyPopped',
          {
            newStackIndex: this.stackIndex_,
          },
          false
        );
        log('history popped to ', this.stackIndex_);
      };

      Viewer.prototype.scrollAmpDoc = function (scrollTop) {
        log('viewer scroll amp doc: ', scrollTop);
        this.ampViewerHost_.sendRequest('scroll', {scrollTop: scrollTop}, true);
      };

      Viewer.prototype.processRequest_ = function (name, data, awaitResponse) {
        log('Viewer.prototype.processRequest_', name);
        this.receivedMessages.push({name, data});
        switch (name) {
          case 'documentLoaded':
            return this.documentReady_();
          case 'pushHistory':
            return this.pushHistory_(data.stackIndex);
          case 'popHistory':
            return this.popHistory_(data.stackIndex);
          case 'documentHeight':
            if (this.simulateEmail) {
              const {height} = data;
              this.iframe.style.height = height + 'px';
              this.iframe.removeAttribute('width');
            }
            return Promise.resolve();
          case 'broadcast':
          case 'bindReady':
          case 'focusin':
          case 'requestFullOverlay':
          case 'cancelFullOverlay':
          case 'unloaded':
          case 'tick':
          case 'a2aNavigate':
          case 'sendCsi':
          case 'touchstart':
          case 'touchmove':
          case 'touchend':
          case 'setFlushParams':
          case 'prerenderComplete':
          case 'scroll':
          case 'replaceHistory':
          case 'visibilitychange':
            return Promise.resolve();
          case 'xhr':
          case 'viewerRenderTemplate':
          default:
            return Promise.reject('Request not supported: ', name);
        }
      };

      function log() {
        var var_args = Array.prototype.slice.call(arguments, 0);
        var_args.unshift('[VIEWER]');
        console /*OK*/.log
          .apply(console, var_args);
      }

      function parseUrlDeprecated(urlString) {
        var a = document.createElement('a');
        a.href = urlString;
        return {
          href: a.href,
          protocol: a.protocol,
          host: a.host,
          hostname: a.hostname,
          port: a.port == '0' ? '' : a.port,
          pathname: a.pathname,
          search: a.search,
          hash: a.hash,
          origin: a.protocol + '//' + a.host,
        };
      }

      function paramsStr(params) {
        var s = '';
        for (var k in params) {
          var v = params[k];
          if (v === null || v === undefined) {
            continue;
          }
          if (s.length > 0) {
            s += '&';
          }
          s += encodeURIComponent(k) + '=' + encodeURIComponent(v);
        }
        return s;
      }

      /**
       * Parses the query string of an URL. This method returns a simple key/value
       * map. If there are duplicate keys the latest value is returned.
       * @param {string} queryString
       * @return {!Object<string>}
       */
      function parseQueryString(queryString) {
        const params = Object.create(null);
        if (!queryString) {
          return params;
        }
        if (startsWith(queryString, '?') || startsWith(queryString, '#')) {
          queryString = queryString.substr(1);
        }
        const pairs = queryString.split('&');
        for (let i = 0; i < pairs.length; i++) {
          const pair = pairs[i];
          const eqIndex = pair.indexOf('=');
          let name;
          let value;
          if (eqIndex != -1) {
            name = decodeURIComponent(pair.substring(0, eqIndex)).trim();
            value = decodeURIComponent(pair.substring(eqIndex + 1)).trim();
          } else {
            name = decodeURIComponent(pair).trim();
            value = '';
          }
          if (name) {
            params[name] = value;
          }
        }
        return params;
      }

      function startsWith(string, prefix) {
        return string.lastIndexOf(prefix, 0) == 0;
      }

      /**
       * @param {string} url
       * @param {string} param
       * @param {*} value
       * @return {string}
       */
      function addQueryParam(url, param, value) {
        const paramValue =
          encodeURIComponent(param) + '=' + encodeURIComponent(value);
        if (!url.includes('?')) {
          url += '?' + paramValue;
        } else {
          url += '&' + paramValue;
        }
        return url;
      }

      function loadAmpDoc() {
        const hash = window.location.hash;
        const hashParams = parseQueryString(hash);
        const href = hashParams['href'];
        const caps = hashParams['caps'];
        const isEmail = 'true' === hashParams['isEmail'];

        viewer = new Viewer(
          addQueryParam(href, 'amp_js_v', '0.1'),
          caps,
          isEmail
        );
      }
      window.onload = loadAmpDoc;
    </script>
  </head>
  <body>

<iframe id="viewer" sandbox="allow-popups allow-scripts allow-forms allow-pointer-lock allow-popups-to-escape-sandbox allow-same-origin" scrolling="yes" class="fill"></iframe></body>
    at AmpDriver._callee7$ (build-system/tasks/e2e/amp-driver.js:321:23)
    at tryCatch (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:61:40)
    at GeneratorFunctionPrototype.invoke [as _invoke] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:329:22)
    at GeneratorFunctionPrototype.prototype.<computed> [as next] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:94:21)
    at asyncGeneratorStep (build-system/tasks/e2e/amp-driver.js:13:103)
    at _next (build-system/tasks/e2e/amp-driver.js:15:194)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Shadow environment " timestamp="2021-04-28T22:13:33" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-live-list.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:13:33" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-live-list.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with &lt;amp-live-list&gt;" timestamp="2021-04-28T22:13:33" tests="2" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-live-list.js" time="80.0020" failures="2">
    <testcase name="amp-bind chrome  Shadow environment    with &lt;amp-live-list&gt; should detect bindings in initial live-list elements" time="40.0010" classname="should detect bindings in initial live-list elements">
      <failure message="Timeout of 40000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-live-list.js)" type="Error"><![CDATA[Error: Timeout of 40000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-live-list.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
    <testcase name="amp-bind chrome  Shadow environment    with &lt;amp-live-list&gt; should detect bindings in initial live-list elements" time="40.0010" classname="should detect bindings in initial live-list elements">
      <failure message="expected &apos;unbound&apos; to equal &apos;hello world&apos;" type="AssertionError"><![CDATA[AssertionError: expected 'unbound' to equal 'hello world'
    at valueSatisfiesExpectation (build-system/tasks/e2e/expect.js:376:18)
    at conditionValue (build-system/tasks/e2e/selenium-webdriver-controller.js:123:30)
    at _callee$ (build-system/tasks/e2e/selenium-webdriver-controller.js:87:46)
    at tryCatch (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:61:40)
    at GeneratorFunctionPrototype.invoke [as _invoke] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:329:22)
    at GeneratorFunctionPrototype.prototype.<computed> [as next] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:94:21)
    at asyncGeneratorStep (build-system/tasks/e2e/selenium-webdriver-controller.js:11:103)
    at _next (build-system/tasks/e2e/selenium-webdriver-controller.js:13:194)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-bind" timestamp="2021-04-28T22:14:14" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:14:14" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:14:14" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:14:14" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="+ amp-state" timestamp="2021-04-28T22:14:14" tests="2" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="80.0020" failures="2">
    <testcase name="amp-bind chrome  Standalone environment    + amp-state should update text" time="40.0010" classname="should update text">
      <failure message="Timeout of 40000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js)" type="Error"><![CDATA[Error: Timeout of 40000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
    <testcase name="amp-bind chrome  Standalone environment    + amp-state should update text" time="40.0010" classname="should update text">
      <failure message="expected &apos;hello&apos; to equal &apos;world&apos;" type="AssertionError"><![CDATA[AssertionError: expected 'hello' to equal 'world'
    at valueSatisfiesExpectation (build-system/tasks/e2e/expect.js:376:18)
    at conditionValue (build-system/tasks/e2e/selenium-webdriver-controller.js:123:30)
    at _callee$ (build-system/tasks/e2e/selenium-webdriver-controller.js:87:46)
    at tryCatch (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:61:40)
    at GeneratorFunctionPrototype.invoke [as _invoke] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:329:22)
    at GeneratorFunctionPrototype.prototype.<computed> [as next] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:94:21)
    at asyncGeneratorStep (build-system/tasks/e2e/selenium-webdriver-controller.js:11:103)
    at _next (build-system/tasks/e2e/selenium-webdriver-controller.js:13:194)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T22:14:55" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:14:55" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="+ amp-state" timestamp="2021-04-28T22:14:55" tests="2" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="23.2610" failures="1">
    <testcase name="amp-bind chrome  Viewer environment  &quot;before each&quot; hook for &quot;should update text&quot;" time="23.2610" classname="&quot;before each&quot; hook for &quot;should update text&quot;">
      <failure message="Waiting for element to be located #viewer[data-loaded]
Wait timed out after 5201ms
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;Viewer&lt;/title&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui&quot;&gt;
    &lt;script src=&quot;/dist/v0/examples/amp-viewer-host.js&quot;&gt;&lt;/script&gt;
    &lt;style&gt;
      body, #viewer {
        margin: 0;
        border: 0;
        padding: 0;
      }
      body,.fill {
        position: absolute;
        height: 100%;
        width: 100%;
      }
    &lt;/style&gt;
    &lt;script&gt;
      var viewer = null;
      function Viewer(url, opt_caps, simulateEmail = false) {
        this.id = &apos;viewer&apos;;
        this.url = url;
        this.stackIndex_ = 0;
        this.prerenderSize_ = 1;
        this.csi_ = 1;
        this.caps_ =
          opt_caps || &apos;a2a,focus-rect,foo,keyboard,swipe,iframeScroll&apos;;
        this.receivedMessages = [];
        this.simulateEmail = simulateEmail;

        this.container = document.body;
        this.iframe = document.createElement(&apos;iframe&apos;);
        this.iframe.setAttribute(&apos;id&apos;, this.id);
        this.iframe.setAttribute(
          &apos;sandbox&apos;,
          &apos;allow-popups allow-scripts allow-forms allow-pointer-lock&apos; +
            &apos; allow-popups-to-escape-sandbox allow-same-origin&apos;
        );
        this.iframe.setAttribute(&apos;scrolling&apos;, &apos;yes&apos;);

        if (simulateEmail) {
          this.iframe.setAttribute(&apos;height&apos;, &apos;0&apos;);
          this.iframe.setAttribute(&apos;width&apos;, &apos;0&apos;);
        } else {
          this.iframe.classList.add(&apos;fill&apos;);
        }

        window.addEventListener(&apos;resize&apos;, this.onResize_.bind(this));
        window.addEventListener(&apos;popstate&apos;, this.onPopState_.bind(this));

        this.start();
      }

      Viewer.prototype.start = function () {
        var params = {
          history: 1,
          width: this.container./*OK*/ offsetWidth,
          height: this.container./*OK*/ offsetHeight,
          prerenderSize: this.prerenderSize_,
          origin: parseUrlDeprecated(window.location.href).origin,
          csi: this.csi_,
          cap: this.caps_,
        };
        log(&apos;Params:&apos; + JSON.stringify(params));

        var inputUrl = this.url + &apos;#&apos; + paramsStr(params);
        if (window.location.hash &amp;&amp; window.location.hash.length &gt; 1) {
          inputUrl += &apos;&amp;&apos; + window.location.hash.substring(1);
        }
        var parsedUrl = parseUrlDeprecated(inputUrl);
        var url = parsedUrl.href;
        this.frameOrigin_ = parsedUrl.origin;
        log(&apos;AMP URL = &apos;, url);
        this.container.appendChild(this.iframe);

        this.ampViewerHost_ = new AmpViewerHost(
          window,
          this.iframe,
          this.frameOrigin_,
          this.processRequest_.bind(this),
          /* logs id */ this.id
        );

        setTimeout(
          function () {
            this.iframe.setAttribute(&apos;src&apos;, url);
          }.bind(this)
        );
      };

      Viewer.prototype.documentReady_ = function () {
        log(&apos;AMP document ready&apos;);
        this.iframe.dataset[&apos;loaded&apos;] = &apos;&apos;;
        return Promise.resolve();
      };

      Viewer.prototype.onScroll_ = function () {
        log(&apos;Viewer.prototype.onScroll_&apos;);
        this.ampViewerHost_.sendRequest(
          &apos;viewport&apos;,
          {
            scrollTop: this.container./*OK*/ scrollTop,
          },
          false
        );
      };

      Viewer.prototype.onResize_ = function () {
        log(
          &apos;Resized to &apos;,
          this.container./*OK*/ offsetWidth,
          this.container./*OK*/ offsetHeight,
          this.container./*OK*/ scrollTop
        );
        this.ampViewerHost_.sendRequest(
          &apos;viewport&apos;,
          {
            scrollTop: this.container./*OK*/ scrollTop,
            width: this.container./*OK*/ offsetWidth,
            height: this.container./*OK*/ offsetHeight,
          },
          false
        );
      };

      Viewer.prototype.pushHistory_ = function (stackIndex) {
        log(&apos;push history to &apos;, stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_ + 1) {
          throw new Error(&apos;Only one step push allowed&apos;);
        }
        this.stackIndex_ = stackIndex;
        window.history.pushState({}, &apos;&apos;);
        return Promise.resolve();
      };

      Viewer.prototype.popHistory_ = function (stackIndex) {
        log(&apos;pop history at &apos;, stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_) {
          throw new Error(&apos;Only one step pop allowed&apos;);
        }
        this.stackIndex_ = stackIndex;
        window.history.go(-1);
        return Promise.resolve();
      };

      Viewer.prototype.onPopState_ = function () {
        // Even more trivial. Always assumes that only one step was popped in
        // history.
        this.stackIndex_--;
        this.ampViewerHost_.sendRequest(
          &apos;historyPopped&apos;,
          {
            newStackIndex: this.stackIndex_,
          },
          false
        );
        log(&apos;history popped to &apos;, this.stackIndex_);
      };

      Viewer.prototype.scrollAmpDoc = function (scrollTop) {
        log(&apos;viewer scroll amp doc: &apos;, scrollTop);
        this.ampViewerHost_.sendRequest(&apos;scroll&apos;, {scrollTop: scrollTop}, true);
      };

      Viewer.prototype.processRequest_ = function (name, data, awaitResponse) {
        log(&apos;Viewer.prototype.processRequest_&apos;, name);
        this.receivedMessages.push({name, data});
        switch (name) {
          case &apos;documentLoaded&apos;:
            return this.documentReady_();
          case &apos;pushHistory&apos;:
            return this.pushHistory_(data.stackIndex);
          case &apos;popHistory&apos;:
            return this.popHistory_(data.stackIndex);
          case &apos;documentHeight&apos;:
            if (this.simulateEmail) {
              const {height} = data;
              this.iframe.style.height = height + &apos;px&apos;;
              this.iframe.removeAttribute(&apos;width&apos;);
            }
            return Promise.resolve();
          case &apos;broadcast&apos;:
          case &apos;bindReady&apos;:
          case &apos;focusin&apos;:
          case &apos;requestFullOverlay&apos;:
          case &apos;cancelFullOverlay&apos;:
          case &apos;unloaded&apos;:
          case &apos;tick&apos;:
          case &apos;a2aNavigate&apos;:
          case &apos;sendCsi&apos;:
          case &apos;touchstart&apos;:
          case &apos;touchmove&apos;:
          case &apos;touchend&apos;:
          case &apos;setFlushParams&apos;:
          case &apos;prerenderComplete&apos;:
          case &apos;scroll&apos;:
          case &apos;replaceHistory&apos;:
          case &apos;visibilitychange&apos;:
            return Promise.resolve();
          case &apos;xhr&apos;:
          case &apos;viewerRenderTemplate&apos;:
          default:
            return Promise.reject(&apos;Request not supported: &apos;, name);
        }
      };

      function log() {
        var var_args = Array.prototype.slice.call(arguments, 0);
        var_args.unshift(&apos;[VIEWER]&apos;);
        console /*OK*/.log
          .apply(console, var_args);
      }

      function parseUrlDeprecated(urlString) {
        var a = document.createElement(&apos;a&apos;);
        a.href = urlString;
        return {
          href: a.href,
          protocol: a.protocol,
          host: a.host,
          hostname: a.hostname,
          port: a.port == &apos;0&apos; ? &apos;&apos; : a.port,
          pathname: a.pathname,
          search: a.search,
          hash: a.hash,
          origin: a.protocol + &apos;//&apos; + a.host,
        };
      }

      function paramsStr(params) {
        var s = &apos;&apos;;
        for (var k in params) {
          var v = params[k];
          if (v === null || v === undefined) {
            continue;
          }
          if (s.length &gt; 0) {
            s += &apos;&amp;&apos;;
          }
          s += encodeURIComponent(k) + &apos;=&apos; + encodeURIComponent(v);
        }
        return s;
      }

      /**
       * Parses the query string of an URL. This method returns a simple key/value
       * map. If there are duplicate keys the latest value is returned.
       * @param {string} queryString
       * @return {!Object&lt;string&gt;}
       */
      function parseQueryString(queryString) {
        const params = Object.create(null);
        if (!queryString) {
          return params;
        }
        if (startsWith(queryString, &apos;?&apos;) || startsWith(queryString, &apos;#&apos;)) {
          queryString = queryString.substr(1);
        }
        const pairs = queryString.split(&apos;&amp;&apos;);
        for (let i = 0; i &lt; pairs.length; i++) {
          const pair = pairs[i];
          const eqIndex = pair.indexOf(&apos;=&apos;);
          let name;
          let value;
          if (eqIndex != -1) {
            name = decodeURIComponent(pair.substring(0, eqIndex)).trim();
            value = decodeURIComponent(pair.substring(eqIndex + 1)).trim();
          } else {
            name = decodeURIComponent(pair).trim();
            value = &apos;&apos;;
          }
          if (name) {
            params[name] = value;
          }
        }
        return params;
      }

      function startsWith(string, prefix) {
        return string.lastIndexOf(prefix, 0) == 0;
      }

      /**
       * @param {string} url
       * @param {string} param
       * @param {*} value
       * @return {string}
       */
      function addQueryParam(url, param, value) {
        const paramValue =
          encodeURIComponent(param) + &apos;=&apos; + encodeURIComponent(value);
        if (!url.includes(&apos;?&apos;)) {
          url += &apos;?&apos; + paramValue;
        } else {
          url += &apos;&amp;&apos; + paramValue;
        }
        return url;
      }

      function loadAmpDoc() {
        const hash = window.location.hash;
        const hashParams = parseQueryString(hash);
        const href = hashParams[&apos;href&apos;];
        const caps = hashParams[&apos;caps&apos;];
        const isEmail = &apos;true&apos; === hashParams[&apos;isEmail&apos;];

        viewer = new Viewer(
          addQueryParam(href, &apos;amp_js_v&apos;, &apos;0.1&apos;),
          caps,
          isEmail
        );
      }
      window.onload = loadAmpDoc;
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;

&lt;iframe id=&quot;viewer&quot; sandbox=&quot;allow-popups allow-scripts allow-forms allow-pointer-lock allow-popups-to-escape-sandbox allow-same-origin&quot; scrolling=&quot;yes&quot; class=&quot;fill&quot;&gt;&lt;/iframe&gt;&lt;/body&gt;" type="Error"><![CDATA[Error: Waiting for element to be located #viewer[data-loaded]
Wait timed out after 5201ms
<head>
    <meta charset="utf-8">
    <title>Viewer</title>
    <meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui">
    <script src="/dist/v0/examples/amp-viewer-host.js"></script>
    <style>
      body, #viewer {
        margin: 0;
        border: 0;
        padding: 0;
      }
      body,.fill {
        position: absolute;
        height: 100%;
        width: 100%;
      }
    </style>
    <script>
      var viewer = null;
      function Viewer(url, opt_caps, simulateEmail = false) {
        this.id = 'viewer';
        this.url = url;
        this.stackIndex_ = 0;
        this.prerenderSize_ = 1;
        this.csi_ = 1;
        this.caps_ =
          opt_caps || 'a2a,focus-rect,foo,keyboard,swipe,iframeScroll';
        this.receivedMessages = [];
        this.simulateEmail = simulateEmail;

        this.container = document.body;
        this.iframe = document.createElement('iframe');
        this.iframe.setAttribute('id', this.id);
        this.iframe.setAttribute(
          'sandbox',
          'allow-popups allow-scripts allow-forms allow-pointer-lock' +
            ' allow-popups-to-escape-sandbox allow-same-origin'
        );
        this.iframe.setAttribute('scrolling', 'yes');

        if (simulateEmail) {
          this.iframe.setAttribute('height', '0');
          this.iframe.setAttribute('width', '0');
        } else {
          this.iframe.classList.add('fill');
        }

        window.addEventListener('resize', this.onResize_.bind(this));
        window.addEventListener('popstate', this.onPopState_.bind(this));

        this.start();
      }

      Viewer.prototype.start = function () {
        var params = {
          history: 1,
          width: this.container./*OK*/ offsetWidth,
          height: this.container./*OK*/ offsetHeight,
          prerenderSize: this.prerenderSize_,
          origin: parseUrlDeprecated(window.location.href).origin,
          csi: this.csi_,
          cap: this.caps_,
        };
        log('Params:' + JSON.stringify(params));

        var inputUrl = this.url + '#' + paramsStr(params);
        if (window.location.hash && window.location.hash.length > 1) {
          inputUrl += '&' + window.location.hash.substring(1);
        }
        var parsedUrl = parseUrlDeprecated(inputUrl);
        var url = parsedUrl.href;
        this.frameOrigin_ = parsedUrl.origin;
        log('AMP URL = ', url);
        this.container.appendChild(this.iframe);

        this.ampViewerHost_ = new AmpViewerHost(
          window,
          this.iframe,
          this.frameOrigin_,
          this.processRequest_.bind(this),
          /* logs id */ this.id
        );

        setTimeout(
          function () {
            this.iframe.setAttribute('src', url);
          }.bind(this)
        );
      };

      Viewer.prototype.documentReady_ = function () {
        log('AMP document ready');
        this.iframe.dataset['loaded'] = '';
        return Promise.resolve();
      };

      Viewer.prototype.onScroll_ = function () {
        log('Viewer.prototype.onScroll_');
        this.ampViewerHost_.sendRequest(
          'viewport',
          {
            scrollTop: this.container./*OK*/ scrollTop,
          },
          false
        );
      };

      Viewer.prototype.onResize_ = function () {
        log(
          'Resized to ',
          this.container./*OK*/ offsetWidth,
          this.container./*OK*/ offsetHeight,
          this.container./*OK*/ scrollTop
        );
        this.ampViewerHost_.sendRequest(
          'viewport',
          {
            scrollTop: this.container./*OK*/ scrollTop,
            width: this.container./*OK*/ offsetWidth,
            height: this.container./*OK*/ offsetHeight,
          },
          false
        );
      };

      Viewer.prototype.pushHistory_ = function (stackIndex) {
        log('push history to ', stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_ + 1) {
          throw new Error('Only one step push allowed');
        }
        this.stackIndex_ = stackIndex;
        window.history.pushState({}, '');
        return Promise.resolve();
      };

      Viewer.prototype.popHistory_ = function (stackIndex) {
        log('pop history at ', stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_) {
          throw new Error('Only one step pop allowed');
        }
        this.stackIndex_ = stackIndex;
        window.history.go(-1);
        return Promise.resolve();
      };

      Viewer.prototype.onPopState_ = function () {
        // Even more trivial. Always assumes that only one step was popped in
        // history.
        this.stackIndex_--;
        this.ampViewerHost_.sendRequest(
          'historyPopped',
          {
            newStackIndex: this.stackIndex_,
          },
          false
        );
        log('history popped to ', this.stackIndex_);
      };

      Viewer.prototype.scrollAmpDoc = function (scrollTop) {
        log('viewer scroll amp doc: ', scrollTop);
        this.ampViewerHost_.sendRequest('scroll', {scrollTop: scrollTop}, true);
      };

      Viewer.prototype.processRequest_ = function (name, data, awaitResponse) {
        log('Viewer.prototype.processRequest_', name);
        this.receivedMessages.push({name, data});
        switch (name) {
          case 'documentLoaded':
            return this.documentReady_();
          case 'pushHistory':
            return this.pushHistory_(data.stackIndex);
          case 'popHistory':
            return this.popHistory_(data.stackIndex);
          case 'documentHeight':
            if (this.simulateEmail) {
              const {height} = data;
              this.iframe.style.height = height + 'px';
              this.iframe.removeAttribute('width');
            }
            return Promise.resolve();
          case 'broadcast':
          case 'bindReady':
          case 'focusin':
          case 'requestFullOverlay':
          case 'cancelFullOverlay':
          case 'unloaded':
          case 'tick':
          case 'a2aNavigate':
          case 'sendCsi':
          case 'touchstart':
          case 'touchmove':
          case 'touchend':
          case 'setFlushParams':
          case 'prerenderComplete':
          case 'scroll':
          case 'replaceHistory':
          case 'visibilitychange':
            return Promise.resolve();
          case 'xhr':
          case 'viewerRenderTemplate':
          default:
            return Promise.reject('Request not supported: ', name);
        }
      };

      function log() {
        var var_args = Array.prototype.slice.call(arguments, 0);
        var_args.unshift('[VIEWER]');
        console /*OK*/.log
          .apply(console, var_args);
      }

      function parseUrlDeprecated(urlString) {
        var a = document.createElement('a');
        a.href = urlString;
        return {
          href: a.href,
          protocol: a.protocol,
          host: a.host,
          hostname: a.hostname,
          port: a.port == '0' ? '' : a.port,
          pathname: a.pathname,
          search: a.search,
          hash: a.hash,
          origin: a.protocol + '//' + a.host,
        };
      }

      function paramsStr(params) {
        var s = '';
        for (var k in params) {
          var v = params[k];
          if (v === null || v === undefined) {
            continue;
          }
          if (s.length > 0) {
            s += '&';
          }
          s += encodeURIComponent(k) + '=' + encodeURIComponent(v);
        }
        return s;
      }

      /**
       * Parses the query string of an URL. This method returns a simple key/value
       * map. If there are duplicate keys the latest value is returned.
       * @param {string} queryString
       * @return {!Object<string>}
       */
      function parseQueryString(queryString) {
        const params = Object.create(null);
        if (!queryString) {
          return params;
        }
        if (startsWith(queryString, '?') || startsWith(queryString, '#')) {
          queryString = queryString.substr(1);
        }
        const pairs = queryString.split('&');
        for (let i = 0; i < pairs.length; i++) {
          const pair = pairs[i];
          const eqIndex = pair.indexOf('=');
          let name;
          let value;
          if (eqIndex != -1) {
            name = decodeURIComponent(pair.substring(0, eqIndex)).trim();
            value = decodeURIComponent(pair.substring(eqIndex + 1)).trim();
          } else {
            name = decodeURIComponent(pair).trim();
            value = '';
          }
          if (name) {
            params[name] = value;
          }
        }
        return params;
      }

      function startsWith(string, prefix) {
        return string.lastIndexOf(prefix, 0) == 0;
      }

      /**
       * @param {string} url
       * @param {string} param
       * @param {*} value
       * @return {string}
       */
      function addQueryParam(url, param, value) {
        const paramValue =
          encodeURIComponent(param) + '=' + encodeURIComponent(value);
        if (!url.includes('?')) {
          url += '?' + paramValue;
        } else {
          url += '&' + paramValue;
        }
        return url;
      }

      function loadAmpDoc() {
        const hash = window.location.hash;
        const hashParams = parseQueryString(hash);
        const href = hashParams['href'];
        const caps = hashParams['caps'];
        const isEmail = 'true' === hashParams['isEmail'];

        viewer = new Viewer(
          addQueryParam(href, 'amp_js_v', '0.1'),
          caps,
          isEmail
        );
      }
      window.onload = loadAmpDoc;
    </script>
  </head>
  <body>

<iframe id="viewer" sandbox="allow-popups allow-scripts allow-forms allow-pointer-lock allow-popups-to-escape-sandbox allow-same-origin" scrolling="yes" class="fill"></iframe></body>
    at AmpDriver._callee7$ (build-system/tasks/e2e/amp-driver.js:321:23)
    at tryCatch (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:61:40)
    at GeneratorFunctionPrototype.invoke [as _invoke] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:329:22)
    at GeneratorFunctionPrototype.prototype.<computed> [as next] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:94:21)
    at asyncGeneratorStep (build-system/tasks/e2e/amp-driver.js:13:103)
    at _next (build-system/tasks/e2e/amp-driver.js:15:194)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Shadow environment " timestamp="2021-04-28T22:15:18" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:15:18" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="+ amp-state" timestamp="2021-04-28T22:15:18" tests="2" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="80.0100" failures="2">
    <testcase name="amp-bind chrome  Shadow environment    + amp-state should update text" time="40.0050" classname="should update text">
      <failure message="Timeout of 40000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js)" type="Error"><![CDATA[Error: Timeout of 40000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
    <testcase name="amp-bind chrome  Shadow environment    + amp-state should update text" time="40.0050" classname="should update text">
      <failure message="expected &apos;hello&apos; to equal &apos;world&apos;" type="AssertionError"><![CDATA[AssertionError: expected 'hello' to equal 'world'
    at valueSatisfiesExpectation (build-system/tasks/e2e/expect.js:376:18)
    at conditionValue (build-system/tasks/e2e/selenium-webdriver-controller.js:123:30)
    at _callee$ (build-system/tasks/e2e/selenium-webdriver-controller.js:87:46)
    at tryCatch (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:61:40)
    at GeneratorFunctionPrototype.invoke [as _invoke] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:329:22)
    at GeneratorFunctionPrototype.prototype.<computed> [as next] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:94:21)
    at asyncGeneratorStep (build-system/tasks/e2e/selenium-webdriver-controller.js:11:103)
    at _next (build-system/tasks/e2e/selenium-webdriver-controller.js:13:194)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads FIE environment " timestamp="2021-04-28T22:15:59" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:15:59" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="+ amp-state" timestamp="2021-04-28T22:15:59" tests="2" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="23.1120" failures="1">
    <testcase name="amp-bind chrome  AMPHTML ads FIE environment  &quot;before each&quot; hook for &quot;should update text&quot;" time="23.1120" classname="&quot;before each&quot; hook for &quot;should update text&quot;">
      <failure message="Waiting for element to be located amp-ad &gt; iframe
Wait timed out after 5166ms
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;title&gt;A4A Envelope&lt;/title&gt;
  &lt;link rel=&quot;canonical&quot; href=&quot;http://nonblocking.io/&quot;&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,minimum-scale=1,initial-scale=1&quot;&gt;
  &lt;script async=&quot;&quot; src=&quot;/dist/v0.js&quot;&gt;&lt;/script&gt;
  &lt;script async=&quot;&quot; custom-element=&quot;amp-ad&quot; src=&quot;/dist/v0/amp-ad-0.1.js&quot;&gt;&lt;/script&gt;
  &lt;style amp-custom=&quot;&quot;&gt;
    #ad-url {
      height: 18px;
      overflow: hidden;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1 id=&quot;title&quot;&gt;A4A Envelope&lt;/h1&gt;
  &lt;div id=&quot;ad-url&quot;&gt;url: http://ads.localhost:8000/test/fixtures/e2e/amp-bind/bind-basic.html?inabox=1&lt;/div&gt;
  &lt;div&gt;size: 300x250&lt;/div&gt;

  &lt;div style=&quot;background: #eee; overflow: hidden; height: 0px;&quot;&gt;scroll down to see the ad&lt;/div&gt;

  &lt;amp-ad width=&quot;300&quot; height=&quot;250&quot; id=&quot;i-amphtml-demo-id&quot; type=&quot;fake&quot; a4a-conversion=&quot;true&quot; checksig=&quot;&quot; disable3pfallback=&quot;true&quot; data-experiment-id=&quot;&quot; src=&quot;http://ads.localhost:8000/test/fixtures/e2e/amp-bind/bind-basic.html?inabox=1&quot;&gt;
  &lt;/amp-ad&gt;

  &lt;div style=&quot;background: #eee; overflow: hidden;; height: 100vh;&quot;&gt;&lt;/div&gt;


&lt;/body&gt;" type="Error"><![CDATA[Error: Waiting for element to be located amp-ad > iframe
Wait timed out after 5166ms
<head>
  <meta charset="utf-8">
  <title>A4A Envelope</title>
  <link rel="canonical" href="http://nonblocking.io/">
  <meta name="viewport" content="width=device-width,minimum-scale=1,initial-scale=1">
  <script async="" src="/dist/v0.js"></script>
  <script async="" custom-element="amp-ad" src="/dist/v0/amp-ad-0.1.js"></script>
  <style amp-custom="">
    #ad-url {
      height: 18px;
      overflow: hidden;
    }
  </style>
</head>
<body>
  <h1 id="title">A4A Envelope</h1>
  <div id="ad-url">url: http://ads.localhost:8000/test/fixtures/e2e/amp-bind/bind-basic.html?inabox=1</div>
  <div>size: 300x250</div>

  <div style="background: #eee; overflow: hidden; height: 0px;">scroll down to see the ad</div>

  <amp-ad width="300" height="250" id="i-amphtml-demo-id" type="fake" a4a-conversion="true" checksig="" disable3pfallback="true" data-experiment-id="" src="http://ads.localhost:8000/test/fixtures/e2e/amp-bind/bind-basic.html?inabox=1">
  </amp-ad>

  <div style="background: #eee; overflow: hidden;; height: 100vh;"></div>


</body>
    at AmpDriver._callee7$ (build-system/tasks/e2e/amp-driver.js:321:23)
    at tryCatch (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:61:40)
    at GeneratorFunctionPrototype.invoke [as _invoke] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:329:22)
    at GeneratorFunctionPrototype.prototype.<computed> [as next] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:94:21)
    at asyncGeneratorStep (build-system/tasks/e2e/amp-driver.js:13:103)
    at _next (build-system/tasks/e2e/amp-driver.js:15:194)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox environment " timestamp="2021-04-28T22:16:22" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:16:22" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="+ amp-state" timestamp="2021-04-28T22:16:22" tests="2" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="80.0020" failures="2">
    <testcase name="amp-bind chrome  AMPHTML ads inabox environment    + amp-state should update text" time="40.0010" classname="should update text">
      <failure message="Timeout of 40000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js)" type="Error"><![CDATA[Error: Timeout of 40000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
    <testcase name="amp-bind chrome  AMPHTML ads inabox environment    + amp-state should update text" time="40.0010" classname="should update text">
      <failure message="expected &apos;hello&apos; to equal &apos;world&apos;" type="AssertionError"><![CDATA[AssertionError: expected 'hello' to equal 'world'
    at valueSatisfiesExpectation (build-system/tasks/e2e/expect.js:376:18)
    at conditionValue (build-system/tasks/e2e/selenium-webdriver-controller.js:123:30)
    at _callee$ (build-system/tasks/e2e/selenium-webdriver-controller.js:87:46)
    at tryCatch (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:61:40)
    at GeneratorFunctionPrototype.invoke [as _invoke] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:329:22)
    at GeneratorFunctionPrototype.prototype.<computed> [as next] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:94:21)
    at asyncGeneratorStep (build-system/tasks/e2e/selenium-webdriver-controller.js:11:103)
    at _next (build-system/tasks/e2e/selenium-webdriver-controller.js:13:194)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox friendly frame environment " timestamp="2021-04-28T22:17:03" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:17:03" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="+ amp-state" timestamp="2021-04-28T22:17:03" tests="2" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="80.0020" failures="2">
    <testcase name="amp-bind chrome  AMPHTML ads inabox friendly frame environment    + amp-state should update text" time="40.0010" classname="should update text">
      <failure message="Timeout of 40000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js)" type="Error"><![CDATA[Error: Timeout of 40000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
    <testcase name="amp-bind chrome  AMPHTML ads inabox friendly frame environment    + amp-state should update text" time="40.0010" classname="should update text">
      <failure message="expected &apos;hello&apos; to equal &apos;world&apos;" type="AssertionError"><![CDATA[AssertionError: expected 'hello' to equal 'world'
    at valueSatisfiesExpectation (build-system/tasks/e2e/expect.js:376:18)
    at conditionValue (build-system/tasks/e2e/selenium-webdriver-controller.js:123:30)
    at _callee$ (build-system/tasks/e2e/selenium-webdriver-controller.js:87:46)
    at tryCatch (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:61:40)
    at GeneratorFunctionPrototype.invoke [as _invoke] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:329:22)
    at GeneratorFunctionPrototype.prototype.<computed> [as next] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:94:21)
    at asyncGeneratorStep (build-system/tasks/e2e/selenium-webdriver-controller.js:11:103)
    at _next (build-system/tasks/e2e/selenium-webdriver-controller.js:13:194)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox safeframe environment " timestamp="2021-04-28T22:17:44" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:17:44" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="+ amp-state" timestamp="2021-04-28T22:17:44" tests="2" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js" time="80.0120" failures="2">
    <testcase name="amp-bind chrome  AMPHTML ads inabox safeframe environment    + amp-state should update text" time="40.0060" classname="should update text">
      <failure message="Timeout of 40000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js)" type="Error"><![CDATA[Error: Timeout of 40000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-state.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
    <testcase name="amp-bind chrome  AMPHTML ads inabox safeframe environment    + amp-state should update text" time="40.0060" classname="should update text">
      <failure message="expected &apos;hello&apos; to equal &apos;world&apos;" type="AssertionError"><![CDATA[AssertionError: expected 'hello' to equal 'world'
    at valueSatisfiesExpectation (build-system/tasks/e2e/expect.js:376:18)
    at conditionValue (build-system/tasks/e2e/selenium-webdriver-controller.js:123:30)
    at _callee$ (build-system/tasks/e2e/selenium-webdriver-controller.js:87:46)
    at tryCatch (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:61:40)
    at GeneratorFunctionPrototype.invoke [as _invoke] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:329:22)
    at GeneratorFunctionPrototype.prototype.<computed> [as next] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:94:21)
    at asyncGeneratorStep (build-system/tasks/e2e/selenium-webdriver-controller.js:11:103)
    at _next (build-system/tasks/e2e/selenium-webdriver-controller.js:13:194)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-bind with &lt;amp-video&gt;" timestamp="2021-04-28T22:18:24" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:18:24" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:18:24" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:18:24" tests="5" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js" time="0.1650" failures="5">
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  Standalone environment    should support binding to src" time="0.0310" classname="should support binding to src">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  Standalone environment    should NOT change src when new value is a blocked URL" time="0.0310" classname="should NOT change src when new value is a blocked URL">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  Standalone environment    should NOT change src when new value uses an invalid protocol" time="0.0320" classname="should NOT change src when new value uses an invalid protocol">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  Standalone environment    should change alt when the alt attribute binding changes" time="0.0310" classname="should change alt when the alt attribute binding changes">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  Standalone environment    should show/hide vid controls when the control binding changes" time="0.0400" classname="should show/hide vid controls when the control binding changes">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T22:18:27" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:18:27" tests="5" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js" time="23.5300" failures="1">
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  Viewer environment  &quot;before each&quot; hook for &quot;should support binding to src&quot;" time="23.5300" classname="&quot;before each&quot; hook for &quot;should support binding to src&quot;">
      <failure message="Waiting for element to be located #viewer[data-loaded]
Wait timed out after 5207ms
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;Viewer&lt;/title&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui&quot;&gt;
    &lt;script src=&quot;/dist/v0/examples/amp-viewer-host.js&quot;&gt;&lt;/script&gt;
    &lt;style&gt;
      body, #viewer {
        margin: 0;
        border: 0;
        padding: 0;
      }
      body,.fill {
        position: absolute;
        height: 100%;
        width: 100%;
      }
    &lt;/style&gt;
    &lt;script&gt;
      var viewer = null;
      function Viewer(url, opt_caps, simulateEmail = false) {
        this.id = &apos;viewer&apos;;
        this.url = url;
        this.stackIndex_ = 0;
        this.prerenderSize_ = 1;
        this.csi_ = 1;
        this.caps_ =
          opt_caps || &apos;a2a,focus-rect,foo,keyboard,swipe,iframeScroll&apos;;
        this.receivedMessages = [];
        this.simulateEmail = simulateEmail;

        this.container = document.body;
        this.iframe = document.createElement(&apos;iframe&apos;);
        this.iframe.setAttribute(&apos;id&apos;, this.id);
        this.iframe.setAttribute(
          &apos;sandbox&apos;,
          &apos;allow-popups allow-scripts allow-forms allow-pointer-lock&apos; +
            &apos; allow-popups-to-escape-sandbox allow-same-origin&apos;
        );
        this.iframe.setAttribute(&apos;scrolling&apos;, &apos;yes&apos;);

        if (simulateEmail) {
          this.iframe.setAttribute(&apos;height&apos;, &apos;0&apos;);
          this.iframe.setAttribute(&apos;width&apos;, &apos;0&apos;);
        } else {
          this.iframe.classList.add(&apos;fill&apos;);
        }

        window.addEventListener(&apos;resize&apos;, this.onResize_.bind(this));
        window.addEventListener(&apos;popstate&apos;, this.onPopState_.bind(this));

        this.start();
      }

      Viewer.prototype.start = function () {
        var params = {
          history: 1,
          width: this.container./*OK*/ offsetWidth,
          height: this.container./*OK*/ offsetHeight,
          prerenderSize: this.prerenderSize_,
          origin: parseUrlDeprecated(window.location.href).origin,
          csi: this.csi_,
          cap: this.caps_,
        };
        log(&apos;Params:&apos; + JSON.stringify(params));

        var inputUrl = this.url + &apos;#&apos; + paramsStr(params);
        if (window.location.hash &amp;&amp; window.location.hash.length &gt; 1) {
          inputUrl += &apos;&amp;&apos; + window.location.hash.substring(1);
        }
        var parsedUrl = parseUrlDeprecated(inputUrl);
        var url = parsedUrl.href;
        this.frameOrigin_ = parsedUrl.origin;
        log(&apos;AMP URL = &apos;, url);
        this.container.appendChild(this.iframe);

        this.ampViewerHost_ = new AmpViewerHost(
          window,
          this.iframe,
          this.frameOrigin_,
          this.processRequest_.bind(this),
          /* logs id */ this.id
        );

        setTimeout(
          function () {
            this.iframe.setAttribute(&apos;src&apos;, url);
          }.bind(this)
        );
      };

      Viewer.prototype.documentReady_ = function () {
        log(&apos;AMP document ready&apos;);
        this.iframe.dataset[&apos;loaded&apos;] = &apos;&apos;;
        return Promise.resolve();
      };

      Viewer.prototype.onScroll_ = function () {
        log(&apos;Viewer.prototype.onScroll_&apos;);
        this.ampViewerHost_.sendRequest(
          &apos;viewport&apos;,
          {
            scrollTop: this.container./*OK*/ scrollTop,
          },
          false
        );
      };

      Viewer.prototype.onResize_ = function () {
        log(
          &apos;Resized to &apos;,
          this.container./*OK*/ offsetWidth,
          this.container./*OK*/ offsetHeight,
          this.container./*OK*/ scrollTop
        );
        this.ampViewerHost_.sendRequest(
          &apos;viewport&apos;,
          {
            scrollTop: this.container./*OK*/ scrollTop,
            width: this.container./*OK*/ offsetWidth,
            height: this.container./*OK*/ offsetHeight,
          },
          false
        );
      };

      Viewer.prototype.pushHistory_ = function (stackIndex) {
        log(&apos;push history to &apos;, stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_ + 1) {
          throw new Error(&apos;Only one step push allowed&apos;);
        }
        this.stackIndex_ = stackIndex;
        window.history.pushState({}, &apos;&apos;);
        return Promise.resolve();
      };

      Viewer.prototype.popHistory_ = function (stackIndex) {
        log(&apos;pop history at &apos;, stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_) {
          throw new Error(&apos;Only one step pop allowed&apos;);
        }
        this.stackIndex_ = stackIndex;
        window.history.go(-1);
        return Promise.resolve();
      };

      Viewer.prototype.onPopState_ = function () {
        // Even more trivial. Always assumes that only one step was popped in
        // history.
        this.stackIndex_--;
        this.ampViewerHost_.sendRequest(
          &apos;historyPopped&apos;,
          {
            newStackIndex: this.stackIndex_,
          },
          false
        );
        log(&apos;history popped to &apos;, this.stackIndex_);
      };

      Viewer.prototype.scrollAmpDoc = function (scrollTop) {
        log(&apos;viewer scroll amp doc: &apos;, scrollTop);
        this.ampViewerHost_.sendRequest(&apos;scroll&apos;, {scrollTop: scrollTop}, true);
      };

      Viewer.prototype.processRequest_ = function (name, data, awaitResponse) {
        log(&apos;Viewer.prototype.processRequest_&apos;, name);
        this.receivedMessages.push({name, data});
        switch (name) {
          case &apos;documentLoaded&apos;:
            return this.documentReady_();
          case &apos;pushHistory&apos;:
            return this.pushHistory_(data.stackIndex);
          case &apos;popHistory&apos;:
            return this.popHistory_(data.stackIndex);
          case &apos;documentHeight&apos;:
            if (this.simulateEmail) {
              const {height} = data;
              this.iframe.style.height = height + &apos;px&apos;;
              this.iframe.removeAttribute(&apos;width&apos;);
            }
            return Promise.resolve();
          case &apos;broadcast&apos;:
          case &apos;bindReady&apos;:
          case &apos;focusin&apos;:
          case &apos;requestFullOverlay&apos;:
          case &apos;cancelFullOverlay&apos;:
          case &apos;unloaded&apos;:
          case &apos;tick&apos;:
          case &apos;a2aNavigate&apos;:
          case &apos;sendCsi&apos;:
          case &apos;touchstart&apos;:
          case &apos;touchmove&apos;:
          case &apos;touchend&apos;:
          case &apos;setFlushParams&apos;:
          case &apos;prerenderComplete&apos;:
          case &apos;scroll&apos;:
          case &apos;replaceHistory&apos;:
          case &apos;visibilitychange&apos;:
            return Promise.resolve();
          case &apos;xhr&apos;:
          case &apos;viewerRenderTemplate&apos;:
          default:
            return Promise.reject(&apos;Request not supported: &apos;, name);
        }
      };

      function log() {
        var var_args = Array.prototype.slice.call(arguments, 0);
        var_args.unshift(&apos;[VIEWER]&apos;);
        console /*OK*/.log
          .apply(console, var_args);
      }

      function parseUrlDeprecated(urlString) {
        var a = document.createElement(&apos;a&apos;);
        a.href = urlString;
        return {
          href: a.href,
          protocol: a.protocol,
          host: a.host,
          hostname: a.hostname,
          port: a.port == &apos;0&apos; ? &apos;&apos; : a.port,
          pathname: a.pathname,
          search: a.search,
          hash: a.hash,
          origin: a.protocol + &apos;//&apos; + a.host,
        };
      }

      function paramsStr(params) {
        var s = &apos;&apos;;
        for (var k in params) {
          var v = params[k];
          if (v === null || v === undefined) {
            continue;
          }
          if (s.length &gt; 0) {
            s += &apos;&amp;&apos;;
          }
          s += encodeURIComponent(k) + &apos;=&apos; + encodeURIComponent(v);
        }
        return s;
      }

      /**
       * Parses the query string of an URL. This method returns a simple key/value
       * map. If there are duplicate keys the latest value is returned.
       * @param {string} queryString
       * @return {!Object&lt;string&gt;}
       */
      function parseQueryString(queryString) {
        const params = Object.create(null);
        if (!queryString) {
          return params;
        }
        if (startsWith(queryString, &apos;?&apos;) || startsWith(queryString, &apos;#&apos;)) {
          queryString = queryString.substr(1);
        }
        const pairs = queryString.split(&apos;&amp;&apos;);
        for (let i = 0; i &lt; pairs.length; i++) {
          const pair = pairs[i];
          const eqIndex = pair.indexOf(&apos;=&apos;);
          let name;
          let value;
          if (eqIndex != -1) {
            name = decodeURIComponent(pair.substring(0, eqIndex)).trim();
            value = decodeURIComponent(pair.substring(eqIndex + 1)).trim();
          } else {
            name = decodeURIComponent(pair).trim();
            value = &apos;&apos;;
          }
          if (name) {
            params[name] = value;
          }
        }
        return params;
      }

      function startsWith(string, prefix) {
        return string.lastIndexOf(prefix, 0) == 0;
      }

      /**
       * @param {string} url
       * @param {string} param
       * @param {*} value
       * @return {string}
       */
      function addQueryParam(url, param, value) {
        const paramValue =
          encodeURIComponent(param) + &apos;=&apos; + encodeURIComponent(value);
        if (!url.includes(&apos;?&apos;)) {
          url += &apos;?&apos; + paramValue;
        } else {
          url += &apos;&amp;&apos; + paramValue;
        }
        return url;
      }

      function loadAmpDoc() {
        const hash = window.location.hash;
        const hashParams = parseQueryString(hash);
        const href = hashParams[&apos;href&apos;];
        const caps = hashParams[&apos;caps&apos;];
        const isEmail = &apos;true&apos; === hashParams[&apos;isEmail&apos;];

        viewer = new Viewer(
          addQueryParam(href, &apos;amp_js_v&apos;, &apos;0.1&apos;),
          caps,
          isEmail
        );
      }
      window.onload = loadAmpDoc;
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;

&lt;iframe id=&quot;viewer&quot; sandbox=&quot;allow-popups allow-scripts allow-forms allow-pointer-lock allow-popups-to-escape-sandbox allow-same-origin&quot; scrolling=&quot;yes&quot; class=&quot;fill&quot;&gt;&lt;/iframe&gt;&lt;/body&gt;" type="Error"><![CDATA[Error: Waiting for element to be located #viewer[data-loaded]
Wait timed out after 5207ms
<head>
    <meta charset="utf-8">
    <title>Viewer</title>
    <meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui">
    <script src="/dist/v0/examples/amp-viewer-host.js"></script>
    <style>
      body, #viewer {
        margin: 0;
        border: 0;
        padding: 0;
      }
      body,.fill {
        position: absolute;
        height: 100%;
        width: 100%;
      }
    </style>
    <script>
      var viewer = null;
      function Viewer(url, opt_caps, simulateEmail = false) {
        this.id = 'viewer';
        this.url = url;
        this.stackIndex_ = 0;
        this.prerenderSize_ = 1;
        this.csi_ = 1;
        this.caps_ =
          opt_caps || 'a2a,focus-rect,foo,keyboard,swipe,iframeScroll';
        this.receivedMessages = [];
        this.simulateEmail = simulateEmail;

        this.container = document.body;
        this.iframe = document.createElement('iframe');
        this.iframe.setAttribute('id', this.id);
        this.iframe.setAttribute(
          'sandbox',
          'allow-popups allow-scripts allow-forms allow-pointer-lock' +
            ' allow-popups-to-escape-sandbox allow-same-origin'
        );
        this.iframe.setAttribute('scrolling', 'yes');

        if (simulateEmail) {
          this.iframe.setAttribute('height', '0');
          this.iframe.setAttribute('width', '0');
        } else {
          this.iframe.classList.add('fill');
        }

        window.addEventListener('resize', this.onResize_.bind(this));
        window.addEventListener('popstate', this.onPopState_.bind(this));

        this.start();
      }

      Viewer.prototype.start = function () {
        var params = {
          history: 1,
          width: this.container./*OK*/ offsetWidth,
          height: this.container./*OK*/ offsetHeight,
          prerenderSize: this.prerenderSize_,
          origin: parseUrlDeprecated(window.location.href).origin,
          csi: this.csi_,
          cap: this.caps_,
        };
        log('Params:' + JSON.stringify(params));

        var inputUrl = this.url + '#' + paramsStr(params);
        if (window.location.hash && window.location.hash.length > 1) {
          inputUrl += '&' + window.location.hash.substring(1);
        }
        var parsedUrl = parseUrlDeprecated(inputUrl);
        var url = parsedUrl.href;
        this.frameOrigin_ = parsedUrl.origin;
        log('AMP URL = ', url);
        this.container.appendChild(this.iframe);

        this.ampViewerHost_ = new AmpViewerHost(
          window,
          this.iframe,
          this.frameOrigin_,
          this.processRequest_.bind(this),
          /* logs id */ this.id
        );

        setTimeout(
          function () {
            this.iframe.setAttribute('src', url);
          }.bind(this)
        );
      };

      Viewer.prototype.documentReady_ = function () {
        log('AMP document ready');
        this.iframe.dataset['loaded'] = '';
        return Promise.resolve();
      };

      Viewer.prototype.onScroll_ = function () {
        log('Viewer.prototype.onScroll_');
        this.ampViewerHost_.sendRequest(
          'viewport',
          {
            scrollTop: this.container./*OK*/ scrollTop,
          },
          false
        );
      };

      Viewer.prototype.onResize_ = function () {
        log(
          'Resized to ',
          this.container./*OK*/ offsetWidth,
          this.container./*OK*/ offsetHeight,
          this.container./*OK*/ scrollTop
        );
        this.ampViewerHost_.sendRequest(
          'viewport',
          {
            scrollTop: this.container./*OK*/ scrollTop,
            width: this.container./*OK*/ offsetWidth,
            height: this.container./*OK*/ offsetHeight,
          },
          false
        );
      };

      Viewer.prototype.pushHistory_ = function (stackIndex) {
        log('push history to ', stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_ + 1) {
          throw new Error('Only one step push allowed');
        }
        this.stackIndex_ = stackIndex;
        window.history.pushState({}, '');
        return Promise.resolve();
      };

      Viewer.prototype.popHistory_ = function (stackIndex) {
        log('pop history at ', stackIndex);
        // Super trivial. Only one step allowed.
        if (stackIndex != this.stackIndex_) {
          throw new Error('Only one step pop allowed');
        }
        this.stackIndex_ = stackIndex;
        window.history.go(-1);
        return Promise.resolve();
      };

      Viewer.prototype.onPopState_ = function () {
        // Even more trivial. Always assumes that only one step was popped in
        // history.
        this.stackIndex_--;
        this.ampViewerHost_.sendRequest(
          'historyPopped',
          {
            newStackIndex: this.stackIndex_,
          },
          false
        );
        log('history popped to ', this.stackIndex_);
      };

      Viewer.prototype.scrollAmpDoc = function (scrollTop) {
        log('viewer scroll amp doc: ', scrollTop);
        this.ampViewerHost_.sendRequest('scroll', {scrollTop: scrollTop}, true);
      };

      Viewer.prototype.processRequest_ = function (name, data, awaitResponse) {
        log('Viewer.prototype.processRequest_', name);
        this.receivedMessages.push({name, data});
        switch (name) {
          case 'documentLoaded':
            return this.documentReady_();
          case 'pushHistory':
            return this.pushHistory_(data.stackIndex);
          case 'popHistory':
            return this.popHistory_(data.stackIndex);
          case 'documentHeight':
            if (this.simulateEmail) {
              const {height} = data;
              this.iframe.style.height = height + 'px';
              this.iframe.removeAttribute('width');
            }
            return Promise.resolve();
          case 'broadcast':
          case 'bindReady':
          case 'focusin':
          case 'requestFullOverlay':
          case 'cancelFullOverlay':
          case 'unloaded':
          case 'tick':
          case 'a2aNavigate':
          case 'sendCsi':
          case 'touchstart':
          case 'touchmove':
          case 'touchend':
          case 'setFlushParams':
          case 'prerenderComplete':
          case 'scroll':
          case 'replaceHistory':
          case 'visibilitychange':
            return Promise.resolve();
          case 'xhr':
          case 'viewerRenderTemplate':
          default:
            return Promise.reject('Request not supported: ', name);
        }
      };

      function log() {
        var var_args = Array.prototype.slice.call(arguments, 0);
        var_args.unshift('[VIEWER]');
        console /*OK*/.log
          .apply(console, var_args);
      }

      function parseUrlDeprecated(urlString) {
        var a = document.createElement('a');
        a.href = urlString;
        return {
          href: a.href,
          protocol: a.protocol,
          host: a.host,
          hostname: a.hostname,
          port: a.port == '0' ? '' : a.port,
          pathname: a.pathname,
          search: a.search,
          hash: a.hash,
          origin: a.protocol + '//' + a.host,
        };
      }

      function paramsStr(params) {
        var s = '';
        for (var k in params) {
          var v = params[k];
          if (v === null || v === undefined) {
            continue;
          }
          if (s.length > 0) {
            s += '&';
          }
          s += encodeURIComponent(k) + '=' + encodeURIComponent(v);
        }
        return s;
      }

      /**
       * Parses the query string of an URL. This method returns a simple key/value
       * map. If there are duplicate keys the latest value is returned.
       * @param {string} queryString
       * @return {!Object<string>}
       */
      function parseQueryString(queryString) {
        const params = Object.create(null);
        if (!queryString) {
          return params;
        }
        if (startsWith(queryString, '?') || startsWith(queryString, '#')) {
          queryString = queryString.substr(1);
        }
        const pairs = queryString.split('&');
        for (let i = 0; i < pairs.length; i++) {
          const pair = pairs[i];
          const eqIndex = pair.indexOf('=');
          let name;
          let value;
          if (eqIndex != -1) {
            name = decodeURIComponent(pair.substring(0, eqIndex)).trim();
            value = decodeURIComponent(pair.substring(eqIndex + 1)).trim();
          } else {
            name = decodeURIComponent(pair).trim();
            value = '';
          }
          if (name) {
            params[name] = value;
          }
        }
        return params;
      }

      function startsWith(string, prefix) {
        return string.lastIndexOf(prefix, 0) == 0;
      }

      /**
       * @param {string} url
       * @param {string} param
       * @param {*} value
       * @return {string}
       */
      function addQueryParam(url, param, value) {
        const paramValue =
          encodeURIComponent(param) + '=' + encodeURIComponent(value);
        if (!url.includes('?')) {
          url += '?' + paramValue;
        } else {
          url += '&' + paramValue;
        }
        return url;
      }

      function loadAmpDoc() {
        const hash = window.location.hash;
        const hashParams = parseQueryString(hash);
        const href = hashParams['href'];
        const caps = hashParams['caps'];
        const isEmail = 'true' === hashParams['isEmail'];

        viewer = new Viewer(
          addQueryParam(href, 'amp_js_v', '0.1'),
          caps,
          isEmail
        );
      }
      window.onload = loadAmpDoc;
    </script>
  </head>
  <body>

<iframe id="viewer" sandbox="allow-popups allow-scripts allow-forms allow-pointer-lock allow-popups-to-escape-sandbox allow-same-origin" scrolling="yes" class="fill"></iframe></body>
    at AmpDriver._callee7$ (build-system/tasks/e2e/amp-driver.js:321:23)
    at tryCatch (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:61:40)
    at GeneratorFunctionPrototype.invoke [as _invoke] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:329:22)
    at GeneratorFunctionPrototype.prototype.<computed> [as next] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:94:21)
    at asyncGeneratorStep (build-system/tasks/e2e/amp-driver.js:13:103)
    at _next (build-system/tasks/e2e/amp-driver.js:15:194)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Shadow environment " timestamp="2021-04-28T22:18:51" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:18:51" tests="5" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js" time="240.1200" failures="6">
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  Shadow environment    should support binding to src" time="40.0020" classname="should support binding to src">
      <failure message="Timeout of 40000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js)" type="Error"><![CDATA[Error: Timeout of 40000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  Shadow environment    should support binding to src" time="40.0020" classname="should support binding to src">
      <failure message="expected &apos;https://www.google.com/unbound.webm&apos; to equal &apos;https://www.google.com/bound.webm&apos;" type="AssertionError"><![CDATA[AssertionError: expected 'https://www.google.com/unbound.webm' to equal 'https://www.google.com/bound.webm'
    at valueSatisfiesExpectation (build-system/tasks/e2e/expect.js:376:18)
    at conditionValue (build-system/tasks/e2e/selenium-webdriver-controller.js:123:30)
    at _callee$ (build-system/tasks/e2e/selenium-webdriver-controller.js:87:46)
    at tryCatch (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:61:40)
    at GeneratorFunctionPrototype.invoke [as _invoke] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:329:22)
    at GeneratorFunctionPrototype.prototype.<computed> [as next] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:94:21)
    at asyncGeneratorStep (build-system/tasks/e2e/selenium-webdriver-controller.js:11:103)
    at _next (build-system/tasks/e2e/selenium-webdriver-controller.js:13:194)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  Shadow environment    should NOT change src when new value is a blocked URL" time="0.0540" classname="should NOT change src when new value is a blocked URL">
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  Shadow environment    should NOT change src when new value uses an invalid protocol" time="0.0560" classname="should NOT change src when new value uses an invalid protocol">
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  Shadow environment    should change alt when the alt attribute binding changes" time="40.0010" classname="should change alt when the alt attribute binding changes">
      <failure message="Timeout of 40000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js)" type="Error"><![CDATA[Error: Timeout of 40000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  Shadow environment    should change alt when the alt attribute binding changes" time="40.0010" classname="should change alt when the alt attribute binding changes">
      <failure message="expected &apos;unbound&apos; to equal &apos;hello world&apos;" type="AssertionError"><![CDATA[AssertionError: expected 'unbound' to equal 'hello world'
    at valueSatisfiesExpectation (build-system/tasks/e2e/expect.js:376:18)
    at conditionValue (build-system/tasks/e2e/selenium-webdriver-controller.js:123:30)
    at _callee$ (build-system/tasks/e2e/selenium-webdriver-controller.js:87:46)
    at tryCatch (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:61:40)
    at GeneratorFunctionPrototype.invoke [as _invoke] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:329:22)
    at GeneratorFunctionPrototype.prototype.<computed> [as next] (build-system/tasks/e2e/node_modules/babel-regenerator-runtime/runtime.js:94:21)
    at asyncGeneratorStep (build-system/tasks/e2e/selenium-webdriver-controller.js:11:103)
    at _next (build-system/tasks/e2e/selenium-webdriver-controller.js:13:194)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  Shadow environment    should show/hide vid controls when the control binding changes" time="40.0020" classname="should show/hide vid controls when the control binding changes">
      <failure message="Timeout of 40000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js)" type="Error"><![CDATA[Error: Timeout of 40000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  Shadow environment    should show/hide vid controls when the control binding changes" time="40.0020" classname="should show/hide vid controls when the control binding changes">
      <failure message="expected null not to be null" type="AssertionError"><![CDATA[AssertionError: expected null not to be null]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads FIE environment " timestamp="2021-04-28T22:20:55" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:20:55" tests="5" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js" time="30.0070" failures="1">
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  AMPHTML ads FIE environment  &quot;before each&quot; hook for &quot;should support binding to src&quot;" time="30.0070" classname="&quot;before each&quot; hook for &quot;should support binding to src&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox environment " timestamp="2021-04-28T22:21:28" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:21:28" tests="5" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js" time="0.1450" failures="5">
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  AMPHTML ads inabox environment    should support binding to src" time="0.0300" classname="should support binding to src">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  AMPHTML ads inabox environment    should NOT change src when new value is a blocked URL" time="0.0270" classname="should NOT change src when new value is a blocked URL">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  AMPHTML ads inabox environment    should NOT change src when new value uses an invalid protocol" time="0.0280" classname="should NOT change src when new value uses an invalid protocol">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  AMPHTML ads inabox environment    should change alt when the alt attribute binding changes" time="0.0280" classname="should change alt when the alt attribute binding changes">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  AMPHTML ads inabox environment    should show/hide vid controls when the control binding changes" time="0.0320" classname="should show/hide vid controls when the control binding changes">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox friendly frame environment " timestamp="2021-04-28T22:22:47" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:22:47" tests="5" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js" time="0.1430" failures="5">
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  AMPHTML ads inabox friendly frame environment    should support binding to src" time="0.0320" classname="should support binding to src">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  AMPHTML ads inabox friendly frame environment    should NOT change src when new value is a blocked URL" time="0.0270" classname="should NOT change src when new value is a blocked URL">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  AMPHTML ads inabox friendly frame environment    should NOT change src when new value uses an invalid protocol" time="0.0250" classname="should NOT change src when new value uses an invalid protocol">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  AMPHTML ads inabox friendly frame environment    should change alt when the alt attribute binding changes" time="0.0250" classname="should change alt when the alt attribute binding changes">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  AMPHTML ads inabox friendly frame environment    should show/hide vid controls when the control binding changes" time="0.0340" classname="should show/hide vid controls when the control binding changes">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox safeframe environment " timestamp="2021-04-28T22:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:24:06" tests="5" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-video.js" time="0.1430" failures="5">
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  AMPHTML ads inabox safeframe environment    should support binding to src" time="0.0260" classname="should support binding to src">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  AMPHTML ads inabox safeframe environment    should NOT change src when new value is a blocked URL" time="0.0250" classname="should NOT change src when new value is a blocked URL">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  AMPHTML ads inabox safeframe environment    should NOT change src when new value uses an invalid protocol" time="0.0300" classname="should NOT change src when new value uses an invalid protocol">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  AMPHTML ads inabox safeframe environment    should change alt when the alt attribute binding changes" time="0.0270" classname="should change alt when the alt attribute binding changes">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
    <testcase name="amp-bind with &lt;amp-video&gt; chrome  AMPHTML ads inabox safeframe environment    should show/hide vid controls when the control binding changes" time="0.0350" classname="should show/hide vid controls when the control binding changes">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-bind" timestamp="2021-04-28T22:25:24" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-youtube.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:25:24" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-youtube.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:25:24" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-youtube.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:25:24" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-youtube.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with &lt;amp-youtube&gt;" timestamp="2021-04-28T22:25:24" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-youtube.js" time="0.0310" failures="1">
    <testcase name="amp-bind chrome  Standalone environment    with &lt;amp-youtube&gt; should support binding to data-video-id" time="0.0310" classname="should support binding to data-video-id">
      <failure message="element not interactable
  (Session info: headless chrome=90.0.4430.93)" type="ElementNotInteractableError"><![CDATA[ElementNotInteractableError: element not interactable
  (Session info: headless chrome=90.0.4430.93)
    at Object.throwDecodedError (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/error.js:517:15)
    at parseHttpResponse (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:642:13)
    at Executor.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/http.js:568:28)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async Driver.execute (build-system/tasks/e2e/node_modules/selenium-webdriver/lib/webdriver.js:731:17)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T22:25:40" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-youtube.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:25:40" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-youtube.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with &lt;amp-youtube&gt;" timestamp="2021-04-28T22:25:40" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-youtube.js" time="30.0050" failures="1">
    <testcase name="amp-bind chrome  Viewer environment  &quot;before each&quot; hook for &quot;should support binding to data-video-id&quot;" time="30.0050" classname="&quot;before each&quot; hook for &quot;should support binding to data-video-id&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-youtube.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-youtube.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Shadow environment " timestamp="2021-04-28T22:26:46" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-youtube.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:26:46" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-youtube.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with &lt;amp-youtube&gt;" timestamp="2021-04-28T22:26:46" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-youtube.js" time="30.0660" failures="1">
    <testcase name="amp-bind chrome  Shadow environment  &quot;before each&quot; hook for &quot;should support binding to data-video-id&quot;" time="30.0660" classname="&quot;before each&quot; hook for &quot;should support binding to data-video-id&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-youtube.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-bind-youtube.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="layoutCallback depends on updated viewport size after documentHeight change." timestamp="2021-04-28T22:27:32" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-email.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:27:32" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-email.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Email environment (viewer) " timestamp="2021-04-28T22:27:32" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-email.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:27:32" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-email.js" time="30.0040" failures="1">
    <testcase name="layoutCallback depends on updated viewport size after documentHeight change. chrome  Email environment (viewer)  &quot;before each&quot; hook for &quot;Should call amp-img layoutCallback&quot;" time="30.0040" classname="&quot;before each&quot; hook for &quot;Should call amp-img layoutCallback&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-email.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-email.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="layoutCallback depending on element remeasurement after documentHeight change." timestamp="2021-04-28T22:28:18" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-email.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:28:18" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-email.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Email environment (viewer) " timestamp="2021-04-28T22:28:18" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-email.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:28:18" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-email.js" time="30.0040" failures="1">
    <testcase name="layoutCallback depending on element remeasurement after documentHeight change. chrome  Email environment (viewer)  &quot;before each&quot; hook for &quot;Should call amp-list layoutCallback&quot;" time="30.0040" classname="&quot;before each&quot; hook for &quot;Should call amp-list layoutCallback&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-email.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-email.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="story player navigation" timestamp="2021-04-28T22:29:19" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-story-player-navigation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:29:19" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-story-player-navigation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:29:19" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-story-player-navigation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:29:19" tests="2" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-story-player-navigation.js" time="30.0060" failures="1">
    <testcase name="story player navigation chrome  Standalone environment  &quot;before each&quot; hook for &quot;first story should be playing video&quot;" time="30.0060" classname="&quot;before each&quot; hook for &quot;first story should be playing video&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-story-player-navigation.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-story-player-navigation.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="player prerendering" timestamp="2021-04-28T22:30:20" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-story-player-prerender.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:30:20" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-story-player-prerender.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:30:20" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-story-player-prerender.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:30:20" tests="6" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-story-player-prerender.js" time="30.0110" failures="1">
    <testcase name="player prerendering chrome  Standalone environment  &quot;before each&quot; hook for &quot;when player is not visible in first viewport, it builds the shadow DOM container&quot;" time="30.0110" classname="&quot;before each&quot; hook for &quot;when player is not visible in first viewport, it builds the shadow DOM container&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-story-player-prerender.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-story-player-prerender.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="player prerendering" timestamp="2021-04-28T22:31:20" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-story-player.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:31:20" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-story-player.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:31:20" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-story-player.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:31:20" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-amp-story-player.js" time="30.0040" failures="1">
    <testcase name="player prerendering chrome  Standalone environment  &quot;before each&quot; hook for &quot;loads and displays first story on page load when player is visible in viewport&quot;" time="30.0040" classname="&quot;before each&quot; hook for &quot;loads and displays first story on page load when player is visible in viewport&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-story-player.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-amp-story-player.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="ControllerPromise" timestamp="2021-04-28T22:32:21" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-controller-promise.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Promise wrapping behavior" timestamp="2021-04-28T22:32:21" tests="10" file="/Users/rileyjones/amp/amphtml/test/e2e/test-controller-promise.js" time="0.0110" failures="0">
    <testcase name="ControllerPromise Promise wrapping behavior should behave like a normal thenable" time="0.0000" classname="should behave like a normal thenable">
    </testcase>
    <testcase name="ControllerPromise Promise wrapping behavior should behave like a normal thenable with await" time="0.0010" classname="should behave like a normal thenable with await">
    </testcase>
    <testcase name="ControllerPromise Promise wrapping behavior should accept calls to `then`" time="0.0010" classname="should accept calls to `then`">
    </testcase>
    <testcase name="ControllerPromise Promise wrapping behavior should allow empty `then` calls" time="0.0010" classname="should allow empty `then` calls">
    </testcase>
    <testcase name="ControllerPromise Promise wrapping behavior should accept calls to `catch`" time="0.0020" classname="should accept calls to `catch`">
    </testcase>
    <testcase name="ControllerPromise Promise wrapping behavior should accept a second parameter for `then`" time="0.0010" classname="should accept a second parameter for `then`">
    </testcase>
    <testcase name="ControllerPromise Promise wrapping behavior should accept rejected calls to `finally`" time="0.0000" classname="should accept rejected calls to `finally`">
    </testcase>
    <testcase name="ControllerPromise Promise wrapping behavior should accept resolved calls to `finally`" time="0.0010" classname="should accept resolved calls to `finally`">
    </testcase>
    <testcase name="ControllerPromise Promise wrapping behavior should pass errors beyond `finally` to `catch` blocks" time="0.0040" classname="should pass errors beyond `finally` to `catch` blocks">
    </testcase>
    <testcase name="ControllerPromise Promise wrapping behavior should accept long then chains" time="0.0000" classname="should accept long then chains">
    </testcase>
  </testsuite>
  <testsuite name="retryable behavior" timestamp="2021-04-28T22:32:21" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-controller-promise.js" time="0.1600" failures="0">
    <testcase name="ControllerPromise retryable behavior should allow promises to be retryable" time="0.0290" classname="should allow promises to be retryable">
    </testcase>
    <testcase name="ControllerPromise retryable behavior should allow retryable promises to be then-ed once" time="0.0330" classname="should allow retryable promises to be then-ed once">
    </testcase>
    <testcase name="ControllerPromise retryable behavior should allow retryable promises to be then-ed more than once" time="0.0310" classname="should allow retryable promises to be then-ed more than once">
    </testcase>
    <testcase name="ControllerPromise retryable behavior should reject on failure and not allow retrying" time="0.0670" classname="should reject on failure and not allow retrying">
    </testcase>
  </testsuite>
  <testsuite name="documentHeight" timestamp="2021-04-28T22:32:21" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-document-height.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:32:21" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-document-height.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T22:32:21" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-document-height.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:32:21" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-document-height.js" time="30.0080" failures="1">
    <testcase name="documentHeight chrome  Viewer environment  &quot;before each&quot; hook for &quot;should send documentHeight once amp has completed init&quot;" time="30.0080" classname="&quot;before each&quot; hook for &quot;should send documentHeight once amp has completed init&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-document-height.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/test/e2e/test-document-height.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="e2e expect" timestamp="2021-04-28T22:33:22" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="ControllerPromise" timestamp="2021-04-28T22:33:22" tests="5" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.1070" failures="0">
    <testcase name="e2e expect ControllerPromise should accept controller promises" time="0.0010" classname="should accept controller promises">
    </testcase>
    <testcase name="e2e expect ControllerPromise should accept controller promises with sync waitForValue" time="0.0320" classname="should accept controller promises with sync waitForValue">
    </testcase>
    <testcase name="e2e expect ControllerPromise should accept controller promises with async waitForValue" time="0.0270" classname="should accept controller promises with async waitForValue">
    </testcase>
    <testcase name="e2e expect ControllerPromise should accept `then`" time="0.0220" classname="should accept `then`">
    </testcase>
    <testcase name="e2e expect ControllerPromise should accept multiple `then`s" time="0.0250" classname="should accept multiple `then`s">
    </testcase>
  </testsuite>
  <testsuite name="Chai API methods" timestamp="2021-04-28T22:33:22" tests="0" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="a, an" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0350" failures="0">
    <testcase name="e2e expect Chai API methods a, an should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods a, an should work in the eventual positive case" time="0.0090" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods a, an should work in the immediate negative case" time="0.0110" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods a, an should work in the eventual negative case" time="0.0100" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="above, gt, greaterThan" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0270" failures="0">
    <testcase name="e2e expect Chai API methods above, gt, greaterThan should work in the immediate positive case" time="0.0040" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods above, gt, greaterThan should work in the eventual positive case" time="0.0090" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods above, gt, greaterThan should work in the immediate negative case" time="0.0040" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods above, gt, greaterThan should work in the eventual negative case" time="0.0100" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="arguments, Arguments" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0300" failures="0">
    <testcase name="e2e expect Chai API methods arguments, Arguments should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods arguments, Arguments should work in the eventual positive case" time="0.0100" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods arguments, Arguments should work in the immediate negative case" time="0.0040" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods arguments, Arguments should work in the eventual negative case" time="0.0110" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="below, lt, lessThan" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0270" failures="0">
    <testcase name="e2e expect Chai API methods below, lt, lessThan should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods below, lt, lessThan should work in the eventual positive case" time="0.0080" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods below, lt, lessThan should work in the immediate negative case" time="0.0040" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods below, lt, lessThan should work in the eventual negative case" time="0.0100" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="change, changes" timestamp="2021-04-28T22:33:22" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0000" failures="0">
    <testcase name="e2e expect Chai API methods change, changes should throw that it is unsupported" time="0.0000" classname="should throw that it is unsupported">
    </testcase>
  </testsuite>
  <testsuite name="closeTo, approximately" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0290" failures="0">
    <testcase name="e2e expect Chai API methods closeTo, approximately should work in the immediate positive case" time="0.0040" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods closeTo, approximately should work in the eventual positive case" time="0.0090" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods closeTo, approximately should work in the immediate negative case" time="0.0060" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods closeTo, approximately should work in the eventual negative case" time="0.0100" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="decrease, decreases" timestamp="2021-04-28T22:33:22" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0010" failures="0">
    <testcase name="e2e expect Chai API methods decrease, decreases should throw that it is unsupported" time="0.0010" classname="should throw that it is unsupported">
    </testcase>
  </testsuite>
  <testsuite name="empty" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0300" failures="0">
    <testcase name="e2e expect Chai API methods empty should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods empty should work in the eventual positive case" time="0.0120" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods empty should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods empty should work in the eventual negative case" time="0.0080" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="eql, eqls (deep equal)" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0220" failures="0">
    <testcase name="e2e expect Chai API methods eql, eqls (deep equal) should work in the immediate positive case" time="0.0040" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods eql, eqls (deep equal) should work in the eventual positive case" time="0.0080" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods eql, eqls (deep equal) should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods eql, eqls (deep equal) should work in the eventual negative case" time="0.0050" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="equal, equals, eq" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0280" failures="0">
    <testcase name="e2e expect Chai API methods equal, equals, eq should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods equal, equals, eq should work in the eventual positive case" time="0.0100" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods equal, equals, eq should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods equal, equals, eq should work in the eventual negative case" time="0.0080" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="exist" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0280" failures="0">
    <testcase name="e2e expect Chai API methods exist should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods exist should work in the eventual positive case" time="0.0090" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods exist should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods exist should work in the eventual negative case" time="0.0090" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="extensible" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0300" failures="0">
    <testcase name="e2e expect Chai API methods extensible should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods extensible should work in the eventual positive case" time="0.0100" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods extensible should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods extensible should work in the eventual negative case" time="0.0100" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="false" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0330" failures="0">
    <testcase name="e2e expect Chai API methods false should work in the immediate positive case" time="0.0060" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods false should work in the eventual positive case" time="0.0110" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods false should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods false should work in the eventual negative case" time="0.0110" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="finite" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0270" failures="0">
    <testcase name="e2e expect Chai API methods finite should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods finite should work in the eventual positive case" time="0.0090" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods finite should work in the immediate negative case" time="0.0040" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods finite should work in the eventual negative case" time="0.0090" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="frozen" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0300" failures="0">
    <testcase name="e2e expect Chai API methods frozen should work in the immediate positive case" time="0.0040" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods frozen should work in the eventual positive case" time="0.0100" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods frozen should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods frozen should work in the eventual negative case" time="0.0110" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="include, includes, contain, contains" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0300" failures="0">
    <testcase name="e2e expect Chai API methods include, includes, contain, contains should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods include, includes, contain, contains should work in the eventual positive case" time="0.0100" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods include, includes, contain, contains should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods include, includes, contain, contains should work in the eventual negative case" time="0.0100" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="increase, increases" timestamp="2021-04-28T22:33:22" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0000" failures="0">
    <testcase name="e2e expect Chai API methods increase, increases should throw that it is unsupported" time="0.0000" classname="should throw that it is unsupported">
    </testcase>
  </testsuite>
  <testsuite name="by" timestamp="2021-04-28T22:33:22" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0000" failures="0">
    <testcase name="e2e expect Chai API methods by should throw that it is unsupported" time="0.0000" classname="should throw that it is unsupported">
    </testcase>
  </testsuite>
  <testsuite name="instanceof, instanceOf" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0290" failures="0">
    <testcase name="e2e expect Chai API methods instanceof, instanceOf should work in the immediate positive case" time="0.0040" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods instanceof, instanceOf should work in the eventual positive case" time="0.0100" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods instanceof, instanceOf should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods instanceof, instanceOf should work in the eventual negative case" time="0.0100" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="keys, key" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0340" failures="0">
    <testcase name="e2e expect Chai API methods keys, key should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods keys, key should work in the eventual positive case" time="0.0120" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods keys, key should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods keys, key should work in the eventual negative case" time="0.0120" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="least, gte" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0310" failures="0">
    <testcase name="e2e expect Chai API methods least, gte should work in the immediate positive case" time="0.0040" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods least, gte should work in the eventual positive case" time="0.0100" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods least, gte should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods least, gte should work in the eventual negative case" time="0.0120" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="length" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0310" failures="0">
    <testcase name="e2e expect Chai API methods length should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods length should work in the eventual positive case" time="0.0100" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods length should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods length should work in the eventual negative case" time="0.0110" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="lengthOf" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0340" failures="0">
    <testcase name="e2e expect Chai API methods lengthOf should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods lengthOf should work in the eventual positive case" time="0.0120" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods lengthOf should work in the immediate negative case" time="0.0060" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods lengthOf should work in the eventual negative case" time="0.0110" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="match, matches" timestamp="2021-04-28T22:33:22" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0320" failures="0">
    <testcase name="e2e expect Chai API methods match, matches should work in the immediate positive case" time="0.0060" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods match, matches should work in the eventual positive case" time="0.0100" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods match, matches should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods match, matches should work in the eventual negative case" time="0.0110" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="members" timestamp="2021-04-28T22:33:23" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0330" failures="0">
    <testcase name="e2e expect Chai API methods members should work in the immediate positive case" time="0.0060" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods members should work in the eventual positive case" time="0.0100" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods members should work in the immediate negative case" time="0.0060" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods members should work in the eventual negative case" time="0.0110" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="most, lte" timestamp="2021-04-28T22:33:23" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0320" failures="0">
    <testcase name="e2e expect Chai API methods most, lte should work in the immediate positive case" time="0.0070" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods most, lte should work in the eventual positive case" time="0.0100" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods most, lte should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods most, lte should work in the eventual negative case" time="0.0100" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="NaN" timestamp="2021-04-28T22:33:23" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0290" failures="0">
    <testcase name="e2e expect Chai API methods NaN should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods NaN should work in the eventual positive case" time="0.0110" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods NaN should work in the immediate negative case" time="0.0040" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods NaN should work in the eventual negative case" time="0.0090" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="null" timestamp="2021-04-28T22:33:23" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0310" failures="0">
    <testcase name="e2e expect Chai API methods null should work in the immediate positive case" time="0.0060" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods null should work in the eventual positive case" time="0.0110" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods null should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods null should work in the eventual negative case" time="0.0090" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="ok" timestamp="2021-04-28T22:33:23" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0290" failures="0">
    <testcase name="e2e expect Chai API methods ok should work in the immediate positive case" time="0.0040" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods ok should work in the eventual positive case" time="0.0110" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods ok should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods ok should work in the eventual negative case" time="0.0090" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="oneOf" timestamp="2021-04-28T22:33:23" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0300" failures="0">
    <testcase name="e2e expect Chai API methods oneOf should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods oneOf should work in the eventual positive case" time="0.0090" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods oneOf should work in the immediate negative case" time="0.0060" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods oneOf should work in the eventual negative case" time="0.0100" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="ownProperty, haveOwnProperty" timestamp="2021-04-28T22:33:23" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0280" failures="0">
    <testcase name="e2e expect Chai API methods ownProperty, haveOwnProperty should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods ownProperty, haveOwnProperty should work in the eventual positive case" time="0.0100" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods ownProperty, haveOwnProperty should work in the immediate negative case" time="0.0040" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods ownProperty, haveOwnProperty should work in the eventual negative case" time="0.0090" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="ownPropertyDescriptor, haveOwnPropertyDescriptor" timestamp="2021-04-28T22:33:23" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0290" failures="0">
    <testcase name="e2e expect Chai API methods ownPropertyDescriptor, haveOwnPropertyDescriptor should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods ownPropertyDescriptor, haveOwnPropertyDescriptor should work in the eventual positive case" time="0.0090" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods ownPropertyDescriptor, haveOwnPropertyDescriptor should work in the immediate negative case" time="0.0040" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods ownPropertyDescriptor, haveOwnPropertyDescriptor should work in the eventual negative case" time="0.0110" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="property" timestamp="2021-04-28T22:33:23" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0280" failures="0">
    <testcase name="e2e expect Chai API methods property should work in the immediate positive case" time="0.0040" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods property should work in the eventual positive case" time="0.0090" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods property should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods property should work in the eventual negative case" time="0.0100" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="respondTo, respondsTo" timestamp="2021-04-28T22:33:23" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0000" failures="0">
    <testcase name="e2e expect Chai API methods respondTo, respondsTo should throw that it is unsupported" time="0.0000" classname="should throw that it is unsupported">
    </testcase>
  </testsuite>
  <testsuite name="satisfy, satisfies" timestamp="2021-04-28T22:33:23" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0310" failures="0">
    <testcase name="e2e expect Chai API methods satisfy, satisfies should work in the immediate positive case" time="0.0060" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods satisfy, satisfies should work in the eventual positive case" time="0.0100" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods satisfy, satisfies should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods satisfy, satisfies should work in the eventual negative case" time="0.0100" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="sealed" timestamp="2021-04-28T22:33:23" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0300" failures="0">
    <testcase name="e2e expect Chai API methods sealed should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods sealed should work in the eventual positive case" time="0.0120" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods sealed should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods sealed should work in the eventual negative case" time="0.0080" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="string" timestamp="2021-04-28T22:33:23" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0300" failures="0">
    <testcase name="e2e expect Chai API methods string should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods string should work in the eventual positive case" time="0.0100" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods string should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods string should work in the eventual negative case" time="0.0100" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="throw, throws, Throw" timestamp="2021-04-28T22:33:23" tests="1" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0010" failures="0">
    <testcase name="e2e expect Chai API methods throw, throws, Throw should throw that it is unsupported" time="0.0010" classname="should throw that it is unsupported">
    </testcase>
  </testsuite>
  <testsuite name="true" timestamp="2021-04-28T22:33:23" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0290" failures="0">
    <testcase name="e2e expect Chai API methods true should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods true should work in the eventual positive case" time="0.0090" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods true should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods true should work in the eventual negative case" time="0.0100" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="undefined" timestamp="2021-04-28T22:33:23" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0300" failures="0">
    <testcase name="e2e expect Chai API methods undefined should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods undefined should work in the eventual positive case" time="0.0090" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods undefined should work in the immediate negative case" time="0.0050" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods undefined should work in the eventual negative case" time="0.0110" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="within" timestamp="2021-04-28T22:33:23" tests="4" file="/Users/rileyjones/amp/amphtml/test/e2e/test-expect.js" time="0.0290" failures="0">
    <testcase name="e2e expect Chai API methods within should work in the immediate positive case" time="0.0050" classname="should work in the immediate positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods within should work in the eventual positive case" time="0.0100" classname="should work in the eventual positive case">
    </testcase>
    <testcase name="e2e expect Chai API methods within should work in the immediate negative case" time="0.0040" classname="should work in the immediate negative case">
    </testcase>
    <testcase name="e2e expect Chai API methods within should work in the eventual negative case" time="0.0100" classname="should work in the eventual negative case">
    </testcase>
  </testsuite>
  <testsuite name="[v1.0] amp-accordion" timestamp="2021-04-28T22:33:23" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-amp-accordion.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:33:23" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-amp-accordion.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:33:23" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-amp-accordion.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:33:23" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-amp-accordion.js" time="30.0070" failures="1">
    <testcase name="[v1.0] amp-accordion chrome  Standalone environment  &quot;before each&quot; hook for &quot;expands and collapses when a header section is clicked&quot;" time="30.0070" classname="&quot;before each&quot; hook for &quot;expands and collapses when a header section is clicked&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-amp-accordion.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-amp-accordion.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T22:34:24" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-amp-accordion.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:34:24" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-amp-accordion.js" time="30.0060" failures="1">
    <testcase name="[v1.0] amp-accordion chrome  Viewer environment  &quot;before each&quot; hook for &quot;expands and collapses when a header section is clicked&quot;" time="30.0060" classname="&quot;before each&quot; hook for &quot;expands and collapses when a header section is clicked&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-amp-accordion.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-amp-accordion.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v1.0] amp-accordion" timestamp="2021-04-28T22:35:24" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-single-expand.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:35:24" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-single-expand.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:35:24" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-single-expand.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:35:24" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-single-expand.js" time="30.0020" failures="1">
    <testcase name="[v1.0] amp-accordion chrome  Standalone environment  &quot;before each&quot; hook for &quot;expands only one section at a time for &quot;expand-single-section&quot; accordion&quot;" time="30.0020" classname="&quot;before each&quot; hook for &quot;expands only one section at a time for &quot;expand-single-section&quot; accordion&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-single-expand.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-single-expand.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T22:36:25" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-single-expand.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:36:25" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-single-expand.js" time="30.3810" failures="1">
    <testcase name="[v1.0] amp-accordion chrome  Viewer environment  &quot;before each&quot; hook for &quot;expands only one section at a time for &quot;expand-single-section&quot; accordion&quot;" time="30.3810" classname="&quot;before each&quot; hook for &quot;expands only one section at a time for &quot;expand-single-section&quot; accordion&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-single-expand.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-accordion/1.0/test-e2e/test-single-expand.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-ad-exit" timestamp="2021-04-28T22:37:26" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-ad-exit/0.1/test-e2e/test-amp-ad-exit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:37:26" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-ad-exit/0.1/test-e2e/test-amp-ad-exit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" AMPHTML ads FIE environment " timestamp="2021-04-28T22:37:26" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-ad-exit/0.1/test-e2e/test-amp-ad-exit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:37:26" tests="6" file="/Users/rileyjones/amp/amphtml/extensions/amp-ad-exit/0.1/test-e2e/test-amp-ad-exit.js" time="30.0030" failures="1">
    <testcase name="amp-ad-exit chrome  AMPHTML ads FIE environment  &quot;before each&quot; hook for &quot;product1 clicked without delay&quot;" time="30.0030" classname="&quot;before each&quot; hook for &quot;product1 clicked without delay&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-ad-exit/0.1/test-e2e/test-amp-ad-exit.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-ad-exit/0.1/test-e2e/test-amp-ad-exit.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox environment " timestamp="2021-04-28T22:38:09" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-ad-exit/0.1/test-e2e/test-amp-ad-exit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:38:09" tests="6" file="/Users/rileyjones/amp/amphtml/extensions/amp-ad-exit/0.1/test-e2e/test-amp-ad-exit.js" time="30.0050" failures="1">
    <testcase name="amp-ad-exit chrome  AMPHTML ads inabox environment  &quot;before each&quot; hook for &quot;product1 clicked without delay&quot;" time="30.0050" classname="&quot;before each&quot; hook for &quot;product1 clicked without delay&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-ad-exit/0.1/test-e2e/test-amp-ad-exit.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-ad-exit/0.1/test-e2e/test-amp-ad-exit.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox friendly frame environment " timestamp="2021-04-28T22:39:09" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-ad-exit/0.1/test-e2e/test-amp-ad-exit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:39:09" tests="6" file="/Users/rileyjones/amp/amphtml/extensions/amp-ad-exit/0.1/test-e2e/test-amp-ad-exit.js" time="30.0020" failures="1">
    <testcase name="amp-ad-exit chrome  AMPHTML ads inabox friendly frame environment  &quot;before each&quot; hook for &quot;product1 clicked without delay&quot;" time="30.0020" classname="&quot;before each&quot; hook for &quot;product1 clicked without delay&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-ad-exit/0.1/test-e2e/test-amp-ad-exit.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-ad-exit/0.1/test-e2e/test-amp-ad-exit.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox safeframe environment " timestamp="2021-04-28T22:40:10" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-ad-exit/0.1/test-e2e/test-amp-ad-exit.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:40:10" tests="6" file="/Users/rileyjones/amp/amphtml/extensions/amp-ad-exit/0.1/test-e2e/test-amp-ad-exit.js" time="30.0010" failures="1">
    <testcase name="amp-ad-exit chrome  AMPHTML ads inabox safeframe environment  &quot;before each&quot; hook for &quot;product1 clicked without delay&quot;" time="30.0010" classname="&quot;before each&quot; hook for &quot;product1 clicked without delay&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-ad-exit/0.1/test-e2e/test-amp-ad-exit.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-ad-exit/0.1/test-e2e/test-amp-ad-exit.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-analytics iframe transport" timestamp="2021-04-28T22:41:10" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-analytics/0.1/test-e2e/test-iframe-transport.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:41:10" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-analytics/0.1/test-e2e/test-iframe-transport.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" AMPHTML ads FIE environment " timestamp="2021-04-28T22:41:10" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-analytics/0.1/test-e2e/test-iframe-transport.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:41:10" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-analytics/0.1/test-e2e/test-iframe-transport.js" time="30.0040" failures="1">
    <testcase name="amp-analytics iframe transport chrome  AMPHTML ads FIE environment  &quot;before each&quot; hook for &quot;should inject transport iframe in the parent doc&quot;" time="30.0040" classname="&quot;before each&quot; hook for &quot;should inject transport iframe in the parent doc&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-analytics/0.1/test-e2e/test-iframe-transport.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-analytics/0.1/test-e2e/test-iframe-transport.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-animation" timestamp="2021-04-28T22:42:11" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-animation/0.1/test-e2e/test-amp-animation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:42:11" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-animation/0.1/test-e2e/test-amp-animation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" AMPHTML ads FIE environment " timestamp="2021-04-28T22:42:11" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-animation/0.1/test-e2e/test-amp-animation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:42:11" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-animation/0.1/test-e2e/test-amp-animation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" AMPHTML ads inabox environment " timestamp="2021-04-28T22:42:11" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-animation/0.1/test-e2e/test-amp-animation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:42:11" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-animation/0.1/test-e2e/test-amp-animation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" AMPHTML ads inabox friendly frame environment " timestamp="2021-04-28T22:42:11" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-animation/0.1/test-e2e/test-amp-animation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:42:11" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-animation/0.1/test-e2e/test-amp-animation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" AMPHTML ads inabox safeframe environment " timestamp="2021-04-28T22:42:11" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-animation/0.1/test-e2e/test-amp-animation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:42:11" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-animation/0.1/test-e2e/test-amp-animation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="amp-auto-lightbox e2e" timestamp="2021-04-28T22:42:11" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-auto-lightbox/0.1/test-e2e/test-amp-auto-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:42:11" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-auto-lightbox/0.1/test-e2e/test-amp-auto-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:42:11" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-auto-lightbox/0.1/test-e2e/test-amp-auto-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:42:11" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-auto-lightbox/0.1/test-e2e/test-amp-auto-lightbox.js" time="30.0040" failures="1">
    <testcase name="amp-auto-lightbox e2e chrome  Standalone environment  &quot;before each&quot; hook for &quot;should insert amp-lightbox-gallery extension script&quot;" time="30.0040" classname="&quot;before each&quot; hook for &quot;should insert amp-lightbox-gallery extension script&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-auto-lightbox/0.1/test-e2e/test-amp-auto-lightbox.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-auto-lightbox/0.1/test-e2e/test-amp-auto-lightbox.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-autocomplete" timestamp="2021-04-28T22:43:12" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete-inline.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:43:12" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete-inline.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:43:12" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete-inline.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:43:12" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete-inline.js" time="30.0060" failures="1">
    <testcase name="amp-autocomplete chrome  Standalone environment  &quot;before each&quot; hook for &quot;&lt;amp-autocomplete inline&gt; should render&quot;" time="30.0060" classname="&quot;before each&quot; hook for &quot;&lt;amp-autocomplete inline&gt; should render&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete-inline.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete-inline.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T22:44:13" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete-inline.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:44:13" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete-inline.js" time="30.0040" failures="1">
    <testcase name="amp-autocomplete chrome  Viewer environment  &quot;before each&quot; hook for &quot;&lt;amp-autocomplete inline&gt; should render&quot;" time="30.0040" classname="&quot;before each&quot; hook for &quot;&lt;amp-autocomplete inline&gt; should render&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete-inline.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete-inline.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-autocomplete" timestamp="2021-04-28T22:45:13" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:45:13" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:45:13" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:45:13" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete.js" time="30.0030" failures="1">
    <testcase name="amp-autocomplete chrome  Standalone environment  &quot;before each&quot; hook for &quot;&lt;amp-autocomplete&gt; should render&quot;" time="30.0030" classname="&quot;before each&quot; hook for &quot;&lt;amp-autocomplete&gt; should render&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T22:46:14" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:46:14" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete.js" time="30.0060" failures="1">
    <testcase name="amp-autocomplete chrome  Viewer environment  &quot;before each&quot; hook for &quot;&lt;amp-autocomplete&gt; should render&quot;" time="30.0060" classname="&quot;before each&quot; hook for &quot;&lt;amp-autocomplete&gt; should render&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-autocomplete/0.1/test-e2e/test-amp-autocomplete.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v0.1] amp-base-carousel - advance" timestamp="2021-04-28T22:47:15" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-advance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:47:15" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-advance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:47:15" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-advance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:47:15" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-advance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="amp base carousel in lightbox" timestamp="2021-04-28T22:47:15" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows-in-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:47:15" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows-in-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:47:15" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows-in-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:47:15" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows-in-lightbox.js" time="30.0030" failures="1">
    <testcase name="amp base carousel in lightbox chrome  Standalone environment  &quot;before each&quot; hook for &quot;should open with both arrows&quot;" time="30.0030" classname="&quot;before each&quot; hook for &quot;should open with both arrows&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows-in-lightbox.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows-in-lightbox.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v0.1] amp-base-carousel - arrows when non-looping" timestamp="2021-04-28T22:48:16" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:48:16" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:48:16" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:48:16" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows-non-looping.js" time="30.0040" failures="1">
    <testcase name="[v0.1] amp-base-carousel - arrows when non-looping chrome  Standalone environment  &quot;before each&quot; hook for &quot;should have the arrows in the correct initial state&quot;" time="30.0040" classname="&quot;before each&quot; hook for &quot;should have the arrows in the correct initial state&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows-non-looping.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows-non-looping.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T22:49:16" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:49:16" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows-non-looping.js" time="30.0040" failures="1">
    <testcase name="[v0.1] amp-base-carousel - arrows when non-looping chrome  Viewer environment  &quot;before each&quot; hook for &quot;should have the arrows in the correct initial state&quot;" time="30.0040" classname="&quot;before each&quot; hook for &quot;should have the arrows in the correct initial state&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows-non-looping.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows-non-looping.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v0.1] amp-base-carousel - arrows with custom arrows" timestamp="2021-04-28T22:50:17" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:50:17" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:50:17" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:50:17" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows.js" time="30.0470" failures="1">
    <testcase name="[v0.1] amp-base-carousel - arrows with custom arrows chrome  Standalone environment  &quot;before each&quot; hook for &quot;should go to the next slide&quot;" time="30.0470" classname="&quot;before each&quot; hook for &quot;should go to the next slide&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T22:51:18" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:51:18" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows.js" time="30.0050" failures="1">
    <testcase name="[v0.1] amp-base-carousel - arrows with custom arrows chrome  Viewer environment  &quot;before each&quot; hook for &quot;should go to the next slide&quot;" time="30.0050" classname="&quot;before each&quot; hook for &quot;should go to the next slide&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-arrows.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v0.1] amp-base-carousel - autoadvance" timestamp="2021-04-28T22:52:19" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-autoadvance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:52:19" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-autoadvance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:52:19" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-autoadvance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:52:19" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-autoadvance.js" time="30.0060" failures="1">
    <testcase name="[v0.1] amp-base-carousel - autoadvance chrome  Standalone environment  &quot;before each&quot; hook for &quot;should move forwards&quot;" time="30.0060" classname="&quot;before each&quot; hook for &quot;should move forwards&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-autoadvance.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-autoadvance.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T22:53:19" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-autoadvance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:53:19" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-autoadvance.js" time="30.0060" failures="1">
    <testcase name="[v0.1] amp-base-carousel - autoadvance chrome  Viewer environment  &quot;before each&quot; hook for &quot;should move forwards&quot;" time="30.0060" classname="&quot;before each&quot; hook for &quot;should move forwards&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-autoadvance.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-autoadvance.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Shadow environment " timestamp="2021-04-28T22:54:20" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-autoadvance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:54:20" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-autoadvance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="[v0.1] amp-base-carousel - basic functionality" timestamp="2021-04-28T22:54:20" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-carousel.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:54:20" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-carousel.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:54:20" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-carousel.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:54:20" tests="6" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-carousel.js" time="30.6680" failures="1">
    <testcase name="[v0.1] amp-base-carousel - basic functionality chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.6680" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-carousel.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-carousel.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T22:55:21" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-carousel.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:55:21" tests="6" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-carousel.js" time="30.0060" failures="1">
    <testcase name="[v0.1] amp-base-carousel - basic functionality chrome  Viewer environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.0060" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-carousel.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-carousel.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v0.1] amp-base-carousel - default attributes" timestamp="2021-04-28T22:56:22" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-default-attributes.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:56:22" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-default-attributes.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:56:22" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-default-attributes.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:56:22" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-default-attributes.js" time="30.0060" failures="1">
    <testcase name="[v0.1] amp-base-carousel - default attributes chrome  Standalone environment  &quot;before each&quot; hook for &quot;should add loop=&quot;false&quot; when loop is omitted (carousel-1)&quot;" time="30.0060" classname="&quot;before each&quot; hook for &quot;should add loop=&quot;false&quot; when loop is omitted (carousel-1)&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-default-attributes.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-default-attributes.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp base carousel in lightbox go to slide" timestamp="2021-04-28T22:57:23" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-goToSlide.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:57:23" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-goToSlide.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:57:23" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-goToSlide.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:57:23" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-goToSlide.js" time="30.0040" failures="1">
    <testcase name="amp base carousel in lightbox go to slide chrome  Standalone environment  &quot;before each&quot; hook for &quot;should move to first slide when prev arrow is clicked&quot;" time="30.0040" classname="&quot;before each&quot; hook for &quot;should move to first slide when prev arrow is clicked&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-goToSlide.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-goToSlide.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v0.1] amp-base-carousel - grouping" timestamp="2021-04-28T22:58:24" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-grouping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T22:58:24" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-grouping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T22:58:24" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-grouping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:58:24" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-grouping.js" time="30.3450" failures="1">
    <testcase name="[v0.1] amp-base-carousel - grouping chrome  Standalone environment  &quot;before each&quot; hook for &quot;should snap on next group when past the midpoint&quot;" time="30.3450" classname="&quot;before each&quot; hook for &quot;should snap on next group when past the midpoint&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-grouping.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-grouping.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T22:59:24" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-grouping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T22:59:24" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-grouping.js" time="30.2770" failures="1">
    <testcase name="[v0.1] amp-base-carousel - grouping chrome  Viewer environment  &quot;before each&quot; hook for &quot;should snap on next group when past the midpoint&quot;" time="30.2770" classname="&quot;before each&quot; hook for &quot;should snap on next group when past the midpoint&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-grouping.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-grouping.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Shadow environment " timestamp="2021-04-28T23:00:25" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-grouping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:00:25" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-grouping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="[v0.1] amp-base-carousel - arrows with hidden controls" timestamp="2021-04-28T23:00:25" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-hidden-controls.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:00:25" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-hidden-controls.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:00:25" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-hidden-controls.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:00:25" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-hidden-controls.js" time="30.0070" failures="1">
    <testcase name="[v0.1] amp-base-carousel - arrows with hidden controls chrome  Standalone environment  &quot;before each&quot; hook for &quot;should not go to the next slide&quot;" time="30.0070" classname="&quot;before each&quot; hook for &quot;should not go to the next slide&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-hidden-controls.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-hidden-controls.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v0.1] amp-base-carousel - initial slide" timestamp="2021-04-28T23:01:26" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-initial-slide.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:01:26" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-initial-slide.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:01:26" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-initial-slide.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:01:26" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-initial-slide.js" time="30.0040" failures="1">
    <testcase name="[v0.1] amp-base-carousel - initial slide chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render with the correct initial slide&quot;" time="30.0040" classname="&quot;before each&quot; hook for &quot;should render with the correct initial slide&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-initial-slide.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-initial-slide.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:02:27" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-initial-slide.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:02:27" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-initial-slide.js" time="71.3080" failures="2">
    <testcase name="[v0.1] amp-base-carousel - initial slide chrome  Viewer environment  &quot;before each&quot; hook for &quot;should render with the correct initial slide&quot;" time="31.3060" classname="&quot;before each&quot; hook for &quot;should render with the correct initial slide&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-initial-slide.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-initial-slide.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
    <testcase name="[v0.1] amp-base-carousel - initial slide chrome  Viewer environment  &quot;after each&quot; hook for &quot;should render with the correct initial slide&quot;" time="40.0020" classname="&quot;after each&quot; hook for &quot;should render with the correct initial slide&quot;">
      <failure message="Timeout of 40000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-initial-slide.js)" type="Error"><![CDATA[Error: Timeout of 40000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-initial-slide.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v0.1] amp-base-carousel - mixed length carousel arrows" timestamp="2021-04-28T23:03:39" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-length-arrows.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:03:39" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-length-arrows.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:03:39" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-length-arrows.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:03:39" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-length-arrows.js" time="30.0100" failures="1">
    <testcase name="[v0.1] amp-base-carousel - mixed length carousel arrows chrome  Standalone environment  &quot;before each&quot; hook for &quot;should not have arrows when at start or end&quot;" time="30.0100" classname="&quot;before each&quot; hook for &quot;should not have arrows when at start or end&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-length-arrows.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-length-arrows.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v0.1] amp-base-carousel - mixed length slides without snapping" timestamp="2021-04-28T23:04:41" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths-no-snap.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:04:41" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths-no-snap.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:04:41" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths-no-snap.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:04:41" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths-no-snap.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="no snap" timestamp="2021-04-28T23:04:41" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths-no-snap.js" time="30.0100" failures="1">
    <testcase name="[v0.1] amp-base-carousel - mixed length slides without snapping chrome  Standalone environment  &quot;before each&quot; hook for &quot;should have the correct initial slide positions&quot;" time="30.0100" classname="&quot;before each&quot; hook for &quot;should have the correct initial slide positions&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths-no-snap.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths-no-snap.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v0.1] amp-base-carousel - mixed length slides" timestamp="2021-04-28T23:05:42" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:05:42" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:05:42" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:05:42" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="snap" timestamp="2021-04-28T23:05:42" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths.js" time="30.0060" failures="1">
    <testcase name="[v0.1] amp-base-carousel - mixed length slides chrome  Standalone environment  &quot;before each&quot; hook for &quot;should have the correct initial slide positions&quot;" time="30.0060" classname="&quot;before each&quot; hook for &quot;should have the correct initial slide positions&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:06:43" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:06:43" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="snap" timestamp="2021-04-28T23:06:43" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths.js" time="30.0060" failures="1">
    <testcase name="[v0.1] amp-base-carousel - mixed length slides chrome  Viewer environment  &quot;before each&quot; hook for &quot;should have the correct initial slide positions&quot;" time="30.0060" classname="&quot;before each&quot; hook for &quot;should have the correct initial slide positions&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Shadow environment " timestamp="2021-04-28T23:07:52" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:07:52" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="snap" timestamp="2021-04-28T23:07:52" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-mixed-lengths.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="[v0.1] amp-base-carousel - advancing with multiple visible slides" timestamp="2021-04-28T23:07:52" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-multi-visible-single-advance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:07:52" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-multi-visible-single-advance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:07:52" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-multi-visible-single-advance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:07:52" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-multi-visible-single-advance.js" time="30.5920" failures="1">
    <testcase name="[v0.1] amp-base-carousel - advancing with multiple visible slides chrome  Standalone environment  &quot;before each&quot; hook for &quot;should not go forward past end and it should be able to go back correctly&quot;" time="30.5920" classname="&quot;before each&quot; hook for &quot;should not go forward past end and it should be able to go back correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-multi-visible-single-advance.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-multi-visible-single-advance.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v0.1] amp-base-carousel - non-looping" timestamp="2021-04-28T23:08:53" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:08:53" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:08:53" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:08:53" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-non-looping.js" time="30.0060" failures="1">
    <testcase name="[v0.1] amp-base-carousel - non-looping chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.0060" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-non-looping.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-non-looping.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:09:54" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:09:54" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-non-looping.js" time="30.5210" failures="1">
    <testcase name="[v0.1] amp-base-carousel - non-looping chrome  Viewer environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.5210" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-non-looping.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-non-looping.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Shadow environment " timestamp="2021-04-28T23:10:55" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:10:55" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-non-looping.js" time="30.0090" failures="1">
    <testcase name="[v0.1] amp-base-carousel - non-looping chrome  Shadow environment  &quot;before each&quot; hook for &quot;should layout the adjacent slide&quot;" time="30.0090" classname="&quot;before each&quot; hook for &quot;should layout the adjacent slide&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-non-looping.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-non-looping.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v0.1] amp-base-carousel - responsive attributes" timestamp="2021-04-28T23:11:56" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-responsive.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:11:56" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-responsive.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:11:56" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-responsive.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:11:56" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-responsive.js" time="30.0060" failures="1">
    <testcase name="[v0.1] amp-base-carousel - responsive attributes chrome  Standalone environment  &quot;before each&quot; hook for &quot;should layout correctly initially&quot;" time="30.0060" classname="&quot;before each&quot; hook for &quot;should layout correctly initially&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-responsive.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-responsive.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:12:56" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-responsive.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:12:56" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-responsive.js" time="30.0020" failures="1">
    <testcase name="[v0.1] amp-base-carousel - responsive attributes chrome  Viewer environment  &quot;before each&quot; hook for &quot;should layout correctly initially&quot;" time="30.0020" classname="&quot;before each&quot; hook for &quot;should layout correctly initially&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-responsive.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-responsive.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v0.1] amp-base-carousel - rtl" timestamp="2021-04-28T23:13:58" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-rtl.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:13:58" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-rtl.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:13:58" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-rtl.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:13:58" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-rtl.js" time="30.0030" failures="1">
    <testcase name="[v0.1] amp-base-carousel - rtl chrome  Standalone environment  &quot;before each&quot; hook for &quot;should place the second slide to the left&quot;" time="30.0030" classname="&quot;before each&quot; hook for &quot;should place the second slide to the left&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-rtl.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-rtl.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v0.1] amp-base-carousel - snap property" timestamp="2021-04-28T23:14:59" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-snap-property.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:14:59" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-snap-property.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:14:59" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-snap-property.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:14:59" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-snap-property.js" time="30.0150" failures="1">
    <testcase name="[v0.1] amp-base-carousel - snap property chrome  Standalone environment  &quot;before each&quot; hook for &quot;should set snap property on spacers&quot;" time="30.0150" classname="&quot;before each&quot; hook for &quot;should set snap property on spacers&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-snap-property.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-snap-property.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v0.1] amp-base-carousel - vertical orientation" timestamp="2021-04-28T23:15:59" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-vertical.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:15:59" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-vertical.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:15:59" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-vertical.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:15:59" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-vertical.js" time="30.0050" failures="1">
    <testcase name="[v0.1] amp-base-carousel - vertical orientation chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.0050" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-vertical.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-vertical.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:17:00" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-vertical.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:17:00" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-vertical.js" time="30.0120" failures="1">
    <testcase name="[v0.1] amp-base-carousel - vertical orientation chrome  Viewer environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.0120" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-vertical.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-vertical.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Shadow environment " timestamp="2021-04-28T23:18:01" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-vertical.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:18:01" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-vertical.js" time="30.5190" failures="1">
    <testcase name="[v0.1] amp-base-carousel - vertical orientation chrome  Shadow environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.5190" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-vertical.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/0.1/test-e2e/test-vertical.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v1.0] amp-base-carousel - advance" timestamp="2021-04-28T23:19:02" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-advance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:19:02" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-advance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:19:02" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-advance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:19:02" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-advance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="[v1.0] amp-base-carousel - arrows when non-looping" timestamp="2021-04-28T23:19:02" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-arrows-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:19:02" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-arrows-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:19:02" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-arrows-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:19:02" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-arrows-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:19:02" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-arrows-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:19:02" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-arrows-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="[v1.0] amp-base-carousel - arrows with custom arrows" timestamp="2021-04-28T23:19:02" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-arrows.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:19:02" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-arrows.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:19:02" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-arrows.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:19:02" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-arrows.js" time="30.0070" failures="1">
    <testcase name="[v1.0] amp-base-carousel - arrows with custom arrows chrome  Standalone environment  &quot;before each&quot; hook for &quot;should go to the next slide&quot;" time="30.0070" classname="&quot;before each&quot; hook for &quot;should go to the next slide&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-arrows.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-arrows.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:20:03" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-arrows.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:20:03" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-arrows.js" time="30.0050" failures="1">
    <testcase name="[v1.0] amp-base-carousel - arrows with custom arrows chrome  Viewer environment  &quot;before each&quot; hook for &quot;should go to the next slide&quot;" time="30.0050" classname="&quot;before each&quot; hook for &quot;should go to the next slide&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-arrows.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-arrows.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v1.0] amp-base-carousel - autoadvance" timestamp="2021-04-28T23:21:04" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-autoadvance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:21:04" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-autoadvance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:21:04" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-autoadvance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:21:04" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-autoadvance.js" time="30.0080" failures="1">
    <testcase name="[v1.0] amp-base-carousel - autoadvance chrome  Standalone environment  &quot;before each&quot; hook for &quot;should not autoadvance after using imperative api&quot;" time="30.0080" classname="&quot;before each&quot; hook for &quot;should not autoadvance after using imperative api&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-autoadvance.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-autoadvance.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:22:05" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-autoadvance.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:22:05" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-autoadvance.js" time="30.0040" failures="1">
    <testcase name="[v1.0] amp-base-carousel - autoadvance chrome  Viewer environment  &quot;before each&quot; hook for &quot;should not autoadvance after using imperative api&quot;" time="30.0040" classname="&quot;before each&quot; hook for &quot;should not autoadvance after using imperative api&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-autoadvance.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-autoadvance.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v1.0] amp-base-carousel - basic functionality" timestamp="2021-04-28T23:23:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-carousel.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:23:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-carousel.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:23:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-carousel.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:23:06" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-carousel.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="looping" timestamp="2021-04-28T23:23:06" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-carousel.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:23:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-carousel.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:23:06" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-carousel.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="looping" timestamp="2021-04-28T23:23:06" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-carousel.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="[v1.0] amp-base-carousel - grouping" timestamp="2021-04-28T23:23:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-grouping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:23:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-grouping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:23:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-grouping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:23:06" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-grouping.js" time="30.0050" failures="1">
    <testcase name="[v1.0] amp-base-carousel - grouping chrome  Standalone environment  &quot;before each&quot; hook for &quot;should move forwards by the advance-count&quot;" time="30.0050" classname="&quot;before each&quot; hook for &quot;should move forwards by the advance-count&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-grouping.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-grouping.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v1.0] amp-base-carousel - mixed length slides without snapping" timestamp="2021-04-28T23:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-mixed-lengths-no-snap.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-mixed-lengths-no-snap.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-mixed-lengths-no-snap.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-mixed-lengths-no-snap.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="no snap" timestamp="2021-04-28T23:24:06" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-mixed-lengths-no-snap.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-mixed-lengths-no-snap.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-mixed-lengths-no-snap.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="no snap" timestamp="2021-04-28T23:24:06" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-mixed-lengths-no-snap.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="[v1.0] amp-base-carousel - mixed length slides" timestamp="2021-04-28T23:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-mixed-lengths.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-mixed-lengths.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-mixed-lengths.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-mixed-lengths.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="snap" timestamp="2021-04-28T23:24:06" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-mixed-lengths.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-mixed-lengths.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-mixed-lengths.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="snap" timestamp="2021-04-28T23:24:06" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-mixed-lengths.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="[v1.0] amp-base-carousel - non-looping" timestamp="2021-04-28T23:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:24:06" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:24:06" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-non-looping.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="[v1.0] amp-base-carousel - responsive attributes" timestamp="2021-04-28T23:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-responsive.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-responsive.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:24:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-responsive.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:24:06" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-responsive.js" time="30.0030" failures="1">
    <testcase name="[v1.0] amp-base-carousel - responsive attributes chrome  Standalone environment  &quot;before each&quot; hook for &quot;should layout correctly initially&quot;" time="30.0030" classname="&quot;before each&quot; hook for &quot;should layout correctly initially&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-responsive.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-responsive.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:25:07" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-responsive.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:25:07" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-responsive.js" time="30.5790" failures="1">
    <testcase name="[v1.0] amp-base-carousel - responsive attributes chrome  Viewer environment  &quot;before each&quot; hook for &quot;should layout correctly initially&quot;" time="30.5790" classname="&quot;before each&quot; hook for &quot;should layout correctly initially&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-responsive.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-responsive.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v1.0] amp-base-carousel - rtl" timestamp="2021-04-28T23:26:08" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-rtl.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:26:08" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-rtl.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:26:08" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-rtl.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:26:08" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-rtl.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="[v1.0] amp-base-carousel - vertical orientation" timestamp="2021-04-28T23:26:08" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-vertical.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:26:08" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-vertical.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:26:08" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-vertical.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:26:08" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-vertical.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="looping" timestamp="2021-04-28T23:26:08" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-vertical.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:26:08" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-vertical.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:26:08" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-vertical.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="looping" timestamp="2021-04-28T23:26:08" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-base-carousel/1.0/test-e2e/test-vertical.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="AMP carousel 0.1 buttons with hidden controls" timestamp="2021-04-28T23:26:08" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.1/test-e2e/test-hidden-controls.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:26:08" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.1/test-e2e/test-hidden-controls.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:26:08" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.1/test-e2e/test-hidden-controls.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:26:08" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.1/test-e2e/test-hidden-controls.js" time="30.0060" failures="1">
    <testcase name="AMP carousel 0.1 buttons with hidden controls chrome  Standalone environment  &quot;before each&quot; hook for &quot;should not go to the next slide&quot;" time="30.0060" classname="&quot;before each&quot; hook for &quot;should not go to the next slide&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.1/test-e2e/test-hidden-controls.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.1/test-e2e/test-hidden-controls.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="AMP carousel 0.1 slideChange on type=&quot;slide&quot; with autoplay" timestamp="2021-04-28T23:27:09" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.1/test-e2e/test-slidescroll-autoplay.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:27:09" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.1/test-e2e/test-slidescroll-autoplay.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:27:09" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.1/test-e2e/test-slidescroll-autoplay.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:27:09" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.1/test-e2e/test-slidescroll-autoplay.js" time="30.1380" failures="1">
    <testcase name="AMP carousel 0.1 slideChange on type=&quot;slide&quot; with autoplay chrome  Standalone environment  &quot;before each&quot; hook for &quot;should fire low trust event for autoplay advance&quot;" time="30.1380" classname="&quot;before each&quot; hook for &quot;should fire low trust event for autoplay advance&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.1/test-e2e/test-slidescroll-autoplay.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.1/test-e2e/test-slidescroll-autoplay.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp carousel:0.2 in lightbox" timestamp="2021-04-28T23:28:10" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.2/test/test-e2e/test-arrows-in-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:28:10" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.2/test/test-e2e/test-arrows-in-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:28:10" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.2/test/test-e2e/test-arrows-in-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:28:10" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.2/test/test-e2e/test-arrows-in-lightbox.js" time="30.0060" failures="1">
    <testcase name="amp carousel:0.2 in lightbox chrome  Standalone environment  &quot;before each&quot; hook for &quot;should open with both arrows&quot;" time="30.0060" classname="&quot;before each&quot; hook for &quot;should open with both arrows&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.2/test/test-e2e/test-arrows-in-lightbox.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.2/test/test-e2e/test-arrows-in-lightbox.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="AMP carousel 0.2 with responsive slides" timestamp="2021-04-28T23:29:10" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.2/test/test-e2e/test-repsonsive-slides.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:29:10" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.2/test/test-e2e/test-repsonsive-slides.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:29:10" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.2/test/test-e2e/test-repsonsive-slides.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:29:10" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.2/test/test-e2e/test-repsonsive-slides.js" time="30.0040" failures="1">
    <testcase name="AMP carousel 0.2 with responsive slides chrome  Standalone environment  &quot;before each&quot; hook for &quot;layout properly and show images&quot;" time="30.0040" classname="&quot;before each&quot; hook for &quot;layout properly and show images&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.2/test/test-e2e/test-repsonsive-slides.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-carousel/0.2/test/test-e2e/test-repsonsive-slides.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-consent" timestamp="2021-04-28T23:30:11" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-amp-consent-client-side.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:30:11" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-amp-consent-client-side.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:30:11" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-amp-consent-client-side.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:30:11" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-amp-consent-client-side.js" time="30.0050" failures="1">
    <testcase name="amp-consent chrome  Standalone environment  &quot;before each&quot; hook for &quot;should work with client side decision&quot;" time="30.0050" classname="&quot;before each&quot; hook for &quot;should work with client side decision&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-amp-consent-client-side.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-amp-consent-client-side.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-consent" timestamp="2021-04-28T23:31:12" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-amp-consent-server-side-expire-cache.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:31:12" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-amp-consent-server-side-expire-cache.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:31:12" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-amp-consent-server-side-expire-cache.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:31:12" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-amp-consent-server-side-expire-cache.js" time="30.0030" failures="1">
    <testcase name="amp-consent chrome  Standalone environment  &quot;before each&quot; hook for &quot;should respect server side decision and clear on next visit&quot;" time="30.0030" classname="&quot;before each&quot; hook for &quot;should respect server side decision and clear on next visit&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-amp-consent-server-side-expire-cache.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-amp-consent-server-side-expire-cache.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-consent" timestamp="2021-04-28T23:32:13" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-amp-consent-server-side.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:32:13" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-amp-consent-server-side.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:32:13" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-amp-consent-server-side.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:32:13" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-amp-consent-server-side.js" time="30.0050" failures="1">
    <testcase name="amp-consent chrome  Standalone environment  &quot;before each&quot; hook for &quot;should respect server side decision and persist it&quot;" time="30.0050" classname="&quot;before each&quot; hook for &quot;should respect server side decision and persist it&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-amp-consent-server-side.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-amp-consent-server-side.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-consent" timestamp="2021-04-28T23:33:14" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-cmp-ui-interaction.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:33:14" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-cmp-ui-interaction.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:33:14" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-cmp-ui-interaction.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:33:14" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-cmp-ui-interaction.js" time="30.0060" failures="1">
    <testcase name="amp-consent chrome  Standalone environment  &quot;before each&quot; hook for &quot;should restrict fullscreen until user interaction&quot;" time="30.0060" classname="&quot;before each&quot; hook for &quot;should restrict fullscreen until user interaction&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-cmp-ui-interaction.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-consent/0.1/test-e2e/test-cmp-ui-interaction.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v1.0] amp-date-countdown" timestamp="2021-04-28T23:34:14" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-date-countdown/1.0/test-e2e/test-amp-date-countdown.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:34:14" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-date-countdown/1.0/test-e2e/test-amp-date-countdown.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:34:14" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-date-countdown/1.0/test-e2e/test-amp-date-countdown.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:34:14" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-date-countdown/1.0/test-e2e/test-amp-date-countdown.js" time="30.0110" failures="1">
    <testcase name="[v1.0] amp-date-countdown chrome  Standalone environment  &quot;before each&quot; hook for &quot;renders a custom mustache template&quot;" time="30.0110" classname="&quot;before each&quot; hook for &quot;renders a custom mustache template&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-date-countdown/1.0/test-e2e/test-amp-date-countdown.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-date-countdown/1.0/test-e2e/test-amp-date-countdown.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:35:15" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-date-countdown/1.0/test-e2e/test-amp-date-countdown.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:35:15" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-date-countdown/1.0/test-e2e/test-amp-date-countdown.js" time="30.0050" failures="1">
    <testcase name="[v1.0] amp-date-countdown chrome  Viewer environment  &quot;before each&quot; hook for &quot;renders a custom mustache template&quot;" time="30.0050" classname="&quot;before each&quot; hook for &quot;renders a custom mustache template&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-date-countdown/1.0/test-e2e/test-amp-date-countdown.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-date-countdown/1.0/test-e2e/test-amp-date-countdown.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-date-picker" timestamp="2021-04-28T23:36:17" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-date-picker/0.1/test-e2e/test-blocked-dates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:36:17" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-date-picker/0.1/test-e2e/test-blocked-dates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:36:17" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-date-picker/0.1/test-e2e/test-blocked-dates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:36:17" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-date-picker/0.1/test-e2e/test-blocked-dates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with allow-blocked-end-date" timestamp="2021-04-28T23:36:17" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-date-picker/0.1/test-e2e/test-blocked-dates.js" time="30.0080" failures="1">
    <testcase name="amp-date-picker chrome  Standalone environment  &quot;before each&quot; hook for &quot;should be able to select an available date&quot;" time="30.0080" classname="&quot;before each&quot; hook for &quot;should be able to select an available date&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-date-picker/0.1/test-e2e/test-blocked-dates.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-date-picker/0.1/test-e2e/test-blocked-dates.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:37:19" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-date-picker/0.1/test-e2e/test-blocked-dates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:37:19" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-date-picker/0.1/test-e2e/test-blocked-dates.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with allow-blocked-end-date" timestamp="2021-04-28T23:37:19" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-date-picker/0.1/test-e2e/test-blocked-dates.js" time="30.5490" failures="1">
    <testcase name="amp-date-picker chrome  Viewer environment  &quot;before each&quot; hook for &quot;should be able to select an available date&quot;" time="30.5490" classname="&quot;before each&quot; hook for &quot;should be able to select an available date&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-date-picker/0.1/test-e2e/test-blocked-dates.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-date-picker/0.1/test-e2e/test-blocked-dates.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-fit-text" timestamp="2021-04-28T23:38:19" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:38:19" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:38:19" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:38:19" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js" time="30.4930" failures="1">
    <testcase name="amp-fit-text chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render in correct font-size&quot;" time="30.4930" classname="&quot;before each&quot; hook for &quot;should render in correct font-size&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:39:20" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:39:20" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js" time="30.0020" failures="1">
    <testcase name="amp-fit-text chrome  Viewer environment  &quot;before each&quot; hook for &quot;should render in correct font-size&quot;" time="30.0020" classname="&quot;before each&quot; hook for &quot;should render in correct font-size&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Shadow environment " timestamp="2021-04-28T23:40:21" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:40:21" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js" time="30.0060" failures="1">
    <testcase name="amp-fit-text chrome  Shadow environment  &quot;before each&quot; hook for &quot;should render in correct font-size&quot;" time="30.0060" classname="&quot;before each&quot; hook for &quot;should render in correct font-size&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads FIE environment " timestamp="2021-04-28T23:41:22" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:41:22" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js" time="30.3130" failures="1">
    <testcase name="amp-fit-text chrome  AMPHTML ads FIE environment  &quot;before each&quot; hook for &quot;should render in correct font-size&quot;" time="30.3130" classname="&quot;before each&quot; hook for &quot;should render in correct font-size&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox environment " timestamp="2021-04-28T23:42:23" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:42:23" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js" time="30.5610" failures="1">
    <testcase name="amp-fit-text chrome  AMPHTML ads inabox environment  &quot;before each&quot; hook for &quot;should render in correct font-size&quot;" time="30.5610" classname="&quot;before each&quot; hook for &quot;should render in correct font-size&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox friendly frame environment " timestamp="2021-04-28T23:43:24" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:43:24" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js" time="30.4680" failures="1">
    <testcase name="amp-fit-text chrome  AMPHTML ads inabox friendly frame environment  &quot;before each&quot; hook for &quot;should render in correct font-size&quot;" time="30.4680" classname="&quot;before each&quot; hook for &quot;should render in correct font-size&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox safeframe environment " timestamp="2021-04-28T23:44:25" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:44:25" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js" time="30.5450" failures="1">
    <testcase name="amp-fit-text chrome  AMPHTML ads inabox safeframe environment  &quot;before each&quot; hook for &quot;should render in correct font-size&quot;" time="30.5450" classname="&quot;before each&quot; hook for &quot;should render in correct font-size&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/0.1/test-e2e/test-amp-fit-text.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-fit-text" timestamp="2021-04-28T23:45:26" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/1.0/test-e2e/test-amp-fit-text.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:45:26" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/1.0/test-e2e/test-amp-fit-text.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:45:26" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/1.0/test-e2e/test-amp-fit-text.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:45:26" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/1.0/test-e2e/test-amp-fit-text.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:45:26" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/1.0/test-e2e/test-amp-fit-text.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:45:26" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/1.0/test-e2e/test-amp-fit-text.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Shadow environment " timestamp="2021-04-28T23:45:26" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/1.0/test-e2e/test-amp-fit-text.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:45:26" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-fit-text/1.0/test-e2e/test-amp-fit-text.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="amp-form" timestamp="2021-04-28T23:45:26" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-form/0.1/test-e2e/test-ssr.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:45:26" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-form/0.1/test-e2e/test-ssr.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:45:26" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-form/0.1/test-e2e/test-ssr.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:45:26" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-form/0.1/test-e2e/test-ssr.js" time="31.3950" failures="1">
    <testcase name="amp-form chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render form response&quot;" time="31.3950" classname="&quot;before each&quot; hook for &quot;should render form response&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-form/0.1/test-e2e/test-ssr.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-form/0.1/test-e2e/test-ssr.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-form SSR templates" timestamp="2021-04-28T23:46:28" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-form/0.1/test-e2e/test-ssr.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:46:28" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-form/0.1/test-e2e/test-ssr.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:46:28" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-form/0.1/test-e2e/test-ssr.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:46:28" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-form/0.1/test-e2e/test-ssr.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="AMP Lightbox Gallery Open/Close" timestamp="2021-04-28T23:46:28" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox-gallery/0.1/test-e2e/test-open-close.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:46:28" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox-gallery/0.1/test-e2e/test-open-close.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:46:28" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox-gallery/0.1/test-e2e/test-open-close.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:46:28" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox-gallery/0.1/test-e2e/test-open-close.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="[v1.0] amp-lightbox custom close button" timestamp="2021-04-28T23:46:28" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/1.0/test-e2e/test-custom-close-button.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:46:28" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/1.0/test-e2e/test-custom-close-button.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:46:28" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/1.0/test-e2e/test-custom-close-button.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:46:28" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/1.0/test-e2e/test-custom-close-button.js" time="30.4020" failures="1">
    <testcase name="[v1.0] amp-lightbox custom close button chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.4020" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/1.0/test-e2e/test-custom-close-button.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/1.0/test-e2e/test-custom-close-button.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:47:28" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/1.0/test-e2e/test-custom-close-button.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:47:28" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/1.0/test-e2e/test-custom-close-button.js" time="30.4530" failures="1">
    <testcase name="[v1.0] amp-lightbox custom close button chrome  Viewer environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.4530" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/1.0/test-e2e/test-custom-close-button.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/1.0/test-e2e/test-custom-close-button.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v0.1] amp-lightbox with amp-autocomplete" timestamp="2021-04-28T23:48:29" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox-autocomplete.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:48:29" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox-autocomplete.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:48:29" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox-autocomplete.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:48:29" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox-autocomplete.js" time="30.0110" failures="1">
    <testcase name="[v0.1] amp-lightbox with amp-autocomplete chrome  Standalone environment  &quot;before each&quot; hook for &quot;should show autocomplete options when lightbox opens&quot;" time="30.0110" classname="&quot;before each&quot; hook for &quot;should show autocomplete options when lightbox opens&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox-autocomplete.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox-autocomplete.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:49:30" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox-autocomplete.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:49:30" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox-autocomplete.js" time="30.0070" failures="1">
    <testcase name="[v0.1] amp-lightbox with amp-autocomplete chrome  Viewer environment  &quot;before each&quot; hook for &quot;should show autocomplete options when lightbox opens&quot;" time="30.0070" classname="&quot;before each&quot; hook for &quot;should show autocomplete options when lightbox opens&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox-autocomplete.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox-autocomplete.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Shadow environment " timestamp="2021-04-28T23:50:33" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox-autocomplete.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:50:33" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox-autocomplete.js" time="30.9630" failures="1">
    <testcase name="[v0.1] amp-lightbox with amp-autocomplete chrome  Shadow environment  &quot;before each&quot; hook for &quot;should show autocomplete options when lightbox opens&quot;" time="30.9630" classname="&quot;before each&quot; hook for &quot;should show autocomplete options when lightbox opens&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox-autocomplete.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox-autocomplete.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v0.1] amp-lightbox" timestamp="2021-04-28T23:51:35" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:51:35" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:51:35" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:51:35" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="30.4160" failures="1">
    <testcase name="[v0.1] amp-lightbox chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.4160" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:52:35" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:52:35" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="30.4100" failures="1">
    <testcase name="[v0.1] amp-lightbox chrome  Viewer environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.4100" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Shadow environment " timestamp="2021-04-28T23:53:37" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:53:37" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="38.7900" failures="1">
    <testcase name="[v0.1] amp-lightbox chrome  Shadow environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="38.7900" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads FIE environment " timestamp="2021-04-28T23:54:46" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:54:46" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="30.4640" failures="1">
    <testcase name="[v0.1] amp-lightbox chrome  AMPHTML ads FIE environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.4640" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox environment " timestamp="2021-04-28T23:55:47" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:55:47" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="30.5350" failures="1">
    <testcase name="[v0.1] amp-lightbox chrome  AMPHTML ads inabox environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.5350" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox friendly frame environment " timestamp="2021-04-28T23:56:48" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:56:48" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="30.0110" failures="1">
    <testcase name="[v0.1] amp-lightbox chrome  AMPHTML ads inabox friendly frame environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.0110" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox safeframe environment " timestamp="2021-04-28T23:57:49" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:57:49" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="30.5990" failures="1">
    <testcase name="[v0.1] amp-lightbox chrome  AMPHTML ads inabox safeframe environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.5990" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v1.0] amp-lightbox" timestamp="2021-04-28T23:58:50" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-28T23:58:50" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-28T23:58:50" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:58:50" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="30.5620" failures="1">
    <testcase name="[v1.0] amp-lightbox chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.5620" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-28T23:59:51" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-28T23:59:51" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js" time="30.5050" failures="1">
    <testcase name="[v1.0] amp-lightbox chrome  Viewer environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.5050" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-lightbox/test-e2e/test-amp-lightbox.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-list &quot;amp-script:&quot; uri" timestamp="2021-04-29T00:00:52" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-function-src.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:00:52" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-function-src.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:00:52" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-function-src.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:00:52" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-function-src.js" time="30.0070" failures="1">
    <testcase name="amp-list &quot;amp-script:&quot; uri chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render list backed by amp-script data&quot;" time="30.0070" classname="&quot;before each&quot; hook for &quot;should render list backed by amp-script data&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-function-src.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-function-src.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-list &quot;amp-script:&quot; with load-more" timestamp="2021-04-29T00:01:52" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-function-src.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:01:52" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-function-src.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:01:52" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-function-src.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:01:52" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-function-src.js" time="30.0110" failures="1">
    <testcase name="amp-list &quot;amp-script:&quot; with load-more chrome  Standalone environment  &quot;before each&quot; hook for &quot;should load more when button is clicked until no more load-more-src&quot;" time="30.0110" classname="&quot;before each&quot; hook for &quot;should load more when button is clicked until no more load-more-src&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-function-src.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-function-src.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="AMP list load-more=auto" timestamp="2021-04-29T00:02:55" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-load-more-auto.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:02:55" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-load-more-auto.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:02:55" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-load-more-auto.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:02:55" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-load-more-auto.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="AMP list load-more=manual" timestamp="2021-04-29T00:02:55" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-load-more-manual.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:02:55" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-load-more-manual.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:02:55" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-load-more-manual.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:02:55" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-load-more-manual.js" time="30.0110" failures="1">
    <testcase name="AMP list load-more=manual chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.0110" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-load-more-manual.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-load-more-manual.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-list SSR templates" timestamp="2021-04-29T00:03:56" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-ssr.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:03:56" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-ssr.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-29T00:03:56" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-ssr.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:03:56" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-ssr.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="amp-list" timestamp="2021-04-29T00:03:56" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-ssr.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:03:56" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-ssr.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:03:56" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-ssr.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:03:56" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-ssr.js" time="30.0100" failures="1">
    <testcase name="amp-list chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render list&quot;" time="30.0100" classname="&quot;before each&quot; hook for &quot;should render list&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-ssr.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-list/0.1/test-e2e/test-ssr.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-position-observer in AMPHTML ad" timestamp="2021-04-29T00:04:57" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-scrollbound-animation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:04:57" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-scrollbound-animation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" AMPHTML ads FIE environment " timestamp="2021-04-29T00:04:57" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-scrollbound-animation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:04:57" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-scrollbound-animation.js" time="30.0110" failures="1">
    <testcase name="amp-position-observer in AMPHTML ad chrome  AMPHTML ads FIE environment  &quot;before each&quot; hook for &quot;should animate clock hand while scrolling&quot;" time="30.0110" classname="&quot;before each&quot; hook for &quot;should animate clock hand while scrolling&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-scrollbound-animation.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-scrollbound-animation.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox environment " timestamp="2021-04-29T00:05:58" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-scrollbound-animation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:05:58" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-scrollbound-animation.js" time="30.5590" failures="1">
    <testcase name="amp-position-observer in AMPHTML ad chrome  AMPHTML ads inabox environment  &quot;before each&quot; hook for &quot;should animate clock hand while scrolling&quot;" time="30.5590" classname="&quot;before each&quot; hook for &quot;should animate clock hand while scrolling&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-scrollbound-animation.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-scrollbound-animation.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox friendly frame environment " timestamp="2021-04-29T00:06:58" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-scrollbound-animation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:06:58" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-scrollbound-animation.js" time="30.5420" failures="1">
    <testcase name="amp-position-observer in AMPHTML ad chrome  AMPHTML ads inabox friendly frame environment  &quot;before each&quot; hook for &quot;should animate clock hand while scrolling&quot;" time="30.5420" classname="&quot;before each&quot; hook for &quot;should animate clock hand while scrolling&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-scrollbound-animation.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-scrollbound-animation.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox safeframe environment " timestamp="2021-04-29T00:07:59" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-scrollbound-animation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:07:59" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-scrollbound-animation.js" time="30.0100" failures="1">
    <testcase name="amp-position-observer in AMPHTML ad chrome  AMPHTML ads inabox safeframe environment  &quot;before each&quot; hook for &quot;should animate clock hand while scrolling&quot;" time="30.0100" classname="&quot;before each&quot; hook for &quot;should animate clock hand while scrolling&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-scrollbound-animation.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-scrollbound-animation.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-position-observer target in AMPHTML ad" timestamp="2021-04-29T00:09:00" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-target-id.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:09:00" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-target-id.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" AMPHTML ads FIE environment " timestamp="2021-04-29T00:09:00" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-target-id.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:09:00" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-target-id.js" time="30.4300" failures="1">
    <testcase name="amp-position-observer target in AMPHTML ad chrome  AMPHTML ads FIE environment  &quot;before each&quot; hook for &quot;should animate clock hand while scrolling&quot;" time="30.4300" classname="&quot;before each&quot; hook for &quot;should animate clock hand while scrolling&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-target-id.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-target-id.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox environment " timestamp="2021-04-29T00:10:01" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-target-id.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:10:01" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-target-id.js" time="30.5710" failures="1">
    <testcase name="amp-position-observer target in AMPHTML ad chrome  AMPHTML ads inabox environment  &quot;before each&quot; hook for &quot;should animate clock hand while scrolling&quot;" time="30.5710" classname="&quot;before each&quot; hook for &quot;should animate clock hand while scrolling&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-target-id.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-target-id.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox friendly frame environment " timestamp="2021-04-29T00:11:02" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-target-id.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:11:02" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-target-id.js" time="32.0530" failures="1">
    <testcase name="amp-position-observer target in AMPHTML ad chrome  AMPHTML ads inabox friendly frame environment  &quot;before each&quot; hook for &quot;should animate clock hand while scrolling&quot;" time="32.0530" classname="&quot;before each&quot; hook for &quot;should animate clock hand while scrolling&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-target-id.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-target-id.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox safeframe environment " timestamp="2021-04-29T00:12:03" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-target-id.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:12:03" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-target-id.js" time="30.0100" failures="1">
    <testcase name="amp-position-observer target in AMPHTML ad chrome  AMPHTML ads inabox safeframe environment  &quot;before each&quot; hook for &quot;should animate clock hand while scrolling&quot;" time="30.0100" classname="&quot;before each&quot; hook for &quot;should animate clock hand while scrolling&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-target-id.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-position-observer/0.1/test-e2e/test-target-id.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-script e2e" timestamp="2021-04-29T00:13:03" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-script/0.1/test-e2e/test-amp-script.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:13:03" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-script/0.1/test-e2e/test-amp-script.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:13:03" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-script/0.1/test-e2e/test-amp-script.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:13:03" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-script/0.1/test-e2e/test-amp-script.js" time="32.7760" failures="1">
    <testcase name="amp-script e2e chrome  Standalone environment  &quot;before each&quot; hook for &quot;should support local scripts&quot;" time="32.7760" classname="&quot;before each&quot; hook for &quot;should support local scripts&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-script/0.1/test-e2e/test-amp-script.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-script/0.1/test-e2e/test-amp-script.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="safari" timestamp="2021-04-29T00:14:09" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-script/0.1/test-e2e/test-amp-script.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:14:09" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-script/0.1/test-e2e/test-amp-script.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:14:09" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-script/0.1/test-e2e/test-amp-script.js" time="30.0670" failures="1">
    <testcase name="amp-script e2e safari  Standalone environment  &quot;before each&quot; hook for &quot;should support local scripts&quot;" time="30.0670" classname="&quot;before each&quot; hook for &quot;should support local scripts&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-script/0.1/test-e2e/test-amp-script.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-script/0.1/test-e2e/test-amp-script.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v0.1] amp-selector" timestamp="2021-04-29T00:14:40" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:14:40" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:14:40" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:14:40" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js" time="30.4060" failures="1">
    <testcase name="[v0.1] amp-selector chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.4060" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-29T00:15:41" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:15:41" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js" time="30.4190" failures="1">
    <testcase name="[v0.1] amp-selector chrome  Viewer environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.4190" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v1.0] amp-selector" timestamp="2021-04-29T00:16:42" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:16:42" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:16:42" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:16:42" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js" time="30.4820" failures="1">
    <testcase name="[v1.0] amp-selector chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.4820" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-29T00:17:43" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:17:43" tests="3" file="/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js" time="30.4920" failures="1">
    <testcase name="[v1.0] amp-selector chrome  Viewer environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.4920" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-selector/test-e2e/test-amp-selector-tabs.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-sidebar with toolbar" timestamp="2021-04-29T00:18:44" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar-toolbar.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:18:44" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar-toolbar.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:18:44" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar-toolbar.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:18:44" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar-toolbar.js" time="30.6430" failures="1">
    <testcase name="amp-sidebar with toolbar chrome  Standalone environment  &quot;before each&quot; hook for &quot;should trigger the toolbar layout when viewport is resized&quot;" time="30.6430" classname="&quot;before each&quot; hook for &quot;should trigger the toolbar layout when viewport is resized&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar-toolbar.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar-toolbar.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-29T00:19:45" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar-toolbar.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:19:45" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar-toolbar.js" time="32.4190" failures="1">
    <testcase name="amp-sidebar with toolbar chrome  Viewer environment  &quot;before each&quot; hook for &quot;should trigger the toolbar layout when viewport is resized&quot;" time="32.4190" classname="&quot;before each&quot; hook for &quot;should trigger the toolbar layout when viewport is resized&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar-toolbar.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar-toolbar.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v0.1] amp-sidebar" timestamp="2021-04-29T00:20:52" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:20:52" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:20:52" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:20:52" tests="5" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar.js" time="30.6140" failures="1">
    <testcase name="[v0.1] amp-sidebar chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.6140" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-29T00:21:52" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:21:52" tests="5" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar.js" time="30.0100" failures="1">
    <testcase name="[v0.1] amp-sidebar chrome  Viewer environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.0100" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.1/test-e2e/test-amp-sidebar.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-sidebar" timestamp="2021-04-29T00:22:53" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.2/test-e2e/test-amp-sidebar.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:22:53" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.2/test-e2e/test-amp-sidebar.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:22:53" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.2/test-e2e/test-amp-sidebar.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:22:53" tests="5" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.2/test-e2e/test-amp-sidebar.js" time="30.5240" failures="1">
    <testcase name="amp-sidebar chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.5240" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.2/test-e2e/test-amp-sidebar.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.2/test-e2e/test-amp-sidebar.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-29T00:23:54" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.2/test-e2e/test-amp-sidebar.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:23:54" tests="5" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.2/test-e2e/test-amp-sidebar.js" time="30.4070" failures="1">
    <testcase name="amp-sidebar chrome  Viewer environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.4070" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.2/test-e2e/test-amp-sidebar.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/0.2/test-e2e/test-amp-sidebar.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v1.0] amp-sidebar" timestamp="2021-04-29T00:24:55" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/1.0/test-e2e/test-amp-sidebar.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:24:55" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/1.0/test-e2e/test-amp-sidebar.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:24:55" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/1.0/test-e2e/test-amp-sidebar.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:24:55" tests="5" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/1.0/test-e2e/test-amp-sidebar.js" time="30.7060" failures="1">
    <testcase name="[v1.0] amp-sidebar chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.7060" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/1.0/test-e2e/test-amp-sidebar.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/1.0/test-e2e/test-amp-sidebar.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-29T00:25:56" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/1.0/test-e2e/test-amp-sidebar.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:25:56" tests="5" file="/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/1.0/test-e2e/test-amp-sidebar.js" time="30.0070" failures="1">
    <testcase name="[v1.0] amp-sidebar chrome  Viewer environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.0070" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/1.0/test-e2e/test-amp-sidebar.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-sidebar/1.0/test-e2e/test-amp-sidebar.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="[v1.0] amp-social-share" timestamp="2021-04-29T00:26:58" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-social-share/1.0/test-e2e/test-amp-social-share.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:26:58" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-social-share/1.0/test-e2e/test-amp-social-share.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:26:58" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-social-share/1.0/test-e2e/test-amp-social-share.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:26:58" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-social-share/1.0/test-e2e/test-amp-social-share.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="rendering" timestamp="2021-04-29T00:26:58" tests="6" file="/Users/rileyjones/amp/amphtml/extensions/amp-social-share/1.0/test-e2e/test-amp-social-share.js" time="30.1870" failures="1">
    <testcase name="[v1.0] amp-social-share chrome  Standalone environment  &quot;before each&quot; hook for &quot;renders the default social share button&quot;" time="30.1870" classname="&quot;before each&quot; hook for &quot;renders the default social share button&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-social-share/1.0/test-e2e/test-amp-social-share.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-social-share/1.0/test-e2e/test-amp-social-share.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" Viewer environment " timestamp="2021-04-29T00:27:59" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-social-share/1.0/test-e2e/test-amp-social-share.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:27:59" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-social-share/1.0/test-e2e/test-amp-social-share.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="rendering" timestamp="2021-04-29T00:27:59" tests="6" file="/Users/rileyjones/amp/amphtml/extensions/amp-social-share/1.0/test-e2e/test-amp-social-share.js" time="30.0190" failures="1">
    <testcase name="[v1.0] amp-social-share chrome  Viewer environment  &quot;before each&quot; hook for &quot;renders the default social share button&quot;" time="30.0190" classname="&quot;before each&quot; hook for &quot;renders the default social share button&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-social-share/1.0/test-e2e/test-amp-social-share.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-social-share/1.0/test-e2e/test-amp-social-share.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-story-auto-ads:fullbleed" timestamp="2021-04-29T00:29:00" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-auto-ads/0.1/test-e2e/test-amp-story-auto-ads-fullbleed.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:29:00" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-auto-ads/0.1/test-e2e/test-amp-story-auto-ads-fullbleed.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:29:00" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-auto-ads/0.1/test-e2e/test-amp-story-auto-ads-fullbleed.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:29:00" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-auto-ads/0.1/test-e2e/test-amp-story-auto-ads-fullbleed.js" time="32.1020" failures="1">
    <testcase name="amp-story-auto-ads:fullbleed chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="32.1020" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-story-auto-ads/0.1/test-e2e/test-amp-story-auto-ads-fullbleed.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-story-auto-ads/0.1/test-e2e/test-amp-story-auto-ads-fullbleed.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-story-auto-ads:basic" timestamp="2021-04-29T00:30:02" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-auto-ads/0.1/test-e2e/test-amp-story-auto-ads.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:30:02" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-auto-ads/0.1/test-e2e/test-amp-story-auto-ads.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:30:02" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-auto-ads/0.1/test-e2e/test-amp-story-auto-ads.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:30:02" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-auto-ads/0.1/test-e2e/test-amp-story-auto-ads.js" time="35.2460" failures="1">
    <testcase name="amp-story-auto-ads:basic chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="35.2460" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-story-auto-ads/0.1/test-e2e/test-amp-story-auto-ads.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-story-auto-ads/0.1/test-e2e/test-amp-story-auto-ads.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-story-auto-ads:dv3" timestamp="2021-04-29T00:31:04" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-auto-ads/0.1/test-e2e/test-amp-story-auto-ads.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:31:04" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-auto-ads/0.1/test-e2e/test-amp-story-auto-ads.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:31:04" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-auto-ads/0.1/test-e2e/test-amp-story-auto-ads.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:31:04" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-auto-ads/0.1/test-e2e/test-amp-story-auto-ads.js" time="30.5930" failures="1">
    <testcase name="amp-story-auto-ads:dv3 chrome  Standalone environment  &quot;before each&quot; hook for &quot;should render correctly&quot;" time="30.5930" classname="&quot;before each&quot; hook for &quot;should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-story-auto-ads/0.1/test-e2e/test-amp-story-auto-ads.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-story-auto-ads/0.1/test-e2e/test-amp-story-auto-ads.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="story player navigation" timestamp="2021-04-29T00:32:05" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-player/0.1/test/test-e2e/test-amp-story-player-navigation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:32:05" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-player/0.1/test/test-e2e/test-amp-story-player-navigation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:32:05" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-player/0.1/test/test-e2e/test-amp-story-player-navigation.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:32:05" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-player/0.1/test/test-e2e/test-amp-story-player-navigation.js" time="30.7360" failures="1">
    <testcase name="story player navigation chrome  Standalone environment  &quot;before each&quot; hook for &quot;first story should be playing video&quot;" time="30.7360" classname="&quot;before each&quot; hook for &quot;first story should be playing video&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-story-player/0.1/test/test-e2e/test-amp-story-player-navigation.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-story-player/0.1/test/test-e2e/test-amp-story-player-navigation.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="player prerendering" timestamp="2021-04-29T00:33:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-player/0.1/test/test-e2e/test-amp-story-player-prerender.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:33:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-player/0.1/test/test-e2e/test-amp-story-player-prerender.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:33:06" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-player/0.1/test/test-e2e/test-amp-story-player-prerender.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:33:06" tests="4" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-player/0.1/test/test-e2e/test-amp-story-player-prerender.js" time="30.2450" failures="1">
    <testcase name="player prerendering chrome  Standalone environment  &quot;before each&quot; hook for &quot;when player is not visible in first viewport, it builds the shadow DOM container&quot;" time="30.2450" classname="&quot;before each&quot; hook for &quot;when player is not visible in first viewport, it builds the shadow DOM container&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-story-player/0.1/test/test-e2e/test-amp-story-player-prerender.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-story-player/0.1/test/test-e2e/test-amp-story-player-prerender.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="player prerendering" timestamp="2021-04-29T00:34:08" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-player/0.1/test/test-e2e/test-amp-story-player.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:34:08" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-player/0.1/test/test-e2e/test-amp-story-player.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:34:08" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-player/0.1/test/test-e2e/test-amp-story-player.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:34:08" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-story-player/0.1/test/test-e2e/test-amp-story-player.js" time="30.5570" failures="1">
    <testcase name="player prerendering chrome  Standalone environment  &quot;before each&quot; hook for &quot;loads and displays first story on page load when player is visible in viewport&quot;" time="30.5570" classname="&quot;before each&quot; hook for &quot;loads and displays first story on page load when player is visible in viewport&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-story-player/0.1/test/test-e2e/test-amp-story-player.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-story-player/0.1/test/test-e2e/test-amp-story-player.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp story bookend" timestamp="2021-04-29T00:35:08" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story/1.0/test-e2e/test-amp-story-bookend.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:35:08" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story/1.0/test-e2e/test-amp-story-bookend.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:35:08" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story/1.0/test-e2e/test-amp-story-bookend.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:35:08" tests="2" file="/Users/rileyjones/amp/amphtml/extensions/amp-story/1.0/test-e2e/test-amp-story-bookend.js" time="31.4600" failures="1">
    <testcase name="amp story bookend chrome  Standalone environment  &quot;before each&quot; hook for &quot;should display bookend at the end of the story&quot;" time="31.4600" classname="&quot;before each&quot; hook for &quot;should display bookend at the end of the story&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-story/1.0/test-e2e/test-amp-story-bookend.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-story/1.0/test-e2e/test-amp-story-bookend.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp story share menu" timestamp="2021-04-29T00:36:10" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story/1.0/test-e2e/test-amp-story-share-menu.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:36:10" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story/1.0/test-e2e/test-amp-story-share-menu.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:36:10" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-story/1.0/test-e2e/test-amp-story-share-menu.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:36:10" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-story/1.0/test-e2e/test-amp-story-share-menu.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="amp-subscriptions-google" timestamp="2021-04-29T00:36:10" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-subscriptions-google/0.1/test-e2e/test-amp-subscriptions-google.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:36:10" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-subscriptions-google/0.1/test-e2e/test-amp-subscriptions-google.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:36:10" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-subscriptions-google/0.1/test-e2e/test-amp-subscriptions-google.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:36:10" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-subscriptions-google/0.1/test-e2e/test-amp-subscriptions-google.js" time="31.6710" failures="1">
    <testcase name="amp-subscriptions-google chrome  Standalone environment  &quot;before each&quot; hook for &quot;Subscription offers should render correctly&quot;" time="31.6710" classname="&quot;before each&quot; hook for &quot;Subscription offers should render correctly&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-subscriptions-google/0.1/test-e2e/test-amp-subscriptions-google.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-subscriptions-google/0.1/test-e2e/test-amp-subscriptions-google.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-video with video analytics" timestamp="2021-04-29T00:37:11" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video-analytics.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:37:11" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video-analytics.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" Standalone environment " timestamp="2021-04-29T00:37:11" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video-analytics.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:37:11" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video-analytics.js" time="33.4220" failures="1">
    <testcase name="amp-video with video analytics chrome  Standalone environment  &quot;before each&quot; hook for &quot;control buttons should manipulate video box behavior&quot;" time="33.4220" classname="&quot;before each&quot; hook for &quot;control buttons should manipulate video box behavior&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video-analytics.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video-analytics.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="amp-video autoplay with control" timestamp="2021-04-29T00:38:12" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="chrome" timestamp="2021-04-29T00:38:12" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" AMPHTML ads FIE environment " timestamp="2021-04-29T00:38:12" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:38:12" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video.js" time="30.6400" failures="1">
    <testcase name="amp-video autoplay with control chrome  AMPHTML ads FIE environment  &quot;before each&quot; hook for &quot;control buttons should manipulate video box behavior&quot;" time="30.6400" classname="&quot;before each&quot; hook for &quot;control buttons should manipulate video box behavior&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox environment " timestamp="2021-04-29T00:39:13" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:39:13" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video.js" time="30.0120" failures="1">
    <testcase name="amp-video autoplay with control chrome  AMPHTML ads inabox environment  &quot;before each&quot; hook for &quot;control buttons should manipulate video box behavior&quot;" time="30.0120" classname="&quot;before each&quot; hook for &quot;control buttons should manipulate video box behavior&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox friendly frame environment " timestamp="2021-04-29T00:40:14" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:40:14" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video.js" time="31.6910" failures="1">
    <testcase name="amp-video autoplay with control chrome  AMPHTML ads inabox friendly frame environment  &quot;before each&quot; hook for &quot;control buttons should manipulate video box behavior&quot;" time="31.6910" classname="&quot;before each&quot; hook for &quot;control buttons should manipulate video box behavior&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
  <testsuite name=" AMPHTML ads inabox safeframe environment " timestamp="2021-04-29T00:41:16" tests="0" file="/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name=" " timestamp="2021-04-29T00:41:16" tests="1" file="/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video.js" time="30.0110" failures="1">
    <testcase name="amp-video autoplay with control chrome  AMPHTML ads inabox safeframe environment  &quot;before each&quot; hook for &quot;control buttons should manipulate video box behavior&quot;" time="30.0110" classname="&quot;before each&quot; hook for &quot;control buttons should manipulate video box behavior&quot;">
      <failure message="Timeout of 30000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video.js)" type="Error"><![CDATA[Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/Users/rileyjones/amp/amphtml/extensions/amp-video/0.1/test-e2e/test-amp-video.js)
    at listOnTimeout (internal/timers.js:554:17)
    at processTimers (internal/timers.js:497:7)]]></failure>
    </testcase>
  </testsuite>
</testsuites>